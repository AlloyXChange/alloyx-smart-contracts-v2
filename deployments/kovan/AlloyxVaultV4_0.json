{
  "address": "0x0FCc8943c47046c83DEAF6491Cb5a4B6060c6767",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alloyxDURAAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_alloyxCRWNAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_goldfinchDelegacy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositAlloyx",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "DepositNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositStable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PurchaseJunior",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PurchaseSenior",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SellJunior",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SellSenior",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "alloyxDURAToUSDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveDelegacy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alloyxAddress",
          "type": "address"
        }
      ],
      "name": "changeAlloyxDURAAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_goldfinchDelegacy",
          "type": "address"
        }
      ],
      "name": "changeGoldfinchDelegacyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAllAlloyxCRWN",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claimAlloyxCRWN",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimableCRWNToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositAlloyxDURATokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "depositNFTToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositUSDCCoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositUSDCCoinWithStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAlloyxDURATokenBalanceInUSDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isStakeholder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrateERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageCRWNEarning",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageDURARedemption",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageDURARepayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageRewardPerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tranche",
          "type": "uint256"
        }
      ],
      "name": "purchaseJuniorToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "purchaseSeniorTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "sellJuniorToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sellSeniorTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentageCRWNEarning",
          "type": "uint256"
        }
      ],
      "name": "setPercentageCRWNEarning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentageDURARedemption",
          "type": "uint256"
        }
      ],
      "name": "setPercentageDURARedemption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentageDURARepayment",
          "type": "uint256"
        }
      ],
      "name": "setPercentageDURARepayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentageRewardPerYear",
          "type": "uint256"
        }
      ],
      "name": "setPercentageRewardPerYear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeholder",
          "type": "address"
        }
      ],
      "name": "stakeOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "since",
              "type": "uint256"
            }
          ],
          "internalType": "struct AlloyxVaultV4_0.StakeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVaultOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimableAndClaimedCRWNToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimableCRWNToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferAlloyxOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferRedemptionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "usdcToAlloyxDURA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ec19fd26e6e864882550fe23f6ebc390e2f1c3f70802f709e688883c215c60b",
  "receipt": {
    "to": null,
    "from": "0xd988EB2777ec4d844ced75f68148A08310bEFc76",
    "contractAddress": "0x0FCc8943c47046c83DEAF6491Cb5a4B6060c6767",
    "transactionIndex": 1,
    "gasUsed": "3970275",
    "logsBloom": "0x
    "blockHash": "0x54cf17680e0a331f82d211c941d8acdc5bb038379bb053a1143f38a5910b286e",
    "transactionHash": "0x9ec19fd26e6e864882550fe23f6ebc390e2f1c3f70802f709e688883c215c60b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30999682,
        "transactionHash": "0x9ec19fd26e6e864882550fe23f6ebc390e2f1c3f70802f709e688883c215c60b",
        "address": "0x0FCc8943c47046c83DEAF6491Cb5a4B6060c6767",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d988eb2777ec4d844ced75f68148a08310befc76"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x54cf17680e0a331f82d211c941d8acdc5bb038379bb053a1143f38a5910b286e"
      }
    ],
    "blockNumber": 30999682,
    "cumulativeGasUsed": "4128936",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFefB78bccc1713f04dD852265849008C677685C7",
    "0xb280011296203401f147183f156722A00EB6F97A",
    "0x67F3693E36F7a0b4E88b7fDD7227e26188913406",
    "0x976e6c56Ac3c4E9555E0291649FF27EC0579E263"
  ],
  "numDeployments": 1,
  "solcInputHash": "db08b62b14234d1de3753dca8e7e1a75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxDURAAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alloyxCRWNAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_goldfinchDelegacy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositAlloyx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseJunior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseSenior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellJunior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellSenior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"alloyxDURAToUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxAddress\",\"type\":\"address\"}],\"name\":\"changeAlloyxDURAAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_goldfinchDelegacy\",\"type\":\"address\"}],\"name\":\"changeGoldfinchDelegacyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllAlloyxCRWN\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimAlloyxCRWN\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimableCRWNToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAlloyxDURATokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"depositNFTToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDCCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDCCoinWithStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAlloyxDURATokenBalanceInUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageCRWNEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageDURARedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageDURARepayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageRewardPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"}],\"name\":\"purchaseJuniorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"sellJuniorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageCRWNEarning\",\"type\":\"uint256\"}],\"name\":\"setPercentageCRWNEarning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageDURARedemption\",\"type\":\"uint256\"}],\"name\":\"setPercentageDURARedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageDURARepayment\",\"type\":\"uint256\"}],\"name\":\"setPercentageDURARepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageRewardPerYear\",\"type\":\"uint256\"}],\"name\":\"setPercentageRewardPerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"}],\"internalType\":\"struct AlloyxVaultV4_0.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVaultOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimableAndClaimedCRWNToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimableCRWNToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAlloyxOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdcToAlloyxDURA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AlloyX\",\"kind\":\"dev\",\"methods\":{\"alloyxDURAToUSDC(uint256)\":{\"params\":{\"_amount\":\"the amount of DURA token to convert to usdc\"}},\"approveDelegacy(address,address,uint256)\":{\"params\":{\"_account\":\"the account the delegacy going to approve\",\"_amount\":\"the amount the delegacy going to approve\",\"_tokenAddress\":\"the leftover reward the staker owns\"}},\"changeAlloyxDURAAddress(address)\":{\"params\":{\"_alloyxAddress\":\"the address to change to\"}},\"claimAlloyxCRWN(uint256)\":{\"params\":{\"_amount\":\"the amount to claim\"}},\"claimReward(uint256)\":{\"params\":{\"_amount\":\"the amount to claim\"}},\"claimableCRWNToken(address)\":{\"params\":{\"_receiver\":\"the address of receiver\"}},\"depositAlloyxDURATokens(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of Alloy Tokens\"}},\"depositNFTToken(address,uint256)\":{\"params\":{\"_tokenAddress\":\"NFT Address\",\"_tokenID\":\"NFT ID\"}},\"depositUSDCCoin(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of stable coin\"}},\"depositUSDCCoinWithStake(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of stable coin\"}},\"isStakeholder(address)\":{\"params\":{\"_address\":\"The address to verify.\"},\"returns\":{\"_0\":\"bool, uint256 Whether the address is a stakeholder, and if so its position in the stakeholders array.\"}},\"migrateERC20(address,address)\":{\"params\":{\"_to\":\"the address to transfer tokens to\",\"_tokenAddress\":\"the token address to migrate\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"purchaseJuniorToken(uint256,address,uint256)\":{\"params\":{\"_amount\":\"the amount of usdc to purchase by\",\"_poolAddress\":\"the pool address to buy from\",\"_tranche\":\"the tranch id\"}},\"purchaseSeniorTokens(uint256)\":{\"params\":{\"_amount\":\"the amount of usdc to purchase by\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sellJuniorToken(uint256,uint256,address)\":{\"params\":{\"_amount\":\"the amount to withdraw\",\"_poolAddress\":\"the pool address to withdraw from\",\"_tokenId\":\"the ID of token to sell\"}},\"sellSeniorTokens(uint256)\":{\"params\":{\"_amount\":\"the amount of fidu to sell\"}},\"setPercentageCRWNEarning(uint256)\":{\"params\":{\"_percentageCRWNEarning\":\"the earning fee for redeeming CRWN token in percentage in terms of gfi\"}},\"setPercentageDURARedemption(uint256)\":{\"params\":{\"_percentageDURARedemption\":\"the redemption fee for DURA token in percentage\"}},\"setPercentageDURARepayment(uint256)\":{\"params\":{\"_percentageDURARepayment\":\"the repayment fee for DURA token in percentage\"}},\"setPercentageRewardPerYear(uint256)\":{\"params\":{\"_percentageRewardPerYear\":\"the reward per year in percentage\"}},\"stake(uint256)\":{\"params\":{\"_amount\":\"the amount the message sender intending to stake in\"}},\"stakeOf(address)\":{\"params\":{\"_stakeholder\":\"The stakeholder to retrieve the stake for.\"},\"returns\":{\"_0\":\"Stake The amount staked and the time since when it's staked.\"}},\"transferAlloyxOwnership(address)\":{\"params\":{\"_to\":\"the address to transfer ownership to\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferRedemptionFee(address)\":{\"params\":{\"_to\":\"the address to transfer to\"}},\"unstake(uint256)\":{\"params\":{\"_amount\":\"the amount the message sender intending to unstake\"}},\"usdcToAlloyxDURA(uint256)\":{\"params\":{\"_amount\":\"the amount of usdc to convert to DURA token\"}}},\"title\":\"AlloyX Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"alloyxDURAToUSDC(uint256)\":{\"notice\":\"Convert Alloyx DURA to USDC amount\"},\"approveDelegacy(address,address,uint256)\":{\"notice\":\"Request the delegacy to approve certain tokens on certain account for certain amount, it is most used for buying the goldfinch tokens, they need to be able to transfer usdc to them\"},\"changeAlloyxDURAAddress(address)\":{\"notice\":\"Change DURA token address\"},\"claimAllAlloyxCRWN()\":{\"notice\":\"Claim all alloy CRWN tokens of the message sender, the method will mint the CRWN token of the claimable amount to message sender, and clear the past rewards to zero\"},\"claimAlloyxCRWN(uint256)\":{\"notice\":\"Claim certain amount of alloy CRWN tokens of the message sender, the method will mint the CRWN token of the claimable amount to message sender, and clear the past rewards to the remainder\"},\"claimReward(uint256)\":{\"notice\":\"Claim certain amount of reward token based on alloy CRWN token, the method will burn the CRWN token of the amount of message sender, and transfer reward token to message sender\"},\"claimableCRWNToken(address)\":{\"notice\":\"Claimable CRWN token amount of an address\"},\"depositAlloyxDURATokens(uint256)\":{\"notice\":\"An Alloy token holder can deposit their tokens and redeem them for USDC\"},\"depositNFTToken(address,uint256)\":{\"notice\":\"A Junior token holder can deposit their NFT for stable coin\"},\"depositUSDCCoin(uint256)\":{\"notice\":\"A Liquidity Provider can deposit supported stable coins for Alloy Tokens\"},\"depositUSDCCoinWithStake(uint256)\":{\"notice\":\"A Liquidity Provider can deposit supported stable coins for Alloy Tokens\"},\"destroy()\":{\"notice\":\"Destroy the contract\"},\"getAlloyxDURATokenBalanceInUSDC()\":{\"notice\":\"Alloy DURA Token Value in terms of USDC\"},\"isStakeholder(address)\":{\"notice\":\"Check if an address is a stakeholder.\"},\"migrateERC20(address,address)\":{\"notice\":\"Migrate certain ERC20 to an address\"},\"pause()\":{\"notice\":\"Pause all operations except migration of tokens\"},\"purchaseJuniorToken(uint256,address,uint256)\":{\"notice\":\"Purchase junior token through delegacy to get pooltoken inside the delegacy\"},\"purchaseSeniorTokens(uint256)\":{\"notice\":\"Purchase senior token through delegacy to get fidu inside the delegacy\"},\"sellJuniorToken(uint256,uint256,address)\":{\"notice\":\"Sell junior token through delegacy to get repayments\"},\"sellSeniorTokens(uint256)\":{\"notice\":\"Sell senior token through delegacy to redeem fidu\"},\"setPercentageCRWNEarning(uint256)\":{\"notice\":\"Set percentageCRWNEarning which is the earning fee for redeeming CRWN token in percentage in terms of gfi\"},\"setPercentageDURARedemption(uint256)\":{\"notice\":\"Set percentageDURARedemption which is the redemption fee for DURA token in percentage\"},\"setPercentageDURARepayment(uint256)\":{\"notice\":\"Set percentageDURARepayment which is the repayment fee for DURA token in percentage\"},\"setPercentageRewardPerYear(uint256)\":{\"notice\":\"Set percentageRewardPerYear which is the reward per year in percentage\"},\"stake(uint256)\":{\"notice\":\"Stake more into the vault, which will cause the user's DURA token to transfer to vault\"},\"stakeOf(address)\":{\"notice\":\"Retrieve the stake for a stakeholder.\"},\"startVaultOperation()\":{\"notice\":\"Initialize by minting the alloy brown tokens to owner\"},\"totalClaimableAndClaimedCRWNToken()\":{\"notice\":\"Total claimable and claimed CRWN tokens of all stakeholders\"},\"totalClaimableCRWNToken()\":{\"notice\":\"Total claimable CRWN tokens of all stakeholders\"},\"transferAlloyxOwnership(address)\":{\"notice\":\"Transfer the ownership of alloy CRWN and DURA token contract to some other address\"},\"transferRedemptionFee(address)\":{\"notice\":\"Transfer redemption fee to some other address\"},\"unpause()\":{\"notice\":\"Unpause all operations\"},\"unstake(uint256)\":{\"notice\":\"Unstake some from the vault, which will cause the vault to transfer DURA token back to message sender\"},\"usdcToAlloyxDURA(uint256)\":{\"notice\":\"Convert USDC Amount to Alloyx DURA\"}},\"notice\":\"Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch and emits AlloyTokens when a liquidity provider deposits supported stable coins.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alloyx/v4.0/AlloyxVaultV4.0.sol\":\"AlloyxVaultV4_0\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxTokenCRWN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AlloyxTokenCRWN is ERC20, Ownable {\\n  constructor() ERC20(\\\"Crown Gold\\\", \\\"CRWN\\\") {}\\n\\n  function mint(address _account, uint256 _amount) external onlyOwner returns (bool) {\\n    _mint(_account, _amount);\\n    return true;\\n  }\\n\\n  function burn(address _account, uint256 _amount) external onlyOwner returns (bool) {\\n    _burn(_account, _amount);\\n    return true;\\n  }\\n\\n  function contractName() external pure returns (string memory) {\\n    return \\\"AlloyxTokenCRWN\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x04794e07bf12587d49ac6e55c4cb06b42411b8529c438f02a2722abbdf09f326\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxTokenDURA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AlloyxTokenDURA is ERC20, Ownable {\\n  constructor() ERC20(\\\"Duralumin\\\", \\\"DURA\\\") {}\\n\\n  function mint(address _account, uint256 _amount) external onlyOwner returns (bool) {\\n    _mint(_account, _amount);\\n    return true;\\n  }\\n\\n  function burn(address _account, uint256 _amount) external onlyOwner returns (bool) {\\n    _burn(_account, _amount);\\n    return true;\\n  }\\n\\n  function contractName() external pure returns (string memory) {\\n    return \\\"AlloyxTokenDura\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x82f1991afbcae88cec391a6488ac1c1be3a8a4fa5b2bc56c4e970b138763c75d\",\"license\":\"MIT\"},\"contracts/alloyx/IGoldfinchDelegacy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../goldfinch/interfaces/ITranchedPool.sol\\\";\\nimport \\\"../goldfinch/interfaces/ISeniorPool.sol\\\";\\nimport \\\"../goldfinch/interfaces/IPoolTokens.sol\\\";\\n\\n/**\\n * @title Goldfinch Delegacy Interface\\n * @notice Middle layer to communicate with goldfinch contracts\\n * @author AlloyX\\n */\\ninterface IGoldfinchDelegacy {\\n  /**\\n   * @notice GoldFinch PoolToken Value in Value in term of USDC\\n   */\\n  function getGoldfinchDelegacyBalanceInUSDC() external view returns (uint256);\\n\\n  /**\\n   * @notice Claim certain amount of reward token based on alloy silver token, the method will burn the silver token of\\n   * the amount of message sender, and transfer reward token to message sender\\n   * @param _rewardee the address of rewardee\\n   * @param _amount the amount of silver tokens used to claim\\n   * @param _totalSupply total claimable and claimed silver tokens of all stakeholders\\n   * @param _percentageFee the earning fee for redeeming silver token in percentage in terms of GFI\\n   */\\n  function claimReward(\\n    address _rewardee,\\n    uint256 _amount,\\n    uint256 _totalSupply,\\n    uint256 _percentageFee\\n  ) external;\\n\\n  /**\\n   * @notice Purchase junior token through this delegacy to get pooltoken inside this delegacy\\n   * @param _amount the amount of usdc to purchase by\\n   * @param _poolAddress the pool address to buy from\\n   * @param _tranche the tranch id\\n   */\\n  function purchaseJuniorToken(\\n    uint256 _amount,\\n    address _poolAddress,\\n    uint256 _tranche\\n  ) external;\\n\\n  /**\\n   * @notice Sell junior token through this delegacy to get repayments\\n   * @param _tokenId the ID of token to sell\\n   * @param _amount the amount to withdraw\\n   * @param _poolAddress the pool address to withdraw from\\n   * @param _percentageBronzeRepayment the repayment fee for bronze token in percentage\\n   */\\n  function sellJuniorToken(\\n    uint256 _tokenId,\\n    uint256 _amount,\\n    address _poolAddress,\\n    uint256 _percentageBronzeRepayment\\n  ) external;\\n\\n  /**\\n   * @notice Purchase senior token through this delegacy to get FIDU inside this delegacy\\n   * @param _amount the amount of USDC to purchase by\\n   */\\n  function purchaseSeniorTokens(uint256 _amount) external;\\n\\n  /**\\n   * @notice sell senior token through delegacy to redeem fidu\\n   * @param _amount the amount of fidu to sell\\n   * @param _percentageBronzeRepayment the repayment fee for bronze token in percentage\\n   */\\n  function sellSeniorTokens(uint256 _amount, uint256 _percentageBronzeRepayment) external;\\n\\n  /**\\n   * @notice Validates the Pooltoken to be deposited and get the USDC value of the token\\n   * @param _tokenAddress the Pooltoken address\\n   * @param _depositor the person to deposit\\n   * @param _tokenID the ID of the Pooltoken\\n   */\\n  function validatesTokenToDepositAndGetPurchasePrice(\\n    address _tokenAddress,\\n    address _depositor,\\n    uint256 _tokenID\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Pay USDC tokens to account\\n   * @param _to the address to pay to\\n   * @param _amount the amount to pay\\n   */\\n  function payUsdc(address _to, uint256 _amount) external;\\n\\n  /**\\n   * @notice Approve certain amount token of certain address to some other account\\n   * @param _account the address to approve\\n   * @param _amount the amount to approve\\n   * @param _tokenAddress the token address to approve\\n   */\\n  function approve(\\n    address _tokenAddress,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x00f43841792c78d14d9a0a8a1b5cd7bd72e176fd1d80334dc885d15569a0ca81\",\"license\":\"MIT\"},\"contracts/alloyx/v4.0/AlloyxVaultV4.0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../AlloyxTokenDURA.sol\\\";\\nimport \\\"../AlloyxTokenCRWN.sol\\\";\\nimport \\\"../IGoldfinchDelegacy.sol\\\";\\n\\n/**\\n * @title AlloyX Vault\\n * @notice Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch\\n * and emits AlloyTokens when a liquidity provider deposits supported stable coins.\\n * @author AlloyX\\n */\\ncontract AlloyxVaultV4_0 is ERC721Holder, Ownable, Pausable {\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for AlloyxTokenDURA;\\n  using SafeMath for uint256;\\n  struct StakeInfo {\\n    uint256 amount;\\n    uint256 since;\\n  }\\n  bool private vaultStarted;\\n  IERC20 private usdcCoin;\\n  AlloyxTokenDURA private alloyxTokenDURA;\\n  AlloyxTokenCRWN private alloyxTokenCRWN;\\n  IGoldfinchDelegacy private goldfinchDelegacy;\\n  address[] internal stakeholders;\\n  mapping(address => StakeInfo) private stakesMapping;\\n  mapping(address => uint256) private pastRedeemableReward;\\n  uint256 public percentageRewardPerYear = 2;\\n  uint256 public percentageDURARedemption = 1;\\n  uint256 public percentageDURARepayment = 2;\\n  uint256 public percentageCRWNEarning = 10;\\n  uint256 public redemptionFee = 0;\\n\\n  event DepositStable(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n  event DepositNFT(address _tokenAddress, address _tokenSender, uint256 _tokenID);\\n  event DepositAlloyx(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n  event PurchaseSenior(uint256 amount);\\n  event SellSenior(uint256 amount);\\n  event PurchaseJunior(uint256 amount);\\n  event SellJunior(uint256 amount);\\n  event Mint(address _tokenReceiver, uint256 _tokenAmount);\\n  event Burn(address _tokenReceiver, uint256 _tokenAmount);\\n  event Reward(address _tokenReceiver, uint256 _tokenAmount);\\n  event Claim(address _tokenReceiver, uint256 _tokenAmount);\\n  event Stake(address _staker, uint256 _amount);\\n\\n  constructor(\\n    address _alloyxDURAAddress,\\n    address _alloyxCRWNAddress,\\n    address _usdcCoinAddress,\\n    address _goldfinchDelegacy\\n  ) {\\n    alloyxTokenDURA = AlloyxTokenDURA(_alloyxDURAAddress);\\n    alloyxTokenCRWN = AlloyxTokenCRWN(_alloyxCRWNAddress);\\n    usdcCoin = IERC20(_usdcCoinAddress);\\n    goldfinchDelegacy = IGoldfinchDelegacy(_goldfinchDelegacy);\\n    vaultStarted = false;\\n  }\\n\\n  /**\\n   * @notice If vault is started\\n   */\\n  modifier whenVaultStarted() {\\n    require(vaultStarted, \\\"Vault has not start accepting deposits\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice If vault is not started\\n   */\\n  modifier whenVaultNotStarted() {\\n    require(!vaultStarted, \\\"Vault has already start accepting deposits\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Initialize by minting the alloy brown tokens to owner\\n   */\\n  function startVaultOperation() external onlyOwner whenVaultNotStarted returns (bool) {\\n    uint256 totalBalanceInUSDC = getAlloyxDURATokenBalanceInUSDC();\\n    require(totalBalanceInUSDC > 0, \\\"Vault must have positive value before start\\\");\\n    alloyxTokenDURA.mint(\\n      address(this),\\n      totalBalanceInUSDC.mul(alloyMantissa()).div(usdcMantissa())\\n    );\\n    vaultStarted = true;\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Pause all operations except migration of tokens\\n   */\\n  function pause() external onlyOwner whenNotPaused {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Unpause all operations\\n   */\\n  function unpause() external onlyOwner whenPaused {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Check if an address is a stakeholder.\\n   * @param _address The address to verify.\\n   * @return bool, uint256 Whether the address is a stakeholder,\\n   * and if so its position in the stakeholders array.\\n   */\\n  function isStakeholder(address _address) public view returns (bool, uint256) {\\n    for (uint256 s = 0; s < stakeholders.length; s += 1) {\\n      if (_address == stakeholders[s]) return (true, s);\\n    }\\n    return (false, 0);\\n  }\\n\\n  /**\\n   * @notice Add a stakeholder.\\n   * @param _stakeholder The stakeholder to add.\\n   */\\n  function addStakeholder(address _stakeholder) internal {\\n    (bool _isStakeholder, ) = isStakeholder(_stakeholder);\\n    if (!_isStakeholder) stakeholders.push(_stakeholder);\\n  }\\n\\n  /**\\n   * @notice Remove a stakeholder.\\n   * @param _stakeholder The stakeholder to remove.\\n   */\\n  function removeStakeholder(address _stakeholder) internal {\\n    (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);\\n    if (_isStakeholder) {\\n      stakeholders[s] = stakeholders[stakeholders.length - 1];\\n      stakeholders.pop();\\n    }\\n  }\\n\\n  /**\\n   * @notice Retrieve the stake for a stakeholder.\\n   * @param _stakeholder The stakeholder to retrieve the stake for.\\n   * @return Stake The amount staked and the time since when it's staked.\\n   */\\n  function stakeOf(address _stakeholder) public view returns (StakeInfo memory) {\\n    return stakesMapping[_stakeholder];\\n  }\\n\\n  /**\\n   * @notice A method for a stakeholder to create a stake.\\n   * @param _stake The size of the stake to be created.\\n   */\\n  function createStake(uint256 _stake) internal {\\n    if (stakesMapping[msg.sender].amount == 0) addStakeholder(msg.sender);\\n    addPastRedeemableReward(msg.sender, stakesMapping[msg.sender]);\\n    stakesMapping[msg.sender] = StakeInfo(_stake, block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Add stake for a staker\\n   * @param _staker The person intending to stake\\n   * @param _stake The size of the stake to be created.\\n   */\\n  function addStake(address _staker, uint256 _stake) internal {\\n    if (stakesMapping[_staker].amount == 0) addStakeholder(_staker);\\n    addPastRedeemableReward(_staker, stakesMapping[_staker]);\\n    stakesMapping[_staker] = StakeInfo(stakesMapping[_staker].amount.add(_stake), block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Remove stake for a staker\\n   * @param _staker The person intending to remove stake\\n   * @param _stake The size of the stake to be removed.\\n   */\\n  function removeStake(address _staker, uint256 _stake) internal {\\n    require(stakeOf(_staker).amount >= _stake, \\\"User has insufficient dura coin staked\\\");\\n    if (stakesMapping[_staker].amount == 0) addStakeholder(_staker);\\n    addPastRedeemableReward(_staker, stakesMapping[_staker]);\\n    stakesMapping[_staker] = StakeInfo(stakesMapping[_staker].amount.sub(_stake), block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Add the stake to past redeemable reward\\n   * @param _stake the stake to be added into the reward\\n   */\\n  function addPastRedeemableReward(address _staker, StakeInfo storage _stake) internal {\\n    uint256 additionalPastRedeemableReward = calculateRewardFromStake(_stake);\\n    pastRedeemableReward[_staker] = pastRedeemableReward[_staker].add(\\n      additionalPastRedeemableReward\\n    );\\n  }\\n\\n  /**\\n   * @notice Stake more into the vault, which will cause the user's DURA token to transfer to vault\\n   * @param _amount the amount the message sender intending to stake in\\n   */\\n  function stake(uint256 _amount) external whenNotPaused whenVaultStarted returns (bool) {\\n    addStake(msg.sender, _amount);\\n    alloyxTokenDURA.safeTransferFrom(msg.sender, address(this), _amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Unstake some from the vault, which will cause the vault to transfer DURA token back to message sender\\n   * @param _amount the amount the message sender intending to unstake\\n   */\\n  function unstake(uint256 _amount) external whenNotPaused whenVaultStarted returns (bool) {\\n    removeStake(msg.sender, _amount);\\n    alloyxTokenDURA.safeTransfer(msg.sender, _amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice A method for a stakeholder to clear a stake.\\n   */\\n  function clearStake() internal {\\n    createStake(0);\\n  }\\n\\n  /**\\n   * @notice A method for a stakeholder to clear a stake with some leftover reward\\n   * @param _reward the leftover reward the staker owns\\n   */\\n  function clearStakeWithRewardLeft(uint256 _reward) internal {\\n    createStake(0);\\n    pastRedeemableReward[msg.sender] = _reward;\\n  }\\n\\n  function calculateRewardFromStake(StakeInfo memory _stake) internal view returns (uint256) {\\n    return\\n      _stake\\n        .amount\\n        .mul(block.timestamp.sub(_stake.since))\\n        .mul(percentageRewardPerYear)\\n        .div(100)\\n        .div(365 days);\\n  }\\n\\n  /**\\n   * @notice Claimable CRWN token amount of an address\\n   * @param _receiver the address of receiver\\n   */\\n  function claimableCRWNToken(address _receiver) public view returns (uint256) {\\n    StakeInfo memory stakeValue = stakeOf(_receiver);\\n    return pastRedeemableReward[_receiver] + calculateRewardFromStake(stakeValue);\\n  }\\n\\n  /**\\n   * @notice Total claimable CRWN tokens of all stakeholders\\n   */\\n  function totalClaimableCRWNToken() public view returns (uint256) {\\n    uint256 total = 0;\\n    for (uint256 i = 0; i < stakeholders.length; i++) {\\n      total = total.add(claimableCRWNToken(stakeholders[i]));\\n    }\\n    return total;\\n  }\\n\\n  /**\\n   * @notice Total claimable and claimed CRWN tokens of all stakeholders\\n   */\\n  function totalClaimableAndClaimedCRWNToken() public view returns (uint256) {\\n    return totalClaimableCRWNToken().add(alloyxTokenCRWN.totalSupply());\\n  }\\n\\n  /**\\n   * @notice Claim all alloy CRWN tokens of the message sender, the method will mint the CRWN token of the claimable\\n   * amount to message sender, and clear the past rewards to zero\\n   */\\n  function claimAllAlloyxCRWN() external whenNotPaused whenVaultStarted returns (bool) {\\n    uint256 reward = claimableCRWNToken(msg.sender);\\n    alloyxTokenCRWN.mint(msg.sender, reward);\\n    clearStakeWithRewardLeft(0);\\n    emit Claim(msg.sender, reward);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Claim certain amount of alloy CRWN tokens of the message sender, the method will mint the CRWN token of\\n   * the claimable amount to message sender, and clear the past rewards to the remainder\\n   * @param _amount the amount to claim\\n   */\\n  function claimAlloyxCRWN(uint256 _amount) external whenNotPaused whenVaultStarted returns (bool) {\\n    uint256 allReward = claimableCRWNToken(msg.sender);\\n    require(allReward >= _amount, \\\"User has claimed more than he's entitled\\\");\\n    alloyxTokenCRWN.mint(msg.sender, _amount);\\n    clearStakeWithRewardLeft(allReward.sub(_amount));\\n    emit Claim(msg.sender, _amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Claim certain amount of reward token based on alloy CRWN token, the method will burn the CRWN token of\\n   * the amount of message sender, and transfer reward token to message sender\\n   * @param _amount the amount to claim\\n   */\\n  function claimReward(uint256 _amount) external whenNotPaused whenVaultStarted returns (bool) {\\n    require(\\n      alloyxTokenCRWN.balanceOf(address(msg.sender)) >= _amount,\\n      \\\"Balance of crown coin must be larger than the amount to claim\\\"\\n    );\\n    goldfinchDelegacy.claimReward(\\n      msg.sender,\\n      _amount,\\n      totalClaimableAndClaimedCRWNToken(),\\n      percentageCRWNEarning\\n    );\\n    alloyxTokenCRWN.burn(msg.sender, _amount);\\n    emit Reward(msg.sender, _amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Request the delegacy to approve certain tokens on certain account for certain amount, it is most used for\\n   * buying the goldfinch tokens, they need to be able to transfer usdc to them\\n   * @param _tokenAddress the leftover reward the staker owns\\n   * @param _account the account the delegacy going to approve\\n   * @param _amount the amount the delegacy going to approve\\n   */\\n  function approveDelegacy(\\n    address _tokenAddress,\\n    address _account,\\n    uint256 _amount\\n  ) external onlyOwner {\\n    goldfinchDelegacy.approve(_tokenAddress, _account, _amount);\\n  }\\n\\n  /**\\n   * @notice Alloy DURA Token Value in terms of USDC\\n   */\\n  function getAlloyxDURATokenBalanceInUSDC() public view returns (uint256) {\\n    uint256 totalValue = getUSDCBalance().add(\\n      goldfinchDelegacy.getGoldfinchDelegacyBalanceInUSDC()\\n    );\\n    require(\\n      totalValue > redemptionFee,\\n      \\\"the value of vault is not larger than redemption fee, something went wrong\\\"\\n    );\\n    return\\n      getUSDCBalance().add(goldfinchDelegacy.getGoldfinchDelegacyBalanceInUSDC()).sub(\\n        redemptionFee\\n      );\\n  }\\n\\n  /**\\n   * @notice USDC Value in Vault\\n   */\\n  function getUSDCBalance() internal view returns (uint256) {\\n    return usdcCoin.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @notice Convert Alloyx DURA to USDC amount\\n   * @param _amount the amount of DURA token to convert to usdc\\n   */\\n  function alloyxDURAToUSDC(uint256 _amount) public view returns (uint256) {\\n    uint256 alloyDURATotalSupply = alloyxTokenDURA.totalSupply();\\n    uint256 totalVaultAlloyxDURAValueInUSDC = getAlloyxDURATokenBalanceInUSDC();\\n    return _amount.mul(totalVaultAlloyxDURAValueInUSDC).div(alloyDURATotalSupply);\\n  }\\n\\n  /**\\n   * @notice Convert USDC Amount to Alloyx DURA\\n   * @param _amount the amount of usdc to convert to DURA token\\n   */\\n  function usdcToAlloyxDURA(uint256 _amount) public view returns (uint256) {\\n    uint256 alloyDURATotalSupply = alloyxTokenDURA.totalSupply();\\n    uint256 totalVaultAlloyxDURAValueInUSDC = getAlloyxDURATokenBalanceInUSDC();\\n    return _amount.mul(alloyDURATotalSupply).div(totalVaultAlloyxDURAValueInUSDC);\\n  }\\n\\n  /**\\n   * @notice Set percentageRewardPerYear which is the reward per year in percentage\\n   * @param _percentageRewardPerYear the reward per year in percentage\\n   */\\n  function setPercentageRewardPerYear(uint256 _percentageRewardPerYear) external onlyOwner {\\n    percentageRewardPerYear = _percentageRewardPerYear;\\n  }\\n\\n  /**\\n   * @notice Set percentageDURARedemption which is the redemption fee for DURA token in percentage\\n   * @param _percentageDURARedemption the redemption fee for DURA token in percentage\\n   */\\n  function setPercentageDURARedemption(uint256 _percentageDURARedemption) external onlyOwner {\\n    percentageDURARedemption = _percentageDURARedemption;\\n  }\\n\\n  /**\\n   * @notice Set percentageDURARepayment which is the repayment fee for DURA token in percentage\\n   * @param _percentageDURARepayment the repayment fee for DURA token in percentage\\n   */\\n  function setPercentageDURARepayment(uint256 _percentageDURARepayment) external onlyOwner {\\n    percentageDURARepayment = _percentageDURARepayment;\\n  }\\n\\n  /**\\n   * @notice Set percentageCRWNEarning which is the earning fee for redeeming CRWN token in percentage in terms of gfi\\n   * @param _percentageCRWNEarning the earning fee for redeeming CRWN token in percentage in terms of gfi\\n   */\\n  function setPercentageCRWNEarning(uint256 _percentageCRWNEarning) external onlyOwner {\\n    percentageCRWNEarning = _percentageCRWNEarning;\\n  }\\n\\n  /**\\n   * @notice Alloy token with 18 decimals\\n   */\\n  function alloyMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(18);\\n  }\\n\\n  /**\\n   * @notice USDC mantissa with 6 decimals\\n   */\\n  function usdcMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(6);\\n  }\\n\\n  /**\\n   * @notice Change DURA token address\\n   * @param _alloyxAddress the address to change to\\n   */\\n  function changeAlloyxDURAAddress(address _alloyxAddress) external onlyOwner {\\n    alloyxTokenDURA = AlloyxTokenDURA(_alloyxAddress);\\n  }\\n\\n  function changeGoldfinchDelegacyAddress(address _goldfinchDelegacy) external onlyOwner {\\n    goldfinchDelegacy = IGoldfinchDelegacy(_goldfinchDelegacy);\\n  }\\n\\n  /**\\n   * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\\n   * @param _tokenAmount Number of Alloy Tokens\\n   */\\n  function depositAlloyxDURATokens(uint256 _tokenAmount)\\n    external\\n    whenNotPaused\\n    whenVaultStarted\\n    returns (bool)\\n  {\\n    require(\\n      alloyxTokenDURA.balanceOf(msg.sender) >= _tokenAmount,\\n      \\\"User has insufficient alloyx coin\\\"\\n    );\\n    require(\\n      alloyxTokenDURA.allowance(msg.sender, address(this)) >= _tokenAmount,\\n      \\\"User has not approved the vault for sufficient alloyx coin\\\"\\n    );\\n    uint256 amountToWithdraw = alloyxDURAToUSDC(_tokenAmount);\\n    uint256 withdrawalFee = amountToWithdraw.mul(percentageDURARedemption).div(100);\\n    require(amountToWithdraw > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n    require(\\n      usdcCoin.balanceOf(address(this)) >= amountToWithdraw,\\n      \\\"The vault does not have sufficient stable coin\\\"\\n    );\\n    alloyxTokenDURA.burn(msg.sender, _tokenAmount);\\n    usdcCoin.safeTransfer(msg.sender, amountToWithdraw.sub(withdrawalFee));\\n    redemptionFee = redemptionFee.add(withdrawalFee);\\n    emit DepositAlloyx(address(alloyxTokenDURA), msg.sender, _tokenAmount);\\n    emit Burn(msg.sender, _tokenAmount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\\n   * @param _tokenAmount Number of stable coin\\n   */\\n  function depositUSDCCoin(uint256 _tokenAmount)\\n    external\\n    whenNotPaused\\n    whenVaultStarted\\n    returns (bool)\\n  {\\n    require(usdcCoin.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient stable coin\\\");\\n    require(\\n      usdcCoin.allowance(msg.sender, address(this)) >= _tokenAmount,\\n      \\\"User has not approved the vault for sufficient stable coin\\\"\\n    );\\n    uint256 amountToMint = usdcToAlloyxDURA(_tokenAmount);\\n    require(amountToMint > 0, \\\"The amount of alloyx DURA coin to get is not larger than 0\\\");\\n    usdcCoin.safeTransferFrom(msg.sender, address(goldfinchDelegacy), _tokenAmount);\\n    alloyxTokenDURA.mint(msg.sender, amountToMint);\\n    emit DepositStable(address(usdcCoin), msg.sender, amountToMint);\\n    emit Mint(msg.sender, amountToMint);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\\n   * @param _tokenAmount Number of stable coin\\n   */\\n  function depositUSDCCoinWithStake(uint256 _tokenAmount)\\n    external\\n    whenNotPaused\\n    whenVaultStarted\\n    returns (bool)\\n  {\\n    require(usdcCoin.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient stable coin\\\");\\n    require(\\n      usdcCoin.allowance(msg.sender, address(this)) >= _tokenAmount,\\n      \\\"User has not approved the vault for sufficient stable coin\\\"\\n    );\\n    uint256 amountToMint = usdcToAlloyxDURA(_tokenAmount);\\n    require(amountToMint > 0, \\\"The amount of alloyx DURA coin to get is not larger than 0\\\");\\n    usdcCoin.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n    alloyxTokenDURA.mint(address(this), amountToMint);\\n    addStake(msg.sender, amountToMint);\\n    emit DepositStable(address(usdcCoin), msg.sender, amountToMint);\\n    emit Mint(address(this), amountToMint);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice A Junior token holder can deposit their NFT for stable coin\\n   * @param _tokenAddress NFT Address\\n   * @param _tokenID NFT ID\\n   */\\n  function depositNFTToken(address _tokenAddress, uint256 _tokenID)\\n    external\\n    whenNotPaused\\n    whenVaultStarted\\n    returns (bool)\\n  {\\n    uint256 purchasePrice = goldfinchDelegacy.validatesTokenToDepositAndGetPurchasePrice(\\n      _tokenAddress,\\n      msg.sender,\\n      _tokenID\\n    );\\n    IERC721(_tokenAddress).safeTransferFrom(msg.sender, address(goldfinchDelegacy), _tokenID);\\n    goldfinchDelegacy.payUsdc(msg.sender, purchasePrice);\\n    emit DepositNFT(_tokenAddress, msg.sender, _tokenID);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Purchase junior token through delegacy to get pooltoken inside the delegacy\\n   * @param _amount the amount of usdc to purchase by\\n   * @param _poolAddress the pool address to buy from\\n   * @param _tranche the tranch id\\n   */\\n  function purchaseJuniorToken(\\n    uint256 _amount,\\n    address _poolAddress,\\n    uint256 _tranche\\n  ) external onlyOwner {\\n    require(_amount > 0, \\\"Must deposit more than zero\\\");\\n    goldfinchDelegacy.purchaseJuniorToken(_amount, _poolAddress, _tranche);\\n    emit PurchaseJunior(_amount);\\n  }\\n\\n  /**\\n   * @notice Sell junior token through delegacy to get repayments\\n   * @param _tokenId the ID of token to sell\\n   * @param _amount the amount to withdraw\\n   * @param _poolAddress the pool address to withdraw from\\n   */\\n  function sellJuniorToken(\\n    uint256 _tokenId,\\n    uint256 _amount,\\n    address _poolAddress\\n  ) external onlyOwner {\\n    require(_amount > 0, \\\"Must sell more than zero\\\");\\n    goldfinchDelegacy.sellJuniorToken(_tokenId, _amount, _poolAddress, percentageDURARepayment);\\n    emit SellSenior(_amount);\\n  }\\n\\n  /**\\n   * @notice Purchase senior token through delegacy to get fidu inside the delegacy\\n   * @param _amount the amount of usdc to purchase by\\n   */\\n  function purchaseSeniorTokens(uint256 _amount) external onlyOwner {\\n    require(_amount > 0, \\\"Must deposit more than zero\\\");\\n    goldfinchDelegacy.purchaseSeniorTokens(_amount);\\n    emit PurchaseSenior(_amount);\\n  }\\n\\n  /**\\n   * @notice Sell senior token through delegacy to redeem fidu\\n   * @param _amount the amount of fidu to sell\\n   */\\n  function sellSeniorTokens(uint256 _amount) external onlyOwner {\\n    require(_amount > 0, \\\"Must sell more than zero\\\");\\n    goldfinchDelegacy.sellSeniorTokens(_amount, percentageDURARepayment);\\n    emit SellSenior(_amount);\\n  }\\n\\n  /**\\n   * @notice Destroy the contract\\n   */\\n  function destroy() external onlyOwner whenPaused {\\n    require(usdcCoin.balanceOf(address(this)) == 0, \\\"Balance of stable coin must be 0\\\");\\n\\n    address payable addr = payable(address(owner()));\\n    selfdestruct(addr);\\n  }\\n\\n  /**\\n   * @notice Migrate certain ERC20 to an address\\n   * @param _tokenAddress the token address to migrate\\n   * @param _to the address to transfer tokens to\\n   */\\n  function migrateERC20(address _tokenAddress, address _to) external onlyOwner whenPaused {\\n    uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n    IERC20(_tokenAddress).safeTransfer(_to, balance);\\n  }\\n\\n  /**\\n   * @notice Transfer redemption fee to some other address\\n   * @param _to the address to transfer to\\n   */\\n  function transferRedemptionFee(address _to) external onlyOwner whenNotPaused {\\n    usdcCoin.safeTransfer(_to, redemptionFee);\\n    redemptionFee = 0;\\n  }\\n\\n  /**\\n   * @notice Transfer the ownership of alloy CRWN and DURA token contract to some other address\\n   * @param _to the address to transfer ownership to\\n   */\\n  function transferAlloyxOwnership(address _to) external onlyOwner whenPaused {\\n    alloyxTokenDURA.transferOwnership(_to);\\n    alloyxTokenCRWN.transferOwnership(_to);\\n  }\\n}\\n\",\"keccak256\":\"0x6410a3c027d2815b2a16a32870073a892116579382a644316d7722176715780e\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfea45d04903141890eeb3739f2481a1b3fe94cdfa58457e7d2fe9c962a112725\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPoolTokens is IERC721, IERC721Enumerable {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe672903d9d507aab4254c1f9bc3c581e02c1899217355c94922701b2413352ba\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x3ed9fff9cf9e8e14f2c090e97bbf78dcf65b7e63955c1c0ab5ce02814e8fe421\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts)\\n    external\\n    virtual;\\n}\\n\",\"keccak256\":\"0x3f653ee468dcaef9a5fc81d23a23eb0aa8c2e5669b560d0d2ed4bb46644c9aae\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xb5211aa4a83a69c7ebdb3a4f21fbd432c809c1e1f3406295287f6628bc0e7205\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600260085560016009556002600a55600a600b556000600c553480156200002a57600080fd5b50604051620044bd380380620044bd8339810160408190526200004d9162000127565b6200005833620000ba565b60008054600280546001600160a01b03199081166001600160a01b0398891617909155600380548216968816969096179095556001805486169487169490941790935560048054909416919094161790915561ffff60a01b1916905562000184565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200012257600080fd5b919050565b600080600080608085870312156200013e57600080fd5b62000149856200010a565b935062000159602086016200010a565b925062000169604086016200010a565b915062000179606086016200010a565b905092959194509250565b61432980620001946000396000f3fe608060405234801561001057600080fd5b50600436106102ff5760003560e01c806383197ef01161019c578063c8977e02116100ee578063e91f03e611610097578063ef037b9011610071578063ef037b9014610653578063f1a341f71461067d578063f2fde38b1461069057600080fd5b8063e91f03e614610630578063e93039cb14610638578063ede7bf601461064057600080fd5b8063d8ec0608116100c8578063d8ec060814610601578063d905e9b414610614578063dabb98aa1461062757600080fd5b8063c8977e02146105c8578063cb80714b146105db578063ce3c39c1146105ee57600080fd5b80639cdad70811610150578063ae169a501161012a578063ae169a501461058f578063b338ad16146105a2578063c070c2bd146105b557600080fd5b80639cdad70814610556578063a45921ff14610569578063a694fc3a1461057c57600080fd5b80638d6f4d21116101815780638d6f4d21146105205780638da5cb5b146105285780638f2da01d1461054357600080fd5b806383197ef0146105105780638456cb591461051857600080fd5b80633f4ba83a116102555780635c975abb11610209578063715018a6116101e3578063715018a6146104e2578063816c1acd146104ea57806382633519146104fd57600080fd5b80635c975abb146104bf5780635ddd351d146104d157806364cdc99e146104da57600080fd5b8063458f58151161023a578063458f58151461049057806351ba97241461049957806353c98f5a146104ac57600080fd5b80633f4ba83a14610418578063426233601461042057600080fd5b80631b61eb67116102b75780632a88ec54116102915780632a88ec54146103df5780632c579213146103f25780632e17de781461040557600080fd5b80631b61eb67146103b0578063223ea9b0146103c35780632456a11d146103cc57600080fd5b80630d7a3c6e116102e85780630d7a3c6e146103385780630eb9a0071461034b578063150b7a021461036057600080fd5b806307dd2ef2146103045780630d51800114610320575b600080fd5b61030d600b5481565b6040519081526020015b60405180910390f35b6103286106a3565b6040519015158152602001610317565b61030d610346366004614014565b61083a565b61035e610359366004613e62565b6108ed565b005b61039761036e366004613eec565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b03199091168152602001610317565b61035e6103be366004614046565b610964565b61030d600a5481565b61035e6103da366004614014565b610abe565b61035e6103ed366004613e62565b610b0b565b61035e610400366004614014565b610bc5565b610328610413366004614014565b610d16565b61035e610df6565b61047561042e366004613e62565b6040805180820190915260008082526020820152506001600160a01b0316600090815260066020908152604091829020825180840190935280548352600101549082015290565b60408051825181526020928301519281019290925201610317565b61030d600c5481565b6103286104a7366004614014565b610e98565b6103286104ba366004614014565b6110ab565b600054600160a01b900460ff16610328565b61030d60095481565b61030d6114d2565b61035e611535565b61030d6104f8366004613e62565b611587565b61035e61050b366004614014565b6115fb565b61035e611648565b61035e6117b7565b610328611854565b6000546040516001600160a01b039091168152602001610317565b61035e610551366004614014565b611a82565b61035e610564366004614014565b611bc0565b61035e610577366004613eb0565b611c0d565b61032861058a366004614014565b611ce3565b61032861059d366004614014565b611dbb565b6103286105b0366004613fc8565b6120af565b61035e6105c3366004613e62565b61236f565b6103286105d6366004614014565b6123e6565b61035e6105e9366004614014565b612939565b6103286105fc366004614014565b612986565b61035e61060f366004613e62565b612db0565b61035e610622366004613e7d565b612f09565b61030d60085481565b61030d613036565b61030d6131df565b61030d61064e366004614014565b613277565b610666610661366004613e62565b61331c565b604080519215158352602083019190915201610317565b61035e61068b36600461406b565b613387565b61035e61069e366004613e62565b6134df565b60008054600160a01b900460ff16156106f65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064015b60405180910390fd5b600054600160a81b900460ff1661075e5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b600061076933611587565b6003546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401602060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee9190613ff2565b506107f960006135af565b60408051338152602081018390527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4910160405180910390a1600191505090565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088b57600080fd5b505afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c3919061402d565b905060006108cf613036565b90506108e5816108df86856135cb565b906135d7565b949350505050565b6000546001600160a01b031633146109355760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146109ac5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600083116109fc5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f000000000060448201526064016106ed565b600480546040517f1b61eb670000000000000000000000000000000000000000000000000000000081529182018590526001600160a01b038481166024840152604483018490521690631b61eb6790606401600060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505050507f7a3794cf7d311106018524dfd41878138e4264f1bee18e53f1c180a1627fa2b883604051610ab191815260200190565b60405180910390a1505050565b6000546001600160a01b03163314610b065760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600855565b6000546001600160a01b03163314610b535760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff1615610ba05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600c54600154610bbd916001600160a01b039091169083906135e3565b506000600c55565b6000546001600160a01b03163314610c0d5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b60008111610c5d5760405162461bcd60e51b815260206004820152601860248201527f4d7573742073656c6c206d6f7265207468616e207a65726f000000000000000060448201526064016106ed565b60048054600a546040517ff5a4162700000000000000000000000000000000000000000000000000000000815292830184905260248301526001600160a01b03169063f5a4162790604401600060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b505050507fc3085fd698c0021cf2ad330617df928819e049637665217c5e7757452f991d3181604051610d0b91815260200190565b60405180910390a150565b60008054600160a01b900460ff1615610d645760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff16610dcc5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b610dd63383613674565b600254610ded906001600160a01b031633846135e3565b5060015b919050565b6000546001600160a01b03163314610e3e5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff16610e8e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b610e966137d3565b565b60008054600160a01b900460ff1615610ee65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff16610f4e5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b6000610f5933611587565b905082811015610fd15760405162461bcd60e51b815260206004820152602860248201527f557365722068617320636c61696d6564206d6f7265207468616e20686527732060448201527f656e7469746c656400000000000000000000000000000000000000000000000060648201526084016106ed565b6003546040516340c10f1960e01b8152336004820152602481018590526001600160a01b03909116906340c10f1990604401602060405180830381600087803b15801561101d57600080fd5b505af1158015611031573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110559190613ff2565b506110686110638285613870565b6135af565b60408051338152602081018590527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d491015b60405180910390a150600192915050565b60008054600160a01b900460ff16156110f95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff166111615760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156111a457600080fd5b505afa1580156111b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dc919061402d565b10156112345760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420737461626c6520636f696044820152603760f91b60648201526084016106ed565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561127d57600080fd5b505afa158015611291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b5919061402d565b10156113295760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420737461626c6520636f696e00000000000060648201526084016106ed565b60006113348361083a565b9050600081116113ac5760405162461bcd60e51b815260206004820152603a60248201527f54686520616d6f756e74206f6620616c6c6f7978204455524120636f696e207460448201527f6f20676574206973206e6f74206c6172676572207468616e203000000000000060648201526084016106ed565b6004546001546113cb916001600160a01b03918216913391168661387c565b6002546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401602060405180830381600087803b15801561141757600080fd5b505af115801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f9190613ff2565b50600154604080516001600160a01b03909216825233602083015281018290527fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f9060600160405180910390a160408051338152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910161109a565b600080805b60055481101561152f5761151b611514600583815481106114fa576114fa6142a7565b6000918252602090912001546001600160a01b0316611587565b83906138d3565b91508061152781614276565b9150506114d7565b50919050565b6000546001600160a01b0316331461157d5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b610e9660006138df565b604080518082018252600080825260209182018190526001600160a01b0384168152600682528281208351808501909452805484526001015491830191909152906115d18161393c565b6001600160a01b0384166000908152600760205260409020546115f491906140ef565b9392505050565b6000546001600160a01b031633146116435760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600a55565b6000546001600160a01b031633146116905760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff166116e05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561172357600080fd5b505afa158015611737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175b919061402d565b156117a85760405162461bcd60e51b815260206004820181905260248201527f42616c616e6365206f6620737461626c6520636f696e206d757374206265203060448201526064016106ed565b6000546001600160a01b031680ff5b6000546001600160a01b031633146117ff5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff161561184c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b610e96613979565b600080546001600160a01b0316331461189d5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a81b900460ff161561191d5760405162461bcd60e51b815260206004820152602a60248201527f5661756c742068617320616c726561647920737461727420616363657074696e60448201527f67206465706f736974730000000000000000000000000000000000000000000060648201526084016106ed565b6000611927613036565b90506000811161199f5760405162461bcd60e51b815260206004820152602b60248201527f5661756c74206d757374206861766520706f7369746976652076616c7565206260448201527f65666f726520737461727400000000000000000000000000000000000000000060648201526084016106ed565b6002546001600160a01b03166340c10f19306119ce6119bc613a01565b6108df6119c7613a0f565b87906135cb565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611a1457600080fd5b505af1158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c9190613ff2565b5050600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b17905550600190565b6000546001600160a01b03163314611aca5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b60008111611b1a5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f000000000060448201526064016106ed565b600480546040517f8f2da01d0000000000000000000000000000000000000000000000000000000081529182018390526001600160a01b031690638f2da01d90602401600060405180830381600087803b158015611b7757600080fd5b505af1158015611b8b573d6000803e3d6000fd5b505050507fd483110686f79d1f5932d32add1024998649ddca927700b75bea458b4cb7cde681604051610d0b91815260200190565b6000546001600160a01b03163314611c085760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600955565b6000546001600160a01b03163314611c555760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600480546040517fe1f21c670000000000000000000000000000000000000000000000000000000081526001600160a01b038681169382019390935284831660248201526044810184905291169063e1f21c6790606401600060405180830381600087803b158015611cc657600080fd5b505af1158015611cda573d6000803e3d6000fd5b50505050505050565b60008054600160a01b900460ff1615611d315760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff16611d995760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b611da33383613a1d565b600254610ded906001600160a01b031633308561387c565b60008054600160a01b900460ff1615611e095760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff16611e715760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b6003546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015611eb457600080fd5b505afa158015611ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eec919061402d565b1015611f605760405162461bcd60e51b815260206004820152603d60248201527f42616c616e6365206f662063726f776e20636f696e206d757374206265206c6160448201527f72676572207468616e2074686520616d6f756e7420746f20636c61696d00000060648201526084016106ed565b6004546001600160a01b031663d848b0583384611f7b6131df565b600b546040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b158015611fd157600080fd5b505af1158015611fe5573d6000803e3d6000fd5b5050600354604051632770a7eb60e21b8152336004820152602481018690526001600160a01b039091169250639dc29fac9150604401602060405180830381600087803b15801561203557600080fd5b505af1158015612049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206d9190613ff2565b5060408051338152602081018490527f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc9910160405180910390a1506001919050565b60008054600160a01b900460ff16156120fd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff166121655760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b600480546040517fe7e808e60000000000000000000000000000000000000000000000000000000081526001600160a01b0386811693820193909352336024820152604481018590526000929091169063e7e808e690606401602060405180830381600087803b1580156121d857600080fd5b505af11580156121ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612210919061402d565b600480546040517f42842e0e00000000000000000000000000000000000000000000000000000000815233928101929092526001600160a01b03908116602483015260448201869052919250908516906342842e0e90606401600060405180830381600087803b15801561228357600080fd5b505af1158015612297573d6000803e3d6000fd5b5050600480546040517f196b54430000000000000000000000000000000000000000000000000000000081523392810192909252602482018590526001600160a01b0316925063196b54439150604401600060405180830381600087803b15801561230157600080fd5b505af1158015612315573d6000803e3d6000fd5b5050604080516001600160a01b03881681523360208201529081018690527fc7e8b1bdbecdc8a549557efb2a2ab715cff51630caead31610000019e61dfa4b9250606001905060405180910390a160019150505b92915050565b6000546001600160a01b031633146123b75760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008054600160a01b900460ff16156124345760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff1661249c5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b6002546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156124df57600080fd5b505afa1580156124f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612517919061402d565b101561256f5760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420616c6c6f797820636f696044820152603760f91b60648201526084016106ed565b600254604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b1580156125b857600080fd5b505afa1580156125cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f0919061402d565b10156126645760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420616c6c6f797820636f696e00000000000060648201526084016106ed565b600061266f83613277565b9050600061268d60646108df600954856135cb90919063ffffffff16565b9050600082116127055760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e2030000000000000000000000060648201526084016106ed565b6001546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561274857600080fd5b505afa15801561275c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612780919061402d565b10156127f45760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e00000000000000000000000000000000000060648201526084016106ed565b600254604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401602060405180830381600087803b15801561284057600080fd5b505af1158015612854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128789190613ff2565b5061289a336128878484613870565b6001546001600160a01b031691906135e3565b600c546128a790826138d3565b600c55600254604080516001600160a01b03909216825233602083015281018590527f53fee901a59b4d2e659e450f8db17fc345e158fe408d2b39faf66d1f8c4a54fe9060600160405180910390a160408051338152602081018690527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5910160405180910390a15060019392505050565b6000546001600160a01b031633146129815760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600b55565b60008054600160a01b900460ff16156129d45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff16612a3c5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015612a7f57600080fd5b505afa158015612a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab7919061402d565b1015612b0f5760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420737461626c6520636f696044820152603760f91b60648201526084016106ed565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015612b5857600080fd5b505afa158015612b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b90919061402d565b1015612c045760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420737461626c6520636f696e00000000000060648201526084016106ed565b6000612c0f8361083a565b905060008111612c875760405162461bcd60e51b815260206004820152603a60248201527f54686520616d6f756e74206f6620616c6c6f7978204455524120636f696e207460448201527f6f20676574206973206e6f74206c6172676572207468616e203000000000000060648201526084016106ed565b600154612c9f906001600160a01b031633308661387c565b6002546040516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401602060405180830381600087803b158015612ceb57600080fd5b505af1158015612cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d239190613ff2565b50612d2e3382613a1d565b600154604080516001600160a01b03909216825233602083015281018290527fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f9060600160405180910390a160408051308152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910161109a565b6000546001600160a01b03163314612df85760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff16612e485760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b60025460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b158015612e8f57600080fd5b505af1158015612ea3573d6000803e3d6000fd5b505060035460405163f2fde38b60e01b81526001600160a01b038581166004830152909116925063f2fde38b9150602401600060405180830381600087803b158015612eee57600080fd5b505af1158015612f02573d6000803e3d6000fd5b5050505050565b6000546001600160a01b03163314612f515760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff16612fa15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015612fe357600080fd5b505afa158015612ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301b919061402d565b90506130316001600160a01b03841683836135e3565b505050565b6000806130d0600460009054906101000a90046001600160a01b03166001600160a01b031663531d7dec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561308a57600080fd5b505afa15801561309e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c2919061402d565b6130ca613a94565b906138d3565b9050600c54811161316f5760405162461bcd60e51b815260206004820152604a60248201527f7468652076616c7565206f66207661756c74206973206e6f74206c617267657260448201527f207468616e20726564656d7074696f6e206665652c20736f6d657468696e672060648201527f77656e742077726f6e6700000000000000000000000000000000000000000000608482015260a4016106ed565b600c5460048054604080517f531d7dec00000000000000000000000000000000000000000000000000000000815290516131d994936131d3936001600160a01b03169263531d7dec9281830192602092829003018186803b15801561308a57600080fd5b90613870565b91505090565b6000613272600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561323257600080fd5b505afa158015613246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326a919061402d565b6130ca6114d2565b905090565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132c857600080fd5b505afa1580156132dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613300919061402d565b9050600061330c613036565b90506108e5826108df86846135cb565b60008060005b60055481101561337b576005818154811061333f5761333f6142a7565b6000918252602090912001546001600160a01b038581169116141561336957600194909350915050565b6133746001826140ef565b9050613322565b50600093849350915050565b6000546001600160a01b031633146133cf5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b6000821161341f5760405162461bcd60e51b815260206004820152601860248201527f4d7573742073656c6c206d6f7265207468616e207a65726f000000000000000060448201526064016106ed565b60048054600a546040517f93af90a9000000000000000000000000000000000000000000000000000000008152928301869052602483018590526001600160a01b038481166044850152606484019190915216906393af90a990608401600060405180830381600087803b15801561349657600080fd5b505af11580156134aa573d6000803e3d6000fd5b505050507fc3085fd698c0021cf2ad330617df928819e049637665217c5e7757452f991d3182604051610ab191815260200190565b6000546001600160a01b031633146135275760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b6001600160a01b0381166135a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106ed565b6135ac816138df565b50565b6135b96000613b10565b33600090815260076020526040902055565b60006115f48284614214565b60006115f48284614107565b6040516001600160a01b0383166024820152604481018290526130319084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613b77565b604080518082018252600080825260209182018190526001600160a01b038516815260068252829020825180840190935280548352600101549082015281905110156137285760405162461bcd60e51b815260206004820152602660248201527f557365722068617320696e73756666696369656e74206475726120636f696e2060448201527f7374616b6564000000000000000000000000000000000000000000000000000060648201526084016106ed565b6001600160a01b03821660009081526006602052604090205461374e5761374e82613c5c565b6001600160a01b0382166000908152600660205260409020613771908390613ccc565b6040805180820182526001600160a01b038416600090815260066020529190912054819061379f9084613870565b8152426020918201526001600160a01b03909316600090815260068452604090208151815592015160019092019190915550565b600054600160a01b900460ff166138235760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006115f48284614233565b6040516001600160a01b03808516602483015283166044820152606481018290526138cd9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401613628565b50505050565b60006115f482846140ef565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006123696301e133806108df60646108df60085461397361396b89602001514261387090919063ffffffff16565b8951906135cb565b906135cb565b600054600160a01b900460ff16156139c65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586138533390565b60006132726006600a61416c565b60006132726012600a61416c565b6001600160a01b038216600090815260066020526040902054613a4357613a4382613c5c565b6001600160a01b0382166000908152600660205260409020613a66908390613ccc565b6040805180820182526001600160a01b038416600090815260066020529190912054819061379f90846138d3565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015613ad857600080fd5b505afa158015613aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613272919061402d565b33600090815260066020526040902054613b2d57613b2d33613c5c565b336000818152600660205260409020613b469190613ccc565b6040805180820182529182524260208084019182523360009081526006909152919091209151825551600190910155565b6000613bcc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d379092919063ffffffff16565b8051909150156130315780806020019051810190613bea9190613ff2565b6130315760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106ed565b6000613c678261331c565b50905080613cc857600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555b5050565b604080518082019091528154815260018201546020820152600090613cf09061393c565b6001600160a01b038416600090815260076020526040902054909150613d1690826138d3565b6001600160a01b039093166000908152600760205260409020929092555050565b60606108e58484600085856001600160a01b0385163b613d995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106ed565b600080866001600160a01b03168587604051613db591906140a0565b60006040518083038185875af1925050503d8060008114613df2576040519150601f19603f3d011682016040523d82523d6000602084013e613df7565b606091505b5091509150613e07828286613e12565b979650505050505050565b60608315613e215750816115f4565b825115613e315782518084602001fd5b8160405162461bcd60e51b81526004016106ed91906140bc565b80356001600160a01b0381168114610df157600080fd5b600060208284031215613e7457600080fd5b6115f482613e4b565b60008060408385031215613e9057600080fd5b613e9983613e4b565b9150613ea760208401613e4b565b90509250929050565b600080600060608486031215613ec557600080fd5b613ece84613e4b565b9250613edc60208501613e4b565b9150604084013590509250925092565b60008060008060808587031215613f0257600080fd5b613f0b85613e4b565b9350613f1960208601613e4b565b925060408501359150606085013567ffffffffffffffff80821115613f3d57600080fd5b818701915087601f830112613f5157600080fd5b813581811115613f6357613f636142bd565b604051601f8201601f19908116603f01168101908382118183101715613f8b57613f8b6142bd565b816040528281528a6020848701011115613fa457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613fdb57600080fd5b613fe483613e4b565b946020939093013593505050565b60006020828403121561400457600080fd5b815180151581146115f457600080fd5b60006020828403121561402657600080fd5b5035919050565b60006020828403121561403f57600080fd5b5051919050565b60008060006060848603121561405b57600080fd5b83359250613edc60208501613e4b565b60008060006060848603121561408057600080fd5b833592506020840135915061409760408501613e4b565b90509250925092565b600082516140b281846020870161424a565b9190910192915050565b60208152600082518060208401526140db81604085016020870161424a565b601f01601f19169190910160400192915050565b6000821982111561410257614102614291565b500190565b60008261412457634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561416457816000190482111561414a5761414a614291565b8085161561415757918102915b93841c939080029061412e565b509250929050565b60006115f4838360008261418257506001612369565b8161418f57506000612369565b81600181146141a557600281146141af576141cb565b6001915050612369565b60ff8411156141c0576141c0614291565b50506001821b612369565b5060208310610133831016604e8410600b84101617156141ee575081810a612369565b6141f88383614129565b806000190482111561420c5761420c614291565b029392505050565b600081600019048311821515161561422e5761422e614291565b500290565b60008282101561424557614245614291565b500390565b60005b8381101561426557818101518382015260200161424d565b838111156138cd5750506000910152565b600060001982141561428a5761428a614291565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122089246aac15a8f38c6719252eda68c85400bb8078aaecfc4e6cdc2dd88fde37ca64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ff5760003560e01c806383197ef01161019c578063c8977e02116100ee578063e91f03e611610097578063ef037b9011610071578063ef037b9014610653578063f1a341f71461067d578063f2fde38b1461069057600080fd5b8063e91f03e614610630578063e93039cb14610638578063ede7bf601461064057600080fd5b8063d8ec0608116100c8578063d8ec060814610601578063d905e9b414610614578063dabb98aa1461062757600080fd5b8063c8977e02146105c8578063cb80714b146105db578063ce3c39c1146105ee57600080fd5b80639cdad70811610150578063ae169a501161012a578063ae169a501461058f578063b338ad16146105a2578063c070c2bd146105b557600080fd5b80639cdad70814610556578063a45921ff14610569578063a694fc3a1461057c57600080fd5b80638d6f4d21116101815780638d6f4d21146105205780638da5cb5b146105285780638f2da01d1461054357600080fd5b806383197ef0146105105780638456cb591461051857600080fd5b80633f4ba83a116102555780635c975abb11610209578063715018a6116101e3578063715018a6146104e2578063816c1acd146104ea57806382633519146104fd57600080fd5b80635c975abb146104bf5780635ddd351d146104d157806364cdc99e146104da57600080fd5b8063458f58151161023a578063458f58151461049057806351ba97241461049957806353c98f5a146104ac57600080fd5b80633f4ba83a14610418578063426233601461042057600080fd5b80631b61eb67116102b75780632a88ec54116102915780632a88ec54146103df5780632c579213146103f25780632e17de781461040557600080fd5b80631b61eb67146103b0578063223ea9b0146103c35780632456a11d146103cc57600080fd5b80630d7a3c6e116102e85780630d7a3c6e146103385780630eb9a0071461034b578063150b7a021461036057600080fd5b806307dd2ef2146103045780630d51800114610320575b600080fd5b61030d600b5481565b6040519081526020015b60405180910390f35b6103286106a3565b6040519015158152602001610317565b61030d610346366004614014565b61083a565b61035e610359366004613e62565b6108ed565b005b61039761036e366004613eec565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b03199091168152602001610317565b61035e6103be366004614046565b610964565b61030d600a5481565b61035e6103da366004614014565b610abe565b61035e6103ed366004613e62565b610b0b565b61035e610400366004614014565b610bc5565b610328610413366004614014565b610d16565b61035e610df6565b61047561042e366004613e62565b6040805180820190915260008082526020820152506001600160a01b0316600090815260066020908152604091829020825180840190935280548352600101549082015290565b60408051825181526020928301519281019290925201610317565b61030d600c5481565b6103286104a7366004614014565b610e98565b6103286104ba366004614014565b6110ab565b600054600160a01b900460ff16610328565b61030d60095481565b61030d6114d2565b61035e611535565b61030d6104f8366004613e62565b611587565b61035e61050b366004614014565b6115fb565b61035e611648565b61035e6117b7565b610328611854565b6000546040516001600160a01b039091168152602001610317565b61035e610551366004614014565b611a82565b61035e610564366004614014565b611bc0565b61035e610577366004613eb0565b611c0d565b61032861058a366004614014565b611ce3565b61032861059d366004614014565b611dbb565b6103286105b0366004613fc8565b6120af565b61035e6105c3366004613e62565b61236f565b6103286105d6366004614014565b6123e6565b61035e6105e9366004614014565b612939565b6103286105fc366004614014565b612986565b61035e61060f366004613e62565b612db0565b61035e610622366004613e7d565b612f09565b61030d60085481565b61030d613036565b61030d6131df565b61030d61064e366004614014565b613277565b610666610661366004613e62565b61331c565b604080519215158352602083019190915201610317565b61035e61068b36600461406b565b613387565b61035e61069e366004613e62565b6134df565b60008054600160a01b900460ff16156106f65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064015b60405180910390fd5b600054600160a81b900460ff1661075e5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b600061076933611587565b6003546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401602060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee9190613ff2565b506107f960006135af565b60408051338152602081018390527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4910160405180910390a1600191505090565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561088b57600080fd5b505afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c3919061402d565b905060006108cf613036565b90506108e5816108df86856135cb565b906135d7565b949350505050565b6000546001600160a01b031633146109355760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146109ac5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600083116109fc5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f000000000060448201526064016106ed565b600480546040517f1b61eb670000000000000000000000000000000000000000000000000000000081529182018590526001600160a01b038481166024840152604483018490521690631b61eb6790606401600060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505050507f7a3794cf7d311106018524dfd41878138e4264f1bee18e53f1c180a1627fa2b883604051610ab191815260200190565b60405180910390a1505050565b6000546001600160a01b03163314610b065760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600855565b6000546001600160a01b03163314610b535760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff1615610ba05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600c54600154610bbd916001600160a01b039091169083906135e3565b506000600c55565b6000546001600160a01b03163314610c0d5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b60008111610c5d5760405162461bcd60e51b815260206004820152601860248201527f4d7573742073656c6c206d6f7265207468616e207a65726f000000000000000060448201526064016106ed565b60048054600a546040517ff5a4162700000000000000000000000000000000000000000000000000000000815292830184905260248301526001600160a01b03169063f5a4162790604401600060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b505050507fc3085fd698c0021cf2ad330617df928819e049637665217c5e7757452f991d3181604051610d0b91815260200190565b60405180910390a150565b60008054600160a01b900460ff1615610d645760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff16610dcc5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b610dd63383613674565b600254610ded906001600160a01b031633846135e3565b5060015b919050565b6000546001600160a01b03163314610e3e5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff16610e8e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b610e966137d3565b565b60008054600160a01b900460ff1615610ee65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff16610f4e5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b6000610f5933611587565b905082811015610fd15760405162461bcd60e51b815260206004820152602860248201527f557365722068617320636c61696d6564206d6f7265207468616e20686527732060448201527f656e7469746c656400000000000000000000000000000000000000000000000060648201526084016106ed565b6003546040516340c10f1960e01b8152336004820152602481018590526001600160a01b03909116906340c10f1990604401602060405180830381600087803b15801561101d57600080fd5b505af1158015611031573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110559190613ff2565b506110686110638285613870565b6135af565b60408051338152602081018590527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d491015b60405180910390a150600192915050565b60008054600160a01b900460ff16156110f95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff166111615760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156111a457600080fd5b505afa1580156111b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dc919061402d565b10156112345760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420737461626c6520636f696044820152603760f91b60648201526084016106ed565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561127d57600080fd5b505afa158015611291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b5919061402d565b10156113295760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420737461626c6520636f696e00000000000060648201526084016106ed565b60006113348361083a565b9050600081116113ac5760405162461bcd60e51b815260206004820152603a60248201527f54686520616d6f756e74206f6620616c6c6f7978204455524120636f696e207460448201527f6f20676574206973206e6f74206c6172676572207468616e203000000000000060648201526084016106ed565b6004546001546113cb916001600160a01b03918216913391168661387c565b6002546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401602060405180830381600087803b15801561141757600080fd5b505af115801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f9190613ff2565b50600154604080516001600160a01b03909216825233602083015281018290527fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f9060600160405180910390a160408051338152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910161109a565b600080805b60055481101561152f5761151b611514600583815481106114fa576114fa6142a7565b6000918252602090912001546001600160a01b0316611587565b83906138d3565b91508061152781614276565b9150506114d7565b50919050565b6000546001600160a01b0316331461157d5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b610e9660006138df565b604080518082018252600080825260209182018190526001600160a01b0384168152600682528281208351808501909452805484526001015491830191909152906115d18161393c565b6001600160a01b0384166000908152600760205260409020546115f491906140ef565b9392505050565b6000546001600160a01b031633146116435760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600a55565b6000546001600160a01b031633146116905760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff166116e05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561172357600080fd5b505afa158015611737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175b919061402d565b156117a85760405162461bcd60e51b815260206004820181905260248201527f42616c616e6365206f6620737461626c6520636f696e206d757374206265203060448201526064016106ed565b6000546001600160a01b031680ff5b6000546001600160a01b031633146117ff5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff161561184c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b610e96613979565b600080546001600160a01b0316331461189d5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a81b900460ff161561191d5760405162461bcd60e51b815260206004820152602a60248201527f5661756c742068617320616c726561647920737461727420616363657074696e60448201527f67206465706f736974730000000000000000000000000000000000000000000060648201526084016106ed565b6000611927613036565b90506000811161199f5760405162461bcd60e51b815260206004820152602b60248201527f5661756c74206d757374206861766520706f7369746976652076616c7565206260448201527f65666f726520737461727400000000000000000000000000000000000000000060648201526084016106ed565b6002546001600160a01b03166340c10f19306119ce6119bc613a01565b6108df6119c7613a0f565b87906135cb565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015611a1457600080fd5b505af1158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c9190613ff2565b5050600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b17905550600190565b6000546001600160a01b03163314611aca5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b60008111611b1a5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f000000000060448201526064016106ed565b600480546040517f8f2da01d0000000000000000000000000000000000000000000000000000000081529182018390526001600160a01b031690638f2da01d90602401600060405180830381600087803b158015611b7757600080fd5b505af1158015611b8b573d6000803e3d6000fd5b505050507fd483110686f79d1f5932d32add1024998649ddca927700b75bea458b4cb7cde681604051610d0b91815260200190565b6000546001600160a01b03163314611c085760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600955565b6000546001600160a01b03163314611c555760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600480546040517fe1f21c670000000000000000000000000000000000000000000000000000000081526001600160a01b038681169382019390935284831660248201526044810184905291169063e1f21c6790606401600060405180830381600087803b158015611cc657600080fd5b505af1158015611cda573d6000803e3d6000fd5b50505050505050565b60008054600160a01b900460ff1615611d315760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff16611d995760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b611da33383613a1d565b600254610ded906001600160a01b031633308561387c565b60008054600160a01b900460ff1615611e095760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff16611e715760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b6003546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015611eb457600080fd5b505afa158015611ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eec919061402d565b1015611f605760405162461bcd60e51b815260206004820152603d60248201527f42616c616e6365206f662063726f776e20636f696e206d757374206265206c6160448201527f72676572207468616e2074686520616d6f756e7420746f20636c61696d00000060648201526084016106ed565b6004546001600160a01b031663d848b0583384611f7b6131df565b600b546040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301526064820152608401600060405180830381600087803b158015611fd157600080fd5b505af1158015611fe5573d6000803e3d6000fd5b5050600354604051632770a7eb60e21b8152336004820152602481018690526001600160a01b039091169250639dc29fac9150604401602060405180830381600087803b15801561203557600080fd5b505af1158015612049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206d9190613ff2565b5060408051338152602081018490527f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc9910160405180910390a1506001919050565b60008054600160a01b900460ff16156120fd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff166121655760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b600480546040517fe7e808e60000000000000000000000000000000000000000000000000000000081526001600160a01b0386811693820193909352336024820152604481018590526000929091169063e7e808e690606401602060405180830381600087803b1580156121d857600080fd5b505af11580156121ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612210919061402d565b600480546040517f42842e0e00000000000000000000000000000000000000000000000000000000815233928101929092526001600160a01b03908116602483015260448201869052919250908516906342842e0e90606401600060405180830381600087803b15801561228357600080fd5b505af1158015612297573d6000803e3d6000fd5b5050600480546040517f196b54430000000000000000000000000000000000000000000000000000000081523392810192909252602482018590526001600160a01b0316925063196b54439150604401600060405180830381600087803b15801561230157600080fd5b505af1158015612315573d6000803e3d6000fd5b5050604080516001600160a01b03881681523360208201529081018690527fc7e8b1bdbecdc8a549557efb2a2ab715cff51630caead31610000019e61dfa4b9250606001905060405180910390a160019150505b92915050565b6000546001600160a01b031633146123b75760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008054600160a01b900460ff16156124345760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff1661249c5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b6002546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156124df57600080fd5b505afa1580156124f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612517919061402d565b101561256f5760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420616c6c6f797820636f696044820152603760f91b60648201526084016106ed565b600254604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b1580156125b857600080fd5b505afa1580156125cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f0919061402d565b10156126645760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420616c6c6f797820636f696e00000000000060648201526084016106ed565b600061266f83613277565b9050600061268d60646108df600954856135cb90919063ffffffff16565b9050600082116127055760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e2030000000000000000000000060648201526084016106ed565b6001546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561274857600080fd5b505afa15801561275c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612780919061402d565b10156127f45760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e00000000000000000000000000000000000060648201526084016106ed565b600254604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401602060405180830381600087803b15801561284057600080fd5b505af1158015612854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128789190613ff2565b5061289a336128878484613870565b6001546001600160a01b031691906135e3565b600c546128a790826138d3565b600c55600254604080516001600160a01b03909216825233602083015281018590527f53fee901a59b4d2e659e450f8db17fc345e158fe408d2b39faf66d1f8c4a54fe9060600160405180910390a160408051338152602081018690527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5910160405180910390a15060019392505050565b6000546001600160a01b031633146129815760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600b55565b60008054600160a01b900460ff16156129d45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b600054600160a81b900460ff16612a3c5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b60648201526084016106ed565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015612a7f57600080fd5b505afa158015612a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab7919061402d565b1015612b0f5760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420737461626c6520636f696044820152603760f91b60648201526084016106ed565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015612b5857600080fd5b505afa158015612b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b90919061402d565b1015612c045760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420737461626c6520636f696e00000000000060648201526084016106ed565b6000612c0f8361083a565b905060008111612c875760405162461bcd60e51b815260206004820152603a60248201527f54686520616d6f756e74206f6620616c6c6f7978204455524120636f696e207460448201527f6f20676574206973206e6f74206c6172676572207468616e203000000000000060648201526084016106ed565b600154612c9f906001600160a01b031633308661387c565b6002546040516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f1990604401602060405180830381600087803b158015612ceb57600080fd5b505af1158015612cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d239190613ff2565b50612d2e3382613a1d565b600154604080516001600160a01b03909216825233602083015281018290527fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f9060600160405180910390a160408051308152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910161109a565b6000546001600160a01b03163314612df85760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff16612e485760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b60025460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b158015612e8f57600080fd5b505af1158015612ea3573d6000803e3d6000fd5b505060035460405163f2fde38b60e01b81526001600160a01b038581166004830152909116925063f2fde38b9150602401600060405180830381600087803b158015612eee57600080fd5b505af1158015612f02573d6000803e3d6000fd5b5050505050565b6000546001600160a01b03163314612f515760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b600054600160a01b900460ff16612fa15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b158015612fe357600080fd5b505afa158015612ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301b919061402d565b90506130316001600160a01b03841683836135e3565b505050565b6000806130d0600460009054906101000a90046001600160a01b03166001600160a01b031663531d7dec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561308a57600080fd5b505afa15801561309e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130c2919061402d565b6130ca613a94565b906138d3565b9050600c54811161316f5760405162461bcd60e51b815260206004820152604a60248201527f7468652076616c7565206f66207661756c74206973206e6f74206c617267657260448201527f207468616e20726564656d7074696f6e206665652c20736f6d657468696e672060648201527f77656e742077726f6e6700000000000000000000000000000000000000000000608482015260a4016106ed565b600c5460048054604080517f531d7dec00000000000000000000000000000000000000000000000000000000815290516131d994936131d3936001600160a01b03169263531d7dec9281830192602092829003018186803b15801561308a57600080fd5b90613870565b91505090565b6000613272600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561323257600080fd5b505afa158015613246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326a919061402d565b6130ca6114d2565b905090565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132c857600080fd5b505afa1580156132dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613300919061402d565b9050600061330c613036565b90506108e5826108df86846135cb565b60008060005b60055481101561337b576005818154811061333f5761333f6142a7565b6000918252602090912001546001600160a01b038581169116141561336957600194909350915050565b6133746001826140ef565b9050613322565b50600093849350915050565b6000546001600160a01b031633146133cf5760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b6000821161341f5760405162461bcd60e51b815260206004820152601860248201527f4d7573742073656c6c206d6f7265207468616e207a65726f000000000000000060448201526064016106ed565b60048054600a546040517f93af90a9000000000000000000000000000000000000000000000000000000008152928301869052602483018590526001600160a01b038481166044850152606484019190915216906393af90a990608401600060405180830381600087803b15801561349657600080fd5b505af11580156134aa573d6000803e3d6000fd5b505050507fc3085fd698c0021cf2ad330617df928819e049637665217c5e7757452f991d3182604051610ab191815260200190565b6000546001600160a01b031633146135275760405162461bcd60e51b815260206004820181905260248201526000805160206142d483398151915260448201526064016106ed565b6001600160a01b0381166135a35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106ed565b6135ac816138df565b50565b6135b96000613b10565b33600090815260076020526040902055565b60006115f48284614214565b60006115f48284614107565b6040516001600160a01b0383166024820152604481018290526130319084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613b77565b604080518082018252600080825260209182018190526001600160a01b038516815260068252829020825180840190935280548352600101549082015281905110156137285760405162461bcd60e51b815260206004820152602660248201527f557365722068617320696e73756666696369656e74206475726120636f696e2060448201527f7374616b6564000000000000000000000000000000000000000000000000000060648201526084016106ed565b6001600160a01b03821660009081526006602052604090205461374e5761374e82613c5c565b6001600160a01b0382166000908152600660205260409020613771908390613ccc565b6040805180820182526001600160a01b038416600090815260066020529190912054819061379f9084613870565b8152426020918201526001600160a01b03909316600090815260068452604090208151815592015160019092019190915550565b600054600160a01b900460ff166138235760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ed565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006115f48284614233565b6040516001600160a01b03808516602483015283166044820152606481018290526138cd9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401613628565b50505050565b60006115f482846140ef565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006123696301e133806108df60646108df60085461397361396b89602001514261387090919063ffffffff16565b8951906135cb565b906135cb565b600054600160a01b900460ff16156139c65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ed565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586138533390565b60006132726006600a61416c565b60006132726012600a61416c565b6001600160a01b038216600090815260066020526040902054613a4357613a4382613c5c565b6001600160a01b0382166000908152600660205260409020613a66908390613ccc565b6040805180820182526001600160a01b038416600090815260066020529190912054819061379f90846138d3565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015613ad857600080fd5b505afa158015613aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613272919061402d565b33600090815260066020526040902054613b2d57613b2d33613c5c565b336000818152600660205260409020613b469190613ccc565b6040805180820182529182524260208084019182523360009081526006909152919091209151825551600190910155565b6000613bcc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d379092919063ffffffff16565b8051909150156130315780806020019051810190613bea9190613ff2565b6130315760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106ed565b6000613c678261331c565b50905080613cc857600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555b5050565b604080518082019091528154815260018201546020820152600090613cf09061393c565b6001600160a01b038416600090815260076020526040902054909150613d1690826138d3565b6001600160a01b039093166000908152600760205260409020929092555050565b60606108e58484600085856001600160a01b0385163b613d995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106ed565b600080866001600160a01b03168587604051613db591906140a0565b60006040518083038185875af1925050503d8060008114613df2576040519150601f19603f3d011682016040523d82523d6000602084013e613df7565b606091505b5091509150613e07828286613e12565b979650505050505050565b60608315613e215750816115f4565b825115613e315782518084602001fd5b8160405162461bcd60e51b81526004016106ed91906140bc565b80356001600160a01b0381168114610df157600080fd5b600060208284031215613e7457600080fd5b6115f482613e4b565b60008060408385031215613e9057600080fd5b613e9983613e4b565b9150613ea760208401613e4b565b90509250929050565b600080600060608486031215613ec557600080fd5b613ece84613e4b565b9250613edc60208501613e4b565b9150604084013590509250925092565b60008060008060808587031215613f0257600080fd5b613f0b85613e4b565b9350613f1960208601613e4b565b925060408501359150606085013567ffffffffffffffff80821115613f3d57600080fd5b818701915087601f830112613f5157600080fd5b813581811115613f6357613f636142bd565b604051601f8201601f19908116603f01168101908382118183101715613f8b57613f8b6142bd565b816040528281528a6020848701011115613fa457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215613fdb57600080fd5b613fe483613e4b565b946020939093013593505050565b60006020828403121561400457600080fd5b815180151581146115f457600080fd5b60006020828403121561402657600080fd5b5035919050565b60006020828403121561403f57600080fd5b5051919050565b60008060006060848603121561405b57600080fd5b83359250613edc60208501613e4b565b60008060006060848603121561408057600080fd5b833592506020840135915061409760408501613e4b565b90509250925092565b600082516140b281846020870161424a565b9190910192915050565b60208152600082518060208401526140db81604085016020870161424a565b601f01601f19169190910160400192915050565b6000821982111561410257614102614291565b500190565b60008261412457634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561416457816000190482111561414a5761414a614291565b8085161561415757918102915b93841c939080029061412e565b509250929050565b60006115f4838360008261418257506001612369565b8161418f57506000612369565b81600181146141a557600281146141af576141cb565b6001915050612369565b60ff8411156141c0576141c0614291565b50506001821b612369565b5060208310610133831016604e8410600b84101617156141ee575081810a612369565b6141f88383614129565b806000190482111561420c5761420c614291565b029392505050565b600081600019048311821515161561422e5761422e614291565b500290565b60008282101561424557614245614291565b500390565b60005b8381101561426557818101518382015260200161424d565b838111156138cd5750506000910152565b600060001982141561428a5761428a614291565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122089246aac15a8f38c6719252eda68c85400bb8078aaecfc4e6cdc2dd88fde37ca64736f6c63430008070033",
  "devdoc": {
    "author": "AlloyX",
    "kind": "dev",
    "methods": {
      "alloyxDURAToUSDC(uint256)": {
        "params": {
          "_amount": "the amount of DURA token to convert to usdc"
        }
      },
      "approveDelegacy(address,address,uint256)": {
        "params": {
          "_account": "the account the delegacy going to approve",
          "_amount": "the amount the delegacy going to approve",
          "_tokenAddress": "the leftover reward the staker owns"
        }
      },
      "changeAlloyxDURAAddress(address)": {
        "params": {
          "_alloyxAddress": "the address to change to"
        }
      },
      "claimAlloyxCRWN(uint256)": {
        "params": {
          "_amount": "the amount to claim"
        }
      },
      "claimReward(uint256)": {
        "params": {
          "_amount": "the amount to claim"
        }
      },
      "claimableCRWNToken(address)": {
        "params": {
          "_receiver": "the address of receiver"
        }
      },
      "depositAlloyxDURATokens(uint256)": {
        "params": {
          "_tokenAmount": "Number of Alloy Tokens"
        }
      },
      "depositNFTToken(address,uint256)": {
        "params": {
          "_tokenAddress": "NFT Address",
          "_tokenID": "NFT ID"
        }
      },
      "depositUSDCCoin(uint256)": {
        "params": {
          "_tokenAmount": "Number of stable coin"
        }
      },
      "depositUSDCCoinWithStake(uint256)": {
        "params": {
          "_tokenAmount": "Number of stable coin"
        }
      },
      "isStakeholder(address)": {
        "params": {
          "_address": "The address to verify."
        },
        "returns": {
          "_0": "bool, uint256 Whether the address is a stakeholder, and if so its position in the stakeholders array."
        }
      },
      "migrateERC20(address,address)": {
        "params": {
          "_to": "the address to transfer tokens to",
          "_tokenAddress": "the token address to migrate"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "purchaseJuniorToken(uint256,address,uint256)": {
        "params": {
          "_amount": "the amount of usdc to purchase by",
          "_poolAddress": "the pool address to buy from",
          "_tranche": "the tranch id"
        }
      },
      "purchaseSeniorTokens(uint256)": {
        "params": {
          "_amount": "the amount of usdc to purchase by"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sellJuniorToken(uint256,uint256,address)": {
        "params": {
          "_amount": "the amount to withdraw",
          "_poolAddress": "the pool address to withdraw from",
          "_tokenId": "the ID of token to sell"
        }
      },
      "sellSeniorTokens(uint256)": {
        "params": {
          "_amount": "the amount of fidu to sell"
        }
      },
      "setPercentageCRWNEarning(uint256)": {
        "params": {
          "_percentageCRWNEarning": "the earning fee for redeeming CRWN token in percentage in terms of gfi"
        }
      },
      "setPercentageDURARedemption(uint256)": {
        "params": {
          "_percentageDURARedemption": "the redemption fee for DURA token in percentage"
        }
      },
      "setPercentageDURARepayment(uint256)": {
        "params": {
          "_percentageDURARepayment": "the repayment fee for DURA token in percentage"
        }
      },
      "setPercentageRewardPerYear(uint256)": {
        "params": {
          "_percentageRewardPerYear": "the reward per year in percentage"
        }
      },
      "stake(uint256)": {
        "params": {
          "_amount": "the amount the message sender intending to stake in"
        }
      },
      "stakeOf(address)": {
        "params": {
          "_stakeholder": "The stakeholder to retrieve the stake for."
        },
        "returns": {
          "_0": "Stake The amount staked and the time since when it's staked."
        }
      },
      "transferAlloyxOwnership(address)": {
        "params": {
          "_to": "the address to transfer ownership to"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferRedemptionFee(address)": {
        "params": {
          "_to": "the address to transfer to"
        }
      },
      "unstake(uint256)": {
        "params": {
          "_amount": "the amount the message sender intending to unstake"
        }
      },
      "usdcToAlloyxDURA(uint256)": {
        "params": {
          "_amount": "the amount of usdc to convert to DURA token"
        }
      }
    },
    "title": "AlloyX Vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "alloyxDURAToUSDC(uint256)": {
        "notice": "Convert Alloyx DURA to USDC amount"
      },
      "approveDelegacy(address,address,uint256)": {
        "notice": "Request the delegacy to approve certain tokens on certain account for certain amount, it is most used for buying the goldfinch tokens, they need to be able to transfer usdc to them"
      },
      "changeAlloyxDURAAddress(address)": {
        "notice": "Change DURA token address"
      },
      "claimAllAlloyxCRWN()": {
        "notice": "Claim all alloy CRWN tokens of the message sender, the method will mint the CRWN token of the claimable amount to message sender, and clear the past rewards to zero"
      },
      "claimAlloyxCRWN(uint256)": {
        "notice": "Claim certain amount of alloy CRWN tokens of the message sender, the method will mint the CRWN token of the claimable amount to message sender, and clear the past rewards to the remainder"
      },
      "claimReward(uint256)": {
        "notice": "Claim certain amount of reward token based on alloy CRWN token, the method will burn the CRWN token of the amount of message sender, and transfer reward token to message sender"
      },
      "claimableCRWNToken(address)": {
        "notice": "Claimable CRWN token amount of an address"
      },
      "depositAlloyxDURATokens(uint256)": {
        "notice": "An Alloy token holder can deposit their tokens and redeem them for USDC"
      },
      "depositNFTToken(address,uint256)": {
        "notice": "A Junior token holder can deposit their NFT for stable coin"
      },
      "depositUSDCCoin(uint256)": {
        "notice": "A Liquidity Provider can deposit supported stable coins for Alloy Tokens"
      },
      "depositUSDCCoinWithStake(uint256)": {
        "notice": "A Liquidity Provider can deposit supported stable coins for Alloy Tokens"
      },
      "destroy()": {
        "notice": "Destroy the contract"
      },
      "getAlloyxDURATokenBalanceInUSDC()": {
        "notice": "Alloy DURA Token Value in terms of USDC"
      },
      "isStakeholder(address)": {
        "notice": "Check if an address is a stakeholder."
      },
      "migrateERC20(address,address)": {
        "notice": "Migrate certain ERC20 to an address"
      },
      "pause()": {
        "notice": "Pause all operations except migration of tokens"
      },
      "purchaseJuniorToken(uint256,address,uint256)": {
        "notice": "Purchase junior token through delegacy to get pooltoken inside the delegacy"
      },
      "purchaseSeniorTokens(uint256)": {
        "notice": "Purchase senior token through delegacy to get fidu inside the delegacy"
      },
      "sellJuniorToken(uint256,uint256,address)": {
        "notice": "Sell junior token through delegacy to get repayments"
      },
      "sellSeniorTokens(uint256)": {
        "notice": "Sell senior token through delegacy to redeem fidu"
      },
      "setPercentageCRWNEarning(uint256)": {
        "notice": "Set percentageCRWNEarning which is the earning fee for redeeming CRWN token in percentage in terms of gfi"
      },
      "setPercentageDURARedemption(uint256)": {
        "notice": "Set percentageDURARedemption which is the redemption fee for DURA token in percentage"
      },
      "setPercentageDURARepayment(uint256)": {
        "notice": "Set percentageDURARepayment which is the repayment fee for DURA token in percentage"
      },
      "setPercentageRewardPerYear(uint256)": {
        "notice": "Set percentageRewardPerYear which is the reward per year in percentage"
      },
      "stake(uint256)": {
        "notice": "Stake more into the vault, which will cause the user's DURA token to transfer to vault"
      },
      "stakeOf(address)": {
        "notice": "Retrieve the stake for a stakeholder."
      },
      "startVaultOperation()": {
        "notice": "Initialize by minting the alloy brown tokens to owner"
      },
      "totalClaimableAndClaimedCRWNToken()": {
        "notice": "Total claimable and claimed CRWN tokens of all stakeholders"
      },
      "totalClaimableCRWNToken()": {
        "notice": "Total claimable CRWN tokens of all stakeholders"
      },
      "transferAlloyxOwnership(address)": {
        "notice": "Transfer the ownership of alloy CRWN and DURA token contract to some other address"
      },
      "transferRedemptionFee(address)": {
        "notice": "Transfer redemption fee to some other address"
      },
      "unpause()": {
        "notice": "Unpause all operations"
      },
      "unstake(uint256)": {
        "notice": "Unstake some from the vault, which will cause the vault to transfer DURA token back to message sender"
      },
      "usdcToAlloyxDURA(uint256)": {
        "notice": "Convert USDC Amount to Alloyx DURA"
      }
    },
    "notice": "Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch and emits AlloyTokens when a liquidity provider deposits supported stable coins.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2183,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2298,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13247,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "vaultStarted",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13250,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "usdcCoin",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 13253,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "alloyxTokenDURA",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AlloyxTokenDURA)5994"
      },
      {
        "astId": 13256,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "alloyxTokenCRWN",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AlloyxTokenCRWN)5931"
      },
      {
        "astId": 13259,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "goldfinchDelegacy",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IGoldfinchDelegacy)7336"
      },
      {
        "astId": 13262,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "stakeholders",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13267,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "stakesMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(StakeInfo)13245_storage)"
      },
      {
        "astId": 13271,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "pastRedeemableReward",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13274,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "percentageRewardPerYear",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 13277,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "percentageDURARedemption",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 13280,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "percentageDURARepayment",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 13283,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "percentageCRWNEarning",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 13286,
        "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
        "label": "redemptionFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AlloyxTokenCRWN)5931": {
        "encoding": "inplace",
        "label": "contract AlloyxTokenCRWN",
        "numberOfBytes": "20"
      },
      "t_contract(AlloyxTokenDURA)5994": {
        "encoding": "inplace",
        "label": "contract AlloyxTokenDURA",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3038": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGoldfinchDelegacy)7336": {
        "encoding": "inplace",
        "label": "contract IGoldfinchDelegacy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(StakeInfo)13245_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AlloyxVaultV4_0.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)13245_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(StakeInfo)13245_storage": {
        "encoding": "inplace",
        "label": "struct AlloyxVaultV4_0.StakeInfo",
        "members": [
          {
            "astId": 13242,
            "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13244,
            "contract": "contracts/alloyx/v4.0/AlloyxVaultV4.0.sol:AlloyxVaultV4_0",
            "label": "since",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
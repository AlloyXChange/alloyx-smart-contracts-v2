{
  "address": "0xeEa0601102378c6bD95df9E53363497496d35f19",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tranch",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "addTranch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "k",
          "type": "uint256"
        }
      ],
      "name": "getTop",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tranch",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "increaseScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tranch",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "reduceScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tranch",
          "type": "address"
        }
      ],
      "name": "removeTranch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "scores",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tranch",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newScore",
          "type": "uint256"
        }
      ],
      "name": "updateScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x78c0225ecc35ca7df3b2d123d6d3ee362c42361bf646626ad40daf2803c5f810",
  "receipt": {
    "to": null,
    "from": "0xd988EB2777ec4d844ced75f68148A08310bEFc76",
    "contractAddress": "0xeEa0601102378c6bD95df9E53363497496d35f19",
    "transactionIndex": 0,
    "gasUsed": "605667",
    "logsBloom": "0x
    "blockHash": "0xf93eb7660a7aca34d11cd069c07378ae983054b202495abae5eda3dff3df5f6b",
    "transactionHash": "0x78c0225ecc35ca7df3b2d123d6d3ee362c42361bf646626ad40daf2803c5f810",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32324865,
        "transactionHash": "0x78c0225ecc35ca7df3b2d123d6d3ee362c42361bf646626ad40daf2803c5f810",
        "address": "0xeEa0601102378c6bD95df9E53363497496d35f19",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d988eb2777ec4d844ced75f68148a08310befc76"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf93eb7660a7aca34d11cd069c07378ae983054b202495abae5eda3dff3df5f6b"
      }
    ],
    "blockNumber": 32324865,
    "cumulativeGasUsed": "605667",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "38472ce1e4577c192ec978c81f70b057",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tranch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"addTranch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"}],\"name\":\"getTop\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tranch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"increaseScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tranch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"reduceScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tranch\",\"type\":\"address\"}],\"name\":\"removeTranch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"scores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tranch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newScore\",\"type\":\"uint256\"}],\"name\":\"updateScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alloyx/SortedGoldfinchTranches.sol\":\"SortedGoldfinchTranches\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/alloyx/SortedGoldfinchTranches.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SortedGoldfinchTranches is Ownable {\\n  mapping(address => uint256) public scores;\\n  mapping(address => address) _nextTranches;\\n  uint256 public listSize;\\n  address constant GUARD = address(1);\\n\\n  constructor() public {\\n    _nextTranches[GUARD] = GUARD;\\n  }\\n\\n  function addTranch(address tranch, uint256 score) public {\\n    require(_nextTranches[tranch] == address(0));\\n    address index = _findIndex(score);\\n    scores[tranch] = score;\\n    _nextTranches[tranch] = _nextTranches[index];\\n    _nextTranches[index] = tranch;\\n    listSize++;\\n  }\\n\\n  function increaseScore(address tranch, uint256 score) public {\\n    updateScore(tranch, scores[tranch] + score);\\n  }\\n\\n  function reduceScore(address tranch, uint256 score) public {\\n    updateScore(tranch, scores[tranch] - score);\\n  }\\n\\n  function updateScore(address tranch, uint256 newScore) public {\\n    require(_nextTranches[tranch] != address(0));\\n    address prevTranch = _findPrevTranch(tranch);\\n    address nextTranch = _nextTranches[tranch];\\n    if (_verifyIndex(prevTranch, newScore, nextTranch)) {\\n      scores[tranch] = newScore;\\n    } else {\\n      removeTranch(tranch);\\n      addTranch(tranch, newScore);\\n    }\\n  }\\n\\n  function removeTranch(address tranch) public {\\n    require(_nextTranches[tranch] != address(0));\\n    address prevTranch = _findPrevTranch(tranch);\\n    _nextTranches[prevTranch] = _nextTranches[tranch];\\n    _nextTranches[tranch] = address(0);\\n    scores[tranch] = 0;\\n    listSize--;\\n  }\\n\\n  function getTop(uint256 k) public view returns (address[] memory) {\\n    require(k <= listSize);\\n    address[] memory tranchLists = new address[](k);\\n    address currentAddress = _nextTranches[GUARD];\\n    for (uint256 i = 0; i < k; ++i) {\\n      tranchLists[i] = currentAddress;\\n      currentAddress = _nextTranches[currentAddress];\\n    }\\n    return tranchLists;\\n  }\\n\\n  function _verifyIndex(\\n    address prevTranch,\\n    uint256 newValue,\\n    address nextTranch\\n  ) internal view returns (bool) {\\n    return\\n      (prevTranch == GUARD || scores[prevTranch] >= newValue) &&\\n      (nextTranch == GUARD || newValue > scores[nextTranch]);\\n  }\\n\\n  function _findIndex(uint256 newValue) internal view returns (address) {\\n    address candidateAddress = GUARD;\\n    while (true) {\\n      if (_verifyIndex(candidateAddress, newValue, _nextTranches[candidateAddress]))\\n        return candidateAddress;\\n      candidateAddress = _nextTranches[candidateAddress];\\n    }\\n    return address(0);\\n  }\\n\\n  function _isPrevTranch(address tranch, address prevTranch) internal view returns (bool) {\\n    return _nextTranches[prevTranch] == tranch;\\n  }\\n\\n  function _findPrevTranch(address tranch) internal view returns (address) {\\n    address currentAddress = GUARD;\\n    while (_nextTranches[currentAddress] != GUARD) {\\n      if (_isPrevTranch(tranch, currentAddress)) return currentAddress;\\n      currentAddress = _nextTranches[currentAddress];\\n    }\\n    return address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x04b7375754f051065c80b446176522c540a99feeb5a37bf4b957f4fa9e49243a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361005d565b6001600081905260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e080546001600160a01b03191690911790556100ad565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61091f806100bc6000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806337caa8b61461009e57806365d97724146100c7578063715018a6146100dc57806376dd110f146100e45780638da5cb5b14610112578063972c535614610132578063a1895ae11461013b578063cc7638291461014e578063d3ec35b714610161578063dd23b83114610174578063f2fde38b14610187575b600080fd5b6100b16100ac3660046107ab565b61019a565b6040516100be91906107c4565b60405180910390f35b6100da6100d5366004610781565b610292565b005b6100da610328565b6101046100f236600461075f565b60016020526000908152604090205481565b6040519081526020016100be565b61011a61036c565b6040516001600160a01b0390911681526020016100be565b61010460035481565b6100da610149366004610781565b61037b565b6100da61015c366004610781565b61041d565b6100da61016f366004610781565b61044b565b6100da61018236600461075f565b610475565b6100da61019536600461075f565b610510565b60606003548211156101ab57600080fd5b6000826001600160401b038111156101c5576101c56108d3565b6040519080825280602002602001820160405280156101ee578160200160208202803683370190505b506001600090815260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0549192506001600160a01b03909116905b848110156102895781838281518110610248576102486108bd565b6001600160a01b0392831660209182029290920181019190915292811660009081526002909352604090922054909116906102828161088c565b905061022d565b50909392505050565b6001600160a01b03828116600090815260026020526040902054166102b657600080fd5b60006102c1836105b0565b6001600160a01b03808516600090815260026020526040902054919250166102ea82848361062b565b1561030f576001600160a01b0384166000908152600160205260409020839055610322565b61031884610475565b610322848461037b565b50505050565b3361033161036c565b6001600160a01b0316146103605760405162461bcd60e51b815260040161035790610811565b60405180910390fd5b61036a600061069b565b565b6000546001600160a01b031690565b6001600160a01b0382811660009081526002602052604090205416156103a057600080fd5b60006103ab826106eb565b6001600160a01b038481166000818152600160209081526040808320889055858516808452600290925280832080548585529184208054929096166001600160a01b03199283161790955590825283541690911790915560038054929350906104138361088c565b9190505550505050565b6001600160a01b0382166000908152600160205260409020546104479083906100d590849061085e565b5050565b6001600160a01b0382166000908152600160205260409020546104479083906100d5908490610846565b6001600160a01b038181166000908152600260205260409020541661049957600080fd5b60006104a4826105b0565b6001600160a01b038381166000818152600260209081526040808320805487871685528285208054919097166001600160a01b03199182161790965593835283549094169092556001909152908120819055600380549293509061050783610875565b91905055505050565b3361051961036c565b6001600160a01b03161461053f5760405162461bcd60e51b815260040161035790610811565b6001600160a01b0381166105a45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610357565b6105ad8161069b565b50565b600060015b6001600160a01b0381811660009081526002602052604090205416600114610622576001600160a01b03808216600090815260026020526040902054811690841614156106025792915050565b6001600160a01b03908116600090815260026020526040902054166105b5565b50600092915050565b60006001600160a01b0384166001148061065d57506001600160a01b0384166000908152600160205260409020548311155b801561069357506001600160a01b0382166001148061069357506001600160a01b03821660009081526001602052604090205483115b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060015b6001600160a01b0380821660009081526002602052604090205461071891839186911661062b565b156107235792915050565b6001600160a01b03908116600090815260026020526040902054166106f0565b80356001600160a01b038116811461075a57600080fd5b919050565b60006020828403121561077157600080fd5b61077a82610743565b9392505050565b6000806040838503121561079457600080fd5b61079d83610743565b946020939093013593505050565b6000602082840312156107bd57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156108055783516001600160a01b0316835292840192918401916001016107e0565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610859576108596108a7565b500190565b600082821015610870576108706108a7565b500390565b600081610884576108846108a7565b506000190190565b60006000198214156108a0576108a06108a7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220152338dba1ae9d31f2f47d8681887ba8bd2fbabc30ac4367ac64ca8e8e71270164736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100995760003560e01c806337caa8b61461009e57806365d97724146100c7578063715018a6146100dc57806376dd110f146100e45780638da5cb5b14610112578063972c535614610132578063a1895ae11461013b578063cc7638291461014e578063d3ec35b714610161578063dd23b83114610174578063f2fde38b14610187575b600080fd5b6100b16100ac3660046107ab565b61019a565b6040516100be91906107c4565b60405180910390f35b6100da6100d5366004610781565b610292565b005b6100da610328565b6101046100f236600461075f565b60016020526000908152604090205481565b6040519081526020016100be565b61011a61036c565b6040516001600160a01b0390911681526020016100be565b61010460035481565b6100da610149366004610781565b61037b565b6100da61015c366004610781565b61041d565b6100da61016f366004610781565b61044b565b6100da61018236600461075f565b610475565b6100da61019536600461075f565b610510565b60606003548211156101ab57600080fd5b6000826001600160401b038111156101c5576101c56108d3565b6040519080825280602002602001820160405280156101ee578160200160208202803683370190505b506001600090815260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0549192506001600160a01b03909116905b848110156102895781838281518110610248576102486108bd565b6001600160a01b0392831660209182029290920181019190915292811660009081526002909352604090922054909116906102828161088c565b905061022d565b50909392505050565b6001600160a01b03828116600090815260026020526040902054166102b657600080fd5b60006102c1836105b0565b6001600160a01b03808516600090815260026020526040902054919250166102ea82848361062b565b1561030f576001600160a01b0384166000908152600160205260409020839055610322565b61031884610475565b610322848461037b565b50505050565b3361033161036c565b6001600160a01b0316146103605760405162461bcd60e51b815260040161035790610811565b60405180910390fd5b61036a600061069b565b565b6000546001600160a01b031690565b6001600160a01b0382811660009081526002602052604090205416156103a057600080fd5b60006103ab826106eb565b6001600160a01b038481166000818152600160209081526040808320889055858516808452600290925280832080548585529184208054929096166001600160a01b03199283161790955590825283541690911790915560038054929350906104138361088c565b9190505550505050565b6001600160a01b0382166000908152600160205260409020546104479083906100d590849061085e565b5050565b6001600160a01b0382166000908152600160205260409020546104479083906100d5908490610846565b6001600160a01b038181166000908152600260205260409020541661049957600080fd5b60006104a4826105b0565b6001600160a01b038381166000818152600260209081526040808320805487871685528285208054919097166001600160a01b03199182161790965593835283549094169092556001909152908120819055600380549293509061050783610875565b91905055505050565b3361051961036c565b6001600160a01b03161461053f5760405162461bcd60e51b815260040161035790610811565b6001600160a01b0381166105a45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610357565b6105ad8161069b565b50565b600060015b6001600160a01b0381811660009081526002602052604090205416600114610622576001600160a01b03808216600090815260026020526040902054811690841614156106025792915050565b6001600160a01b03908116600090815260026020526040902054166105b5565b50600092915050565b60006001600160a01b0384166001148061065d57506001600160a01b0384166000908152600160205260409020548311155b801561069357506001600160a01b0382166001148061069357506001600160a01b03821660009081526001602052604090205483115b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060015b6001600160a01b0380821660009081526002602052604090205461071891839186911661062b565b156107235792915050565b6001600160a01b03908116600090815260026020526040902054166106f0565b80356001600160a01b038116811461075a57600080fd5b919050565b60006020828403121561077157600080fd5b61077a82610743565b9392505050565b6000806040838503121561079457600080fd5b61079d83610743565b946020939093013593505050565b6000602082840312156107bd57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156108055783516001600160a01b0316835292840192918401916001016107e0565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610859576108596108a7565b500190565b600082821015610870576108706108a7565b500390565b600081610884576108846108a7565b506000190190565b60006000198214156108a0576108a06108a7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220152338dba1ae9d31f2f47d8681887ba8bd2fbabc30ac4367ac64ca8e8e71270164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1672,
        "contract": "contracts/alloyx/SortedGoldfinchTranches.sol:SortedGoldfinchTranches",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11122,
        "contract": "contracts/alloyx/SortedGoldfinchTranches.sol:SortedGoldfinchTranches",
        "label": "scores",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11126,
        "contract": "contracts/alloyx/SortedGoldfinchTranches.sol:SortedGoldfinchTranches",
        "label": "_nextTranches",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11128,
        "contract": "contracts/alloyx/SortedGoldfinchTranches.sol:SortedGoldfinchTranches",
        "label": "listSize",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
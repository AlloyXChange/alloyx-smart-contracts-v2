{
  "language": "Solidity",
  "sources": {
    "contracts/alloyx/AdminUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\n/**\n * @title AdminUpgradeable\n * @notice Base class for all the contracts which need convenience methods to operate admin rights\n * @author AlloyX\n */\nabstract contract AdminUpgradeable is AccessControlUpgradeable {\n  function __AdminUpgradeable_init(address deployer) internal onlyInitializing {\n    __AccessControl_init();\n    _setupRole(DEFAULT_ADMIN_ROLE, deployer);\n  }\n\n  modifier onlyAdmin() {\n    require(isAdmin(msg.sender), \"Restricted to admins\");\n    _;\n  }\n\n  function isAdmin(address account) public view returns (bool) {\n    return hasRole(DEFAULT_ADMIN_ROLE, account);\n  }\n\n  function addAdmin(address account) public virtual onlyAdmin {\n    grantRole(DEFAULT_ADMIN_ROLE, account);\n  }\n\n  function renounceAdmin() public virtual {\n    renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/alloyx/StakeDesk.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./interfaces/IMintBurnableERC20.sol\";\nimport \"./ConfigHelper.sol\";\nimport \"./AlloyxConfig.sol\";\nimport \"./AdminUpgradeable.sol\";\n\n/**\n * @title StakeDesk\n * @notice All transactions or statistics related to staking\n * @author AlloyX\n */\ncontract StakeDesk is IStableCoinDesk, AdminUpgradeable {\n  using SafeERC20Upgradeable for IMintBurnableERC20;\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  using SafeMath for uint256;\n\n  AlloyxConfig public config;\n  using ConfigHelper for AlloyxConfig;\n\n  event Reward(address _tokenReceiver, uint256 _tokenAmount);\n  event Claim(address _tokenReceiver, uint256 _tokenAmount);\n  event Stake(address _staker, uint256 _amount);\n  event Unstake(address _unstaker, uint256 _amount);\n  event WithdrawGfiFromPoolTokens(uint256 _tokenID);\n  event AlloyxConfigUpdated(address indexed who, address configAddress);\n\n  function initialize(address _configAddress) public initializer {\n    __AdminUpgradeable_init(msg.sender);\n    config = AlloyxConfig(_configAddress);\n  }\n\n  function updateConfig() external onlyAdmin {\n    config = AlloyxConfig(config.configAddress());\n    emit AlloyxConfigUpdated(msg.sender, address(config));\n  }\n\n  /**\n   * @notice Total claimable and claimed CRWN tokens of all stakeholders\n   */\n  function totalClaimableAndClaimedCRWNToken() public view returns (uint256) {\n    return\n      config.getAlloyxStakeInfo().totalClaimableCRWNToken().add(config.getCRWN().totalSupply());\n  }\n\n  /**\n   * @notice Stake more into the vault, which will cause the user's DURA token to transfer to vault\n   * @param _amount the amount the message sender intending to stake in\n   */\n  function stake(uint256 _amount) external {\n    config.getAlloyxStakeInfo().addStake(msg.sender, _amount);\n    config.getDURA().safeTransferFrom(msg.sender, config.treasuryAddress(), _amount);\n    emit Stake(msg.sender, _amount);\n  }\n\n  /**\n   * @notice Unstake some from the vault, which will cause the vault to transfer DURA token back to message sender\n   * @param _amount the amount the message sender intending to unstake\n   */\n  function unstake(uint256 _amount) external {\n    config.getAlloyxStakeInfo().removeStake(msg.sender, _amount);\n    config.getTreasury().transferERC20(config.duraAddress(), msg.sender, _amount);\n    emit Unstake(msg.sender, _amount);\n  }\n\n  /**\n   * @notice Claim all alloy CRWN tokens of the message sender, the method will mint the CRWN token of the claimable\n   * amount to message sender, and clear the past rewards to zero\n   */\n  function claimAllAlloyxCRWN() external returns (bool) {\n    uint256 reward = config.getAlloyxStakeInfo().claimableCRWNToken(msg.sender);\n    config.getCRWN().mint(msg.sender, reward);\n    config.getAlloyxStakeInfo().resetStakeTimestampWithRewardLeft(msg.sender, 0);\n    emit Claim(msg.sender, reward);\n    return true;\n  }\n\n  /**\n   * @notice Claim certain amount of alloy CRWN tokens of the message sender, the method will mint the CRWN token of\n   * the claimable amount to message sender, and clear the past rewards to the remainder\n   * @param _amount the amount to claim\n   */\n  function claimAlloyxCRWN(uint256 _amount) external returns (bool) {\n    uint256 allReward = config.getAlloyxStakeInfo().claimableCRWNToken(msg.sender);\n    require(allReward >= _amount, \"User has claimed more than he's entitled\");\n    config.getCRWN().mint(msg.sender, _amount);\n    config.getAlloyxStakeInfo().resetStakeTimestampWithRewardLeft(\n      msg.sender,\n      allReward.sub(_amount)\n    );\n    emit Claim(msg.sender, _amount);\n    return true;\n  }\n\n  /**\n   * @notice Claim certain amount of reward token based on alloy CRWN token, the method will burn the CRWN token of\n   * the amount of message sender, and transfer reward token to message sender\n   * @param _amount the amount to claim\n   */\n  function claimReward(uint256 _amount) external returns (bool) {\n    (uint256 amountToReward, uint256 fee) = getRewardTokenCount(_amount);\n    config.getTreasury().transferERC20(config.gfiAddress(), msg.sender, amountToReward.sub(fee));\n    config.getTreasury().addEarningGfiFee(fee);\n    config.getCRWN().burn(msg.sender, _amount);\n    emit Reward(msg.sender, _amount);\n    return true;\n  }\n\n\n  /**\n   * @notice Widthdraw GFI from pool token\n   * @param _tokenID the ID of token to sell\n   */\n  function withdrawGfiFromPoolTokens(uint256 _tokenID) external onlyAdmin {\n    config.getTreasury().transferERC721(config.poolTokensAddress(), address(this), _tokenID);\n    config.getBackerRewards().withdraw(_tokenID);\n    config.getPoolTokens().safeTransferFrom(address(this), config.treasuryAddress(), _tokenID);\n    config.getGFI().safeTransfer(\n      config.treasuryAddress(),\n      config.getGFI().balanceOf(address(this))\n    );\n    emit WithdrawGfiFromPoolTokens(_tokenID);\n  }\n\n  /**\n   * @notice Widthdraw GFI from pool token\n   * @param _tokenIDs the IDs of token to sell\n   */\n  function withdrawGfiFromMultiplePoolTokens(uint256[] calldata _tokenIDs) external onlyAdmin {\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\n      config.getTreasury().transferERC721(config.poolTokensAddress(), address(this), _tokenIDs[i]);\n    }\n    config.getBackerRewards().withdrawMultiple(_tokenIDs);\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\n      config.getPoolTokens().safeTransferFrom(\n        address(this),\n        config.treasuryAddress(),\n        _tokenIDs[i]\n      );\n    }\n    config.getGFI().safeTransfer(\n      config.treasuryAddress(),\n      config.getGFI().balanceOf(address(this))\n    );\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\n      emit WithdrawGfiFromPoolTokens(_tokenIDs[i]);\n    }\n  }\n\n  /**\n   * @notice Get reward token count if the amount of CRWN tokens are claimed\n   * @param _amount the amount to claim\n   */\n  function getRewardTokenCount(uint256 _amount) public view returns (uint256, uint256) {\n    uint256 amountToReward = _amount\n      .mul(\n        config.getGFI().balanceOf(config.treasuryAddress()).sub(\n          config.getTreasury().getAllGfiFees()\n        )\n      )\n      .div(totalClaimableAndClaimedCRWNToken());\n    uint256 fee = amountToReward.mul(config.getPercentageCRWNEarning()).div(100);\n    return (amountToReward, fee);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/alloyx/interfaces/IMintBurnableERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\n/**\n * @title Mintable + Burnable\n * @author AlloyX\n */\ninterface IMintBurnableERC20 is IERC20Upgradeable {\n  function mint(address _account, uint256 _amount) external returns (bool);\n\n  function burn(address _account, uint256 _amount) external returns (bool);\n}\n"
    },
    "contracts/alloyx/ConfigHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"./AlloyxConfig.sol\";\nimport \"./interfaces/IAlloyxWhitelist.sol\";\nimport \"./interfaces/IMintBurnableERC20.sol\";\nimport \"./interfaces/ISortedGoldfinchTranches.sol\";\nimport \"./interfaces/IAlloyxStakeInfo.sol\";\nimport \"./interfaces/IAlloyxTreasury.sol\";\nimport \"./interfaces/IAlloyxExchange.sol\";\nimport \"./interfaces/IGoldfinchDesk.sol\";\nimport \"./interfaces/IStakeDesk.sol\";\nimport \"./interfaces/IBackerRewards.sol\";\nimport \"./interfaces/IStableCoinDesk.sol\";\nimport \"../goldfinch/interfaces/ISeniorPool.sol\";\nimport \"../goldfinch/interfaces/IPoolTokens.sol\";\n\n/**\n * @title ConfigHelper\n * @notice A convenience library for getting easy access to other contracts and constants within the\n *  protocol, through the use of the AlloyxConfig contract\n * @author AlloyX\n */\n\nlibrary ConfigHelper {\n  function treasuryAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.Treasury));\n  }\n\n  function exchangeAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.Exchange));\n  }\n\n  function configAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.Config));\n  }\n\n  function goldfinchDeskAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchDesk));\n  }\n\n  function stableCoinDeskAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.StableCoinDesk));\n  }\n\n  function stakeDeskAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.StakeDesk));\n  }\n\n  function whitelistAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.Whitelist));\n  }\n\n  function alloyxStakeInfoAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.AlloyxStakeInfo));\n  }\n\n  function poolTokensAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\n  }\n\n  function seniorPoolAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.SeniorPool));\n  }\n\n  function sortedGoldfinchTranchesAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.SortedGoldfinchTranches));\n  }\n\n  function fiduAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.FIDU));\n  }\n\n  function gfiAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.GFI));\n  }\n\n  function usdcAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\n  }\n\n  function duraAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.DURA));\n  }\n\n  function crwnAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.CRWN));\n  }\n\n  function backerRewardsAddress(AlloyxConfig config) internal view returns (address) {\n    return config.getAddress(uint256(ConfigOptions.Addresses.BackerRewards));\n  }\n\n  function getWhitelist(AlloyxConfig config) internal view returns (IAlloyxWhitelist) {\n    return IAlloyxWhitelist(whitelistAddress(config));\n  }\n\n  function getTreasury(AlloyxConfig config) internal view returns (IAlloyxTreasury) {\n    return IAlloyxTreasury(treasuryAddress(config));\n  }\n\n  function getExchange(AlloyxConfig config) internal view returns (IAlloyxExchange) {\n    return IAlloyxExchange(exchangeAddress(config));\n  }\n\n  function getConfig(AlloyxConfig config) internal view returns (IAlloyxConfig) {\n    return IAlloyxConfig(treasuryAddress(config));\n  }\n\n  function getGoldfinchDesk(AlloyxConfig config) internal view returns (IGoldfinchDesk) {\n    return IGoldfinchDesk(goldfinchDeskAddress(config));\n  }\n\n  function getStableCoinDesk(AlloyxConfig config) internal view returns (IStableCoinDesk) {\n    return IStableCoinDesk(stableCoinDeskAddress(config));\n  }\n\n  function getStakeDesk(AlloyxConfig config) internal view returns (IStakeDesk) {\n    return IStakeDesk(stakeDeskAddress(config));\n  }\n\n  function getAlloyxStakeInfo(AlloyxConfig config) internal view returns (IAlloyxStakeInfo) {\n    return IAlloyxStakeInfo(alloyxStakeInfoAddress(config));\n  }\n\n  function getPoolTokens(AlloyxConfig config) internal view returns (IPoolTokens) {\n    return IPoolTokens(poolTokensAddress(config));\n  }\n\n  function getSeniorPool(AlloyxConfig config) internal view returns (ISeniorPool) {\n    return ISeniorPool(seniorPoolAddress(config));\n  }\n\n  function getSortedGoldfinchTranches(AlloyxConfig config)\n    internal\n    view\n    returns (ISortedGoldfinchTranches)\n  {\n    return ISortedGoldfinchTranches(sortedGoldfinchTranchesAddress(config));\n  }\n\n  function getFIDU(AlloyxConfig config) internal view returns (IERC20Upgradeable) {\n    return IERC20Upgradeable(fiduAddress(config));\n  }\n\n  function getGFI(AlloyxConfig config) internal view returns (IERC20Upgradeable) {\n    return IERC20Upgradeable(gfiAddress(config));\n  }\n\n  function getUSDC(AlloyxConfig config) internal view returns (IERC20Upgradeable) {\n    return IERC20Upgradeable(usdcAddress(config));\n  }\n\n  function getDURA(AlloyxConfig config) internal view returns (IMintBurnableERC20) {\n    return IMintBurnableERC20(duraAddress(config));\n  }\n\n  function getCRWN(AlloyxConfig config) internal view returns (IMintBurnableERC20) {\n    return IMintBurnableERC20(crwnAddress(config));\n  }\n\n  function getBackerRewards(AlloyxConfig config) internal view returns (IBackerRewards) {\n    return IBackerRewards(backerRewardsAddress(config));\n  }\n\n  function getPercentageDuraRedemption(AlloyxConfig config) internal view returns (uint256) {\n    return config.getNumber(uint256(ConfigOptions.Numbers.PercentageDuraRedemption));\n  }\n\n  function getPercentageDuraToFiduFee(AlloyxConfig config) internal view returns (uint256) {\n    return config.getNumber(uint256(ConfigOptions.Numbers.PercentageDuraToFiduFee));\n  }\n\n  function getPercentageDuraRepayment(AlloyxConfig config) internal view returns (uint256) {\n    return config.getNumber(uint256(ConfigOptions.Numbers.PercentageDuraRepayment));\n  }\n\n  function getPercentageCRWNEarning(AlloyxConfig config) internal view returns (uint256) {\n    return config.getNumber(uint256(ConfigOptions.Numbers.PercentageCRWNEarning));\n  }\n\n  function getPercentageJuniorRedemption(AlloyxConfig config) internal view returns (uint256) {\n    return config.getNumber(uint256(ConfigOptions.Numbers.PercentageJuniorRedemption));\n  }\n\n  function getPercentageInvestJunior(AlloyxConfig config) internal view returns (uint256) {\n    return config.getNumber(uint256(ConfigOptions.Numbers.PercentageInvestJunior));\n  }\n\n  function getPercentageRewardPerYear(AlloyxConfig config) internal view returns (uint256) {\n    return config.getNumber(uint256(ConfigOptions.Numbers.PercentageRewardPerYear));\n  }\n}\n"
    },
    "contracts/alloyx/AlloyxConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"./ConfigOptions.sol\";\nimport \"./AdminUpgradeable.sol\";\nimport \"./interfaces/IAlloyxConfig.sol\";\n\n/**\n * @title AlloyX Configuration\n * @author AlloyX\n */\n\ncontract AlloyxConfig is IAlloyxConfig,AdminUpgradeable {\n  mapping(uint256 => address) public addresses;\n  mapping(uint256 => uint256) public numbers;\n\n  event AddressUpdated(address owner, uint256 index, address oldValue, address newValue);\n  event NumberUpdated(address owner, uint256 index, uint256 oldValue, uint256 newValue);\n\n  function initialize() public initializer {\n    __AdminUpgradeable_init(msg.sender);\n  }\n\n  function setAddress(uint256 addressIndex, address newAddress) public override onlyAdmin {\n    emit AddressUpdated(msg.sender, addressIndex, addresses[addressIndex], newAddress);\n    addresses[addressIndex] = newAddress;\n  }\n\n  function setNumber(uint256 index, uint256 newNumber) public override onlyAdmin {\n    emit NumberUpdated(msg.sender, index, numbers[index], newNumber);\n    numbers[index] = newNumber;\n  }\n\n  function copyFromOtherConfig(\n    address _initialConfig,\n    uint256 numbersLength,\n    uint256 addressesLength\n  ) public onlyAdmin {\n    IAlloyxConfig initialConfig = IAlloyxConfig(_initialConfig);\n    for (uint256 i = 0; i < numbersLength; i++) {\n      setNumber(i, initialConfig.getNumber(i));\n    }\n\n    for (uint256 i = 0; i < addressesLength; i++) {\n      if (getAddress(i) == address(0)) {\n        setAddress(i, initialConfig.getAddress(i));\n      }\n    }\n  }\n\n  /*\n    Using custom getters in case we want to change underlying implementation later,\n    or add checks or validations later on.\n  */\n  function getAddress(uint256 index) public override view returns (address) {\n    return addresses[index];\n  }\n\n  function getNumber(uint256 index) public override view returns (uint256) {\n    return numbers[index];\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/alloyx/interfaces/IAlloyxWhitelist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n/**\n * @title Alloyx Whitelist Interface\n * @author AlloyX\n */\ninterface IAlloyxWhitelist {\n  /**\n   * @notice Check whether user is whitelisted\n   * @param _whitelistedAddress The address to whitelist.\n   */\n  function isUserWhitelisted(address _whitelistedAddress) external view returns (bool);\n}\n"
    },
    "contracts/alloyx/interfaces/ISortedGoldfinchTranches.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n/**\n * @title SortedGoldfinchTranches Interface\n * @notice A editable sorted list of tranch pool addresses according to score\n * @author AlloyX\n */\ninterface ISortedGoldfinchTranches {\n  /**\n   * @notice A method to get the top k tranch pools\n   * @param k the top k tranch pools\n   */\n  function getTop(uint256 k) external view returns (address[] memory);\n}\n"
    },
    "contracts/alloyx/interfaces/IAlloyxStakeInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n/**\n * @title Alloyx Stake Info Interface\n * @author AlloyX\n */\ninterface IAlloyxStakeInfo {\n  /**\n   * @notice Add stake for a staker\n   * @param _staker The person intending to stake\n   * @param _stake The size of the stake to be created.\n   */\n  function addStake(address _staker, uint256 _stake) external;\n\n  /**\n   * @notice Remove stake for a staker\n   * @param _staker The person intending to remove stake\n   * @param _stake The size of the stake to be removed.\n   */\n  function removeStake(address _staker, uint256 _stake) external;\n\n  /**\n   * @notice A method for a stakeholder to clear a stake with some leftover reward\n   * @param _staker the address of the staker\n   * @param _reward the leftover reward the staker owns\n   */\n  function resetStakeTimestampWithRewardLeft(address _staker, uint256 _reward) external;\n\n  /**\n   * @notice Claimable CRWN token amount of an address\n   * @param _receiver the address of receiver\n   */\n  function claimableCRWNToken(address _receiver) external view returns (uint256);\n\n  /**\n   * @notice Total claimable CRWN tokens of all stakeholders\n   */\n  function totalClaimableCRWNToken() external view returns (uint256);\n}\n"
    },
    "contracts/alloyx/interfaces/IAlloyxTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IAlloyxTreasury {\n  function addEarningGfiFee(uint256 _amount) external;\n\n  function addRepaymentFee(uint256 _amount) external;\n\n  function addRedemptionFee(uint256 _amount) external;\n\n  function addDuraToFiduFee(uint256 _amount) external;\n\n  function getAllUsdcFees() external view returns (uint256);\n\n  function getAllGfiFees() external view returns (uint256);\n\n  /**\n   * @notice Transfer certain amount token of certain address to some other account\n   * @param _account the address to transfer\n   * @param _amount the amount to transfer\n   * @param _tokenAddress the token address to transfer\n   */\n  function transferERC20(\n    address _tokenAddress,\n    address _account,\n    uint256 _amount\n  ) external;\n\n  /**\n   * @notice Transfer certain amount token of certain address to some other account\n   * @param _account the address to transfer\n   * @param _tokenId the token ID to transfer\n   * @param _tokenAddress the token address to transfer\n   */\n  function transferERC721(\n    address _tokenAddress,\n    address _account,\n    uint256 _tokenId\n  ) external;\n\n  /**\n   * @notice Approve certain amount token of certain address to some other account\n   * @param _account the address to approve\n   * @param _amount the amount to approve\n   * @param _tokenAddress the token address to approve\n   */\n  function approveERC20(\n    address _tokenAddress,\n    address _account,\n    uint256 _amount\n  ) external;\n\n  /**\n   * @notice Approve certain amount token of certain address to some other account\n   * @param _account the address to approve\n   * @param _tokenId the token ID to transfer\n   * @param _tokenAddress the token address to approve\n   */\n  function approveERC721(\n    address _tokenAddress,\n    address _account,\n    uint256 _tokenId\n  ) external;\n}\n"
    },
    "contracts/alloyx/interfaces/IAlloyxExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IAlloyxExchange {\n  /**\n   * @notice Convert Alloyx DURA to USDC amount\n   * @param _amount the amount of DURA token to convert to usdc\n   */\n  function alloyxDuraToUsdc(uint256 _amount) external view returns (uint256);\n\n  /**\n   * @notice Convert USDC Amount to Alloyx DURA\n   * @param _amount the amount of usdc to convert to DURA token\n   */\n  function usdcToAlloyxDura(uint256 _amount) external view returns (uint256);\n\n  /**\n   * @notice Alloy Treasury Value in terms of USDC\n   */\n  function getTreasuryTotalBalanceInUsdc() external view returns (uint256);\n}\n"
    },
    "contracts/alloyx/interfaces/IGoldfinchDesk.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IGoldfinchDesk {\n  /**\n   * @notice GoldFinch PoolToken Value in Value in term of USDC\n   */\n  function getGoldFinchPoolTokenBalanceInUsdc() external view returns (uint256);\n}\n"
    },
    "contracts/alloyx/interfaces/IStakeDesk.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IStakeDesk {}\n"
    },
    "contracts/alloyx/interfaces/IBackerRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IBackerRewards {\n  /**\n   * @notice PoolToken request to withdraw multiple PoolTokens allocated rewards\n   * @param tokenIds Array of pool token id\n   */\n  function withdrawMultiple(uint256[] calldata tokenIds) external;\n\n  /**\n   * @notice PoolToken request to withdraw all allocated rewards\n   * @param tokenId Pool token id\n   */\n  function withdraw(uint256 tokenId) external;\n}\n"
    },
    "contracts/alloyx/interfaces/IStableCoinDesk.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IStableCoinDesk {}\n"
    },
    "contracts/goldfinch/interfaces/ISeniorPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\npragma experimental ABIEncoderV2;\n\nimport \"./ITranchedPool.sol\";\n\nabstract contract ISeniorPool {\n  uint256 public sharePrice;\n  uint256 public totalLoansOutstanding;\n  uint256 public totalWritedowns;\n\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\n\n  function depositWithPermit(\n    uint256 amount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external virtual returns (uint256 depositShares);\n\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\n\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\n\n  function sweepToCompound() public virtual;\n\n  function sweepFromCompound() public virtual;\n\n  function invest(ITranchedPool pool) public virtual;\n\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\n\n  function redeem(uint256 tokenId) public virtual;\n\n  function writedown(uint256 tokenId) public virtual;\n\n  function calculateWritedown(uint256 tokenId)\n    public\n    view\n    virtual\n    returns (uint256 writedownAmount);\n\n  function assets() public view virtual returns (uint256);\n\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\n}\n"
    },
    "contracts/goldfinch/interfaces/IPoolTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ninterface IPoolTokens is IERC721, IERC721Enumerable {\n  event TokenMinted(\n    address indexed owner,\n    address indexed pool,\n    uint256 indexed tokenId,\n    uint256 amount,\n    uint256 tranche\n  );\n\n  event TokenRedeemed(\n    address indexed owner,\n    address indexed pool,\n    uint256 indexed tokenId,\n    uint256 principalRedeemed,\n    uint256 interestRedeemed,\n    uint256 tranche\n  );\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\n\n  struct TokenInfo {\n    address pool;\n    uint256 tranche;\n    uint256 principalAmount;\n    uint256 principalRedeemed;\n    uint256 interestRedeemed;\n  }\n\n  struct MintParams {\n    uint256 principalAmount;\n    uint256 tranche;\n  }\n\n  function mint(MintParams calldata params, address to) external returns (uint256);\n\n  function redeem(\n    uint256 tokenId,\n    uint256 principalRedeemed,\n    uint256 interestRedeemed\n  ) external;\n\n  function burn(uint256 tokenId) external;\n\n  function onPoolCreated(address newPool) external;\n\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\n\n  function validPool(address sender) external view returns (bool);\n\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\n}\n"
    },
    "contracts/alloyx/ConfigOptions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n/**\n * @title ConfigOptions\n * @notice A central place for enumerating the configurable options of our AlloyxConfig contract\n * @author AlloyX\n */\n\nlibrary ConfigOptions {\n  // NEVER EVER CHANGE THE ORDER OF THESE!\n  // You can rename or append. But NEVER change the order.\n  enum Numbers {\n    PercentageDuraRedemption,\n    PercentageDuraToFiduFee,\n    PercentageDuraRepayment,\n    PercentageCRWNEarning,\n    PercentageJuniorRedemption,\n    PercentageInvestJunior,\n    PercentageRewardPerYear\n  }\n  enum Addresses {\n    Treasury,\n    Exchange,\n    Config,\n    GoldfinchDesk,\n    StableCoinDesk,\n    StakeDesk,\n    Whitelist,\n    AlloyxStakeInfo,\n    PoolTokens,\n    SeniorPool,\n    SortedGoldfinchTranches,\n    FIDU,\n    GFI,\n    USDC,\n    DURA,\n    CRWN,\n    BackerRewards\n  }\n}\n"
    },
    "contracts/alloyx/interfaces/IAlloyxConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IAlloyxConfig {\n  function getNumber(uint256 index) external returns (uint256);\n\n  function getAddress(uint256 index) external returns (address);\n\n  function setAddress(uint256 index, address newAddress) external ;\n\n  function setNumber(uint256 index, uint256 newNumber) external ;\n}\n"
    },
    "contracts/goldfinch/interfaces/ITranchedPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\npragma experimental ABIEncoderV2;\n\nimport \"./IV2CreditLine.sol\";\n\nabstract contract ITranchedPool {\n  IV2CreditLine public creditLine;\n  uint256 public createdAt;\n\n  enum Tranches {\n    Reserved,\n    Senior,\n    Junior\n  }\n\n  struct TrancheInfo {\n    uint256 id;\n    uint256 principalDeposited;\n    uint256 principalSharePrice;\n    uint256 interestSharePrice;\n    uint256 lockedUntil;\n  }\n\n  struct PoolSlice {\n    TrancheInfo seniorTranche;\n    TrancheInfo juniorTranche;\n    uint256 totalInterestAccrued;\n    uint256 principalDeployed;\n  }\n\n  struct SliceInfo {\n    uint256 reserveFeePercent;\n    uint256 interestAccrued;\n    uint256 principalAccrued;\n  }\n\n  struct ApplyResult {\n    uint256 interestRemaining;\n    uint256 principalRemaining;\n    uint256 reserveDeduction;\n    uint256 oldInterestSharePrice;\n    uint256 oldPrincipalSharePrice;\n  }\n\n  function initialize(\n    address _config,\n    address _borrower,\n    uint256 _juniorFeePercent,\n    uint256 _limit,\n    uint256 _interestApr,\n    uint256 _paymentPeriodInDays,\n    uint256 _termInDays,\n    uint256 _lateFeeApr,\n    uint256 _principalGracePeriodInDays,\n    uint256 _fundableAt,\n    uint256[] calldata _allowedUIDTypes\n  ) public virtual;\n\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\n\n  function pay(uint256 amount) external virtual;\n\n  function lockJuniorCapital() external virtual;\n\n  function lockPool() external virtual;\n\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\n\n  function totalJuniorDeposits() external view virtual returns (uint256);\n\n  function drawdown(uint256 amount) external virtual;\n\n  function setFundableAt(uint256 timestamp) external virtual;\n\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\n\n  function assess() external virtual;\n\n  function depositWithPermit(\n    uint256 tranche,\n    uint256 amount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external virtual returns (uint256 tokenId);\n\n  function availableToWithdraw(uint256 tokenId)\n    external\n    view\n    virtual\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\n\n  function withdraw(uint256 tokenId, uint256 amount)\n    external\n    virtual\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\n\n  function withdrawMax(uint256 tokenId)\n    external\n    virtual\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\n\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts)\n    external\n    virtual;\n}\n"
    },
    "contracts/goldfinch/interfaces/IV2CreditLine.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\npragma experimental ABIEncoderV2;\n\nimport \"./ICreditLine.sol\";\n\nabstract contract IV2CreditLine is ICreditLine {\n  function principal() external view virtual returns (uint256);\n\n  function totalInterestAccrued() external view virtual returns (uint256);\n\n  function termStartTime() external view virtual returns (uint256);\n\n  function setLimit(uint256 newAmount) external virtual;\n\n  function setMaxLimit(uint256 newAmount) external virtual;\n\n  function setBalance(uint256 newBalance) external virtual;\n\n  function setPrincipal(uint256 _principal) external virtual;\n\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\n\n  function drawdown(uint256 amount) external virtual;\n\n  function assess()\n    external\n    virtual\n    returns (\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function initialize(\n    address _config,\n    address owner,\n    address _borrower,\n    uint256 _limit,\n    uint256 _interestApr,\n    uint256 _paymentPeriodInDays,\n    uint256 _termInDays,\n    uint256 _lateFeeApr,\n    uint256 _principalGracePeriodInDays\n  ) public virtual;\n\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\n\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\n\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\n\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\n\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\n\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\n\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\n\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\n\n  function updateGoldfinchConfig() external virtual;\n}\n"
    },
    "contracts/goldfinch/interfaces/ICreditLine.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\npragma experimental ABIEncoderV2;\n\ninterface ICreditLine {\n  function borrower() external view returns (address);\n\n  function limit() external view returns (uint256);\n\n  function maxLimit() external view returns (uint256);\n\n  function interestApr() external view returns (uint256);\n\n  function paymentPeriodInDays() external view returns (uint256);\n\n  function principalGracePeriodInDays() external view returns (uint256);\n\n  function termInDays() external view returns (uint256);\n\n  function lateFeeApr() external view returns (uint256);\n\n  function isLate() external view returns (bool);\n\n  function withinPrincipalGracePeriod() external view returns (bool);\n\n  // Accounting variables\n  function balance() external view returns (uint256);\n\n  function interestOwed() external view returns (uint256);\n\n  function principalOwed() external view returns (uint256);\n\n  function termEndTime() external view returns (uint256);\n\n  function nextDueTime() external view returns (uint256);\n\n  function interestAccruedAsOf() external view returns (uint256);\n\n  function lastFullPaymentTime() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/alloyx/StableCoinDesk.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./ConfigHelper.sol\";\nimport \"./AlloyxConfig.sol\";\nimport \"./AdminUpgradeable.sol\";\n\n/**\n * @title StableCoinDesk\n * @notice All transactions or statistics related to StableCoin\n * @author AlloyX\n */\ncontract StableCoinDesk is IStableCoinDesk, AdminUpgradeable {\n  using SafeMath for uint256;\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  AlloyxConfig public config;\n  using ConfigHelper for AlloyxConfig;\n\n  event Mint(address _tokenReceiver, uint256 _tokenAmount);\n  event Burn(address _tokenReceiver, uint256 _tokenAmount);\n  event Stake(address _staker, uint256 _amount);\n  event DepositDURA(address _tokenSender, uint256 _tokenAmount);\n  event DepositStable(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\n  event AlloyxConfigUpdated(address indexed who, address configAddress);\n\n  /**\n   * @notice If address is whitelisted\n   * @param _address The address to verify.\n   */\n  modifier isWhitelisted(address _address) {\n    require(config.getWhitelist().isUserWhitelisted(_address), \"user is not whitelisted\");\n    _;\n  }\n\n  function initialize(address _configAddress) public initializer {\n    __AdminUpgradeable_init(msg.sender);\n    config = AlloyxConfig(_configAddress);\n  }\n\n  function updateConfig() external onlyAdmin {\n    config = AlloyxConfig(config.configAddress());\n    emit AlloyxConfigUpdated(msg.sender, address(config));\n  }\n\n  /**\n   * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\n   * @param _tokenAmount Number of Alloy Tokens\n   */\n  function depositAlloyxDURATokens(uint256 _tokenAmount) external isWhitelisted(msg.sender) {\n    uint256 amountToWithdraw = config.getExchange().alloyxDuraToUsdc(_tokenAmount);\n    uint256 withdrawalFee = amountToWithdraw.mul(config.getPercentageDuraRedemption()).div(100);\n    config.getDURA().burn(msg.sender, _tokenAmount);\n    config.getTreasury().transferERC20(\n      config.usdcAddress(),\n      msg.sender,\n      amountToWithdraw.sub(withdrawalFee)\n    );\n    config.getTreasury().addRedemptionFee(withdrawalFee);\n    emit DepositDURA(msg.sender, _tokenAmount);\n    emit Burn(msg.sender, _tokenAmount);\n  }\n\n  /**\n   * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\n   * @param _tokenAmount Number of stable coin\n   * @param _toStake whether to stake the dura\n   */\n  function depositUSDCCoin(uint256 _tokenAmount, bool _toStake) external isWhitelisted(msg.sender) {\n    uint256 amountToMint = config.getExchange().usdcToAlloyxDura(_tokenAmount);\n    config.getUSDC().safeTransferFrom(msg.sender, config.treasuryAddress(), _tokenAmount);\n    if (_toStake) {\n      config.getDURA().mint(config.treasuryAddress(), amountToMint);\n      config.getAlloyxStakeInfo().addStake(msg.sender, amountToMint);\n      emit Mint(config.treasuryAddress(), amountToMint);\n      emit Stake(msg.sender, amountToMint);\n    } else {\n      config.getDURA().mint(msg.sender, amountToMint);\n      emit Mint(msg.sender, amountToMint);\n    }\n    emit DepositStable(config.usdcAddress(), msg.sender, amountToMint);\n  }\n}\n"
    },
    "contracts/alloyx/GoldfinchDesk.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\";\nimport \"../goldfinch/interfaces/ITranchedPool.sol\";\nimport \"../goldfinch/interfaces/IPoolTokens.sol\";\nimport \"./interfaces/IGoldfinchDesk.sol\";\nimport \"./ConfigHelper.sol\";\nimport \"./AlloyxConfig.sol\";\n\n/**\n * @title GoldfinchDesk\n * @notice All transactions or statistics related to Goldfinch\n * @author AlloyX\n */\ncontract GoldfinchDesk is IGoldfinchDesk, AdminUpgradeable, ERC721HolderUpgradeable {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  using SafeMath for uint256;\n\n  AlloyxConfig public config;\n  using ConfigHelper for AlloyxConfig;\n\n  event PurchaseSenior(uint256 amount);\n  event Mint(address _tokenReceiver, uint256 _tokenAmount);\n  event Burn(address _tokenReceiver, uint256 _tokenAmount);\n  event DepositDURA(address _tokenSender, uint256 _tokenAmount);\n  event TransferUSDC(address _to, uint256 _amount);\n  event WithdrawPoolTokens(address _withdrawer, uint256 _tokenID);\n  event DepositPoolTokens(address _depositor, uint256 _tokenID);\n  event PurchasePoolTokensByUSDC(uint256 _amount);\n  event PurchaseFiduByUsdc(uint256 _amount);\n  event Stake(address _staker, uint256 _amount);\n  event SellFIDU(uint256 _amount);\n  event WithdrawPoolTokenByUSDCAmount(uint256 _amount);\n  event AlloyxConfigUpdated(address indexed who, address configAddress);\n\n  mapping(uint256 => address) tokenDepositorMap;\n\n  function initialize(address _configAddress) public initializer {\n    __AdminUpgradeable_init(msg.sender);\n    config = AlloyxConfig(_configAddress);\n  }\n\n  /**\n   * @notice If address is whitelisted\n   * @param _address The address to verify.\n   */\n  modifier isWhitelisted(address _address) {\n    require(config.getWhitelist().isUserWhitelisted(_address), \"user is not whitelisted\");\n    _;\n  }\n\n  function updateConfig() external onlyAdmin {\n    config = AlloyxConfig(config.configAddress());\n    emit AlloyxConfigUpdated(msg.sender, address(config));\n  }\n\n  /**\n   * @notice An Alloy token holder can deposit their tokens and buy FIDU\n   * @param _tokenAmount Number of Alloy Tokens\n   */\n  function depositDuraForFidu(uint256 _tokenAmount) external isWhitelisted(msg.sender) {\n    uint256 amountToWithdraw = config.getExchange().alloyxDuraToUsdc(_tokenAmount);\n    uint256 withdrawalFee = amountToWithdraw.mul(config.getPercentageDuraToFiduFee()).div(100);\n    uint256 totalUsdcValueOfFidu = amountToWithdraw.sub(withdrawalFee);\n    config.getDURA().burn(msg.sender, _tokenAmount);\n    config.getTreasury().addDuraToFiduFee(withdrawalFee);\n    config.getTreasury().transferERC20(config.usdcAddress(), address(this), totalUsdcValueOfFidu);\n    config.getUSDC().approve(config.seniorPoolAddress(), totalUsdcValueOfFidu);\n    uint256 fiduAmount = config.getSeniorPool().deposit(totalUsdcValueOfFidu);\n    config.getFIDU().safeTransfer(msg.sender, fiduAmount);\n    emit PurchaseSenior(fiduAmount);\n    emit DepositDURA(msg.sender, _tokenAmount);\n    emit Burn(msg.sender, _tokenAmount);\n  }\n\n  /**\n   * @notice An Alloy token holder can deposit their tokens and buy back their previously deposited Pooltoken\n   * @param _tokenId Pooltoken of ID\n   */\n  function depositDuraForPoolToken(uint256 _tokenId) external isWhitelisted(msg.sender) {\n    uint256 purchaseAmount = getJuniorTokenValue(_tokenId);\n    uint256 withdrawalFee = purchaseAmount.mul(config.getPercentageJuniorRedemption()).div(100);\n    uint256 duraAmount = config.getExchange().usdcToAlloyxDura(purchaseAmount.add(withdrawalFee));\n    config.getTreasury().addRedemptionFee(withdrawalFee);\n    transferTokenToDepositor(msg.sender, _tokenId);\n    config.getDURA().burn(msg.sender, duraAmount);\n    emit Burn(msg.sender, duraAmount);\n    emit DepositDURA(msg.sender, duraAmount);\n    emit WithdrawPoolTokens(msg.sender, _tokenId);\n  }\n\n  /**\n   * @notice A Junior token holder can deposit their NFT for dura\n   * @param _tokenID NFT ID\n   * @param _toStake whether to stake the dura\n   */\n  function depositPoolTokenForDura(uint256 _tokenID, bool _toStake)\n    external\n    isWhitelisted(msg.sender)\n  {\n    require(isValidPool(_tokenID) == true, \"Not a valid pool\");\n    uint256 purchasePrice = getJuniorTokenValue(_tokenID);\n    uint256 amountToMint = config.getExchange().usdcToAlloyxDura(purchasePrice);\n    config.getPoolTokens().safeTransferFrom(msg.sender, config.treasuryAddress(), _tokenID);\n    tokenDepositorMap[_tokenID] = msg.sender;\n    if (_toStake) {\n      config.getDURA().mint(config.treasuryAddress(), amountToMint);\n      config.getAlloyxStakeInfo().addStake(msg.sender, amountToMint);\n      emit Mint(config.treasuryAddress(), amountToMint);\n      emit Stake(msg.sender, amountToMint);\n    } else {\n      config.getDURA().mint(msg.sender, amountToMint);\n      emit Mint(msg.sender, amountToMint);\n    }\n    emit DepositPoolTokens(msg.sender, _tokenID);\n  }\n\n  /**\n   * @notice A Junior token holder can deposit their NFT for stable coin\n   * @param _tokenID NFT ID\n   */\n  function depositPoolTokensForUsdc(uint256 _tokenID) external isWhitelisted(msg.sender) {\n    require(isValidPool(_tokenID) == true, \"Not a valid pool\");\n    uint256 purchasePrice = getJuniorTokenValue(_tokenID);\n    tokenDepositorMap[_tokenID] = msg.sender;\n    config.getPoolTokens().safeTransferFrom(msg.sender, config.treasuryAddress(), _tokenID);\n    config.getTreasury().transferERC20(config.usdcAddress(), msg.sender, purchasePrice);\n    emit DepositPoolTokens(msg.sender, _tokenID);\n    emit TransferUSDC(msg.sender, purchasePrice);\n  }\n\n  /**\n   * @notice Purchase pool token to get pooltoken\n   * @param _amount the amount of usdc to purchase by\n   * @param _poolAddress the pool address to buy from\n   * @param _tranche the tranch id\n   */\n  function purchasePoolToken(\n    uint256 _amount,\n    address _poolAddress,\n    uint256 _tranche\n  ) public onlyAdmin {\n    ITranchedPool juniorPool = ITranchedPool(_poolAddress);\n    config.getTreasury().transferERC20(config.usdcAddress(), address(this), _amount);\n    config.getUSDC().approve(_poolAddress, _amount);\n    uint256 tokenID = juniorPool.deposit(_amount, _tranche);\n    config.getPoolTokens().safeTransferFrom(address(this), config.treasuryAddress(), tokenID);\n    emit PurchasePoolTokensByUSDC(_amount);\n  }\n\n  /**\n   * @notice Purchase pool token when usdc is beyond threshold\n   */\n  function purchaseJuniorTokenBeyondUsdcThreshold() external onlyAdmin{\n    uint256 totalValue = config.getExchange().getTreasuryTotalBalanceInUsdc();\n    uint256 totalUsdcFee = config.getTreasury().getAllUsdcFees();\n    require(\n      totalValue.sub(totalUsdcFee).mul(100).div(totalValue) > config.getPercentageInvestJunior(),\n      \"usdc token must reach certain percentage\"\n    );\n    purchasePoolTokenOnBestTranch(totalValue.sub(totalUsdcFee));\n  }\n\n  /**\n   * @notice Purchase pool token on the best tranch\n   * @param _amount the amount of usdc to purchase with\n   */\n  function purchasePoolTokenOnBestTranch(uint256 _amount) public onlyAdmin{\n    address tranchAddress = config.getSortedGoldfinchTranches().getTop(1)[0];\n    purchasePoolToken(_amount, tranchAddress, 1);\n  }\n\n  /**\n   * @notice Widthdraw from junior token to get repayments\n   * @param _tokenID the ID of token to sell\n   * @param _amount the amount to withdraw\n   * @param _poolAddress the pool address to withdraw from\n   */\n  function withdrawFromJuniorToken(\n    uint256 _tokenID,\n    uint256 _amount,\n    address _poolAddress\n  ) external onlyAdmin {\n    ITranchedPool juniorPool = ITranchedPool(_poolAddress);\n    config.getTreasury().transferERC721(config.poolTokensAddress(), address(this), _tokenID);\n    (uint256 principal, uint256 interest) = juniorPool.withdraw(_tokenID, _amount);\n    uint256 fee = principal.add(interest).mul(config.getPercentageDuraRepayment()).div(100);\n    config.getTreasury().addRepaymentFee(fee);\n    config.getPoolTokens().safeTransferFrom(address(this), config.treasuryAddress(), _tokenID);\n    config.getUSDC().safeTransfer(config.treasuryAddress(), _amount);\n    emit WithdrawPoolTokenByUSDCAmount(_amount);\n  }\n\n  /**\n   * @notice Purchase FIDU\n   * @param _amount the amount of usdc to purchase by\n   */\n  function purchaseFIDU(uint256 _amount) external onlyAdmin {\n    config.getTreasury().transferERC20(config.usdcAddress(), address(this), _amount);\n    config.getUSDC().approve(config.seniorPoolAddress(), _amount);\n    uint256 fiduAmount = config.getSeniorPool().deposit(_amount);\n    config.getFIDU().safeTransfer(config.treasuryAddress(), fiduAmount);\n    emit PurchaseFiduByUsdc(_amount);\n  }\n\n  /**\n   * @notice Sell senior token to redeem fidu\n   * @param _amount the amount of fidu to sell\n   */\n  function sellFIDU(uint256 _amount) external onlyAdmin {\n    config.getTreasury().transferERC20(config.fiduAddress(), address(this), _amount);\n    uint256 usdcAmount = config.getSeniorPool().withdrawInFidu(_amount);\n    uint256 fee = usdcAmount.mul(config.getPercentageDuraRepayment()).div(100);\n    config.getTreasury().addRepaymentFee(fee);\n    config.getUSDC().safeTransfer(config.treasuryAddress(), usdcAmount);\n    emit SellFIDU(_amount);\n  }\n\n  /**\n   * @notice Using the Goldfinch contracts, read the principal, redeemed and redeemable values\n   * @param _tokenID The backer NFT id\n   */\n  function getJuniorTokenValue(uint256 _tokenID) public view returns (uint256) {\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(_tokenID);\n    uint256 principalAmount = tokenInfo.principalAmount;\n    uint256 totalRedeemed = tokenInfo.principalRedeemed.add(tokenInfo.interestRedeemed);\n\n    // now get the redeemable values for the given token\n    address tranchedPoolAddress = tokenInfo.pool;\n    ITranchedPool tranchedTokenContract = ITranchedPool(tranchedPoolAddress);\n    (uint256 interestRedeemable, uint256 principalRedeemable) = tranchedTokenContract\n      .availableToWithdraw(_tokenID);\n    uint256 totalRedeemable = interestRedeemable;\n    // only add principal here if there have been drawdowns otherwise it overstates the value\n    if (principalRedeemable < principalAmount) {\n      totalRedeemable.add(principalRedeemable);\n    }\n    return principalAmount.sub(totalRedeemed).add(totalRedeemable);\n  }\n\n  /**\n   * @notice GoldFinch PoolToken Value in Value in term of USDC\n   */\n  function getGoldFinchPoolTokenBalanceInUsdc() public view override returns (uint256) {\n    uint256 total = 0;\n    uint256 balance = config.getPoolTokens().balanceOf(config.treasuryAddress());\n    for (uint256 i = 0; i < balance; i++) {\n      total = total.add(\n        getJuniorTokenValue(config.getPoolTokens().tokenOfOwnerByIndex(config.treasuryAddress(), i))\n      );\n    }\n    return total;\n  }\n\n  /**\n   * @notice Send the token of the ID to address\n   * @param _depositor The address to send to\n   * @param _tokenId The token ID to deposit\n   */\n  function transferTokenToDepositor(address _depositor, uint256 _tokenId) internal {\n    require(tokenDepositorMap[_tokenId] == _depositor, \"The token is not deposited by this user\");\n    config.getTreasury().transferERC721(config.poolTokensAddress(), _depositor, _tokenId);\n    delete tokenDepositorMap[_tokenId];\n  }\n\n  /**\n   * @notice Using the PoolTokens interface, check if this is a valid pool\n   * @param _tokenID The backer NFT id\n   */\n  function isValidPool(uint256 _tokenID) public view returns (bool) {\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(_tokenID);\n    address tranchedPool = tokenInfo.pool;\n    return config.getPoolTokens().validPool(tranchedPool);\n  }\n\n  /**\n   * @notice Get the tokenID array of depositor\n   * @param _depositor The address of the depositor\n   */\n  function getTokensAvailableForWithdrawal(address _depositor)\n    external\n    view\n    returns (uint256[] memory)\n  {\n    uint256 count = config.getPoolTokens().balanceOf(config.treasuryAddress());\n    uint256[] memory ids = new uint256[](getTokensAvailableCountForWithdrawal(_depositor));\n    uint256 index = 0;\n    for (uint256 i = 0; i < count; i++) {\n      uint256 id = config.getPoolTokens().tokenOfOwnerByIndex(config.treasuryAddress(), i);\n      if (tokenDepositorMap[id] == _depositor) {\n        ids[index] = id;\n        index += 1;\n      }\n    }\n    return ids;\n  }\n\n  /**\n   * @notice Get the token count of depositor\n   * @param _depositor The address of the depositor\n   */\n  function getTokensAvailableCountForWithdrawal(address _depositor) public view returns (uint256) {\n    uint256 count = config.getPoolTokens().balanceOf(config.treasuryAddress());\n    uint256 numOfTokens = 0;\n    for (uint256 i = 0; i < count; i++) {\n      uint256 id = config.getPoolTokens().tokenOfOwnerByIndex(config.treasuryAddress(), i);\n      if (tokenDepositorMap[id] == _depositor) {\n        numOfTokens += 1;\n      }\n    }\n    return numOfTokens;\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\n    function __ERC721Holder_init() internal onlyInitializing {\n    }\n\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/goldfinch/protocol/core/TranchedPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"../../interfaces/ITranchedPool.sol\";\nimport \"../../interfaces/IPoolTokens.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract TranchedPool is ITranchedPool {\n  IPoolTokens private poolToken;\n  IERC20 private usdcCoin;\n\n  constructor(address _poolTokenAddress, address _usdcCoinAddress) public {\n    poolToken = IPoolTokens(_poolTokenAddress);\n    usdcCoin = IERC20(_usdcCoinAddress);\n  }\n\n  event DepositMade(\n    address indexed owner,\n    uint256 indexed tranche,\n    uint256 indexed tokenId,\n    uint256 amount\n  );\n\n  function initialize(\n    address _config,\n    address _borrower,\n    uint256 _juniorFeePercent,\n    uint256 _limit,\n    uint256 _interestApr,\n    uint256 _paymentPeriodInDays,\n    uint256 _termInDays,\n    uint256 _lateFeeApr,\n    uint256 _principalGracePeriodInDays,\n    uint256 _fundableAt,\n    uint256[] calldata _allowedUIDTypes\n  ) public override {}\n\n  function setPoolTokens(address _poolTokens) external {\n    poolToken = IPoolTokens(_poolTokens);\n  }\n\n  function getTranche(uint256 tranche) external view override returns (TrancheInfo memory) {\n    return TrancheInfo(0, 0, 0, 0, 0);\n  }\n\n  function pay(uint256 amount) external override {}\n\n  function lockJuniorCapital() external override {}\n\n  function lockPool() external override {}\n\n  function initializeNextSlice(uint256 _fundableAt) external override {}\n\n  function totalJuniorDeposits() external view override returns (uint256) {\n    return 0;\n  }\n\n  function drawdown(uint256 amount) external override {}\n\n  function setFundableAt(uint256 timestamp) external override {}\n\n  function deposit(uint256 tranche, uint256 amount) external override returns (uint256 tokenId) {\n    require(amount > 0, \"Must deposit > zero\");\n    IPoolTokens.MintParams memory params = IPoolTokens.MintParams({\n      tranche: tranche,\n      principalAmount: amount * 100000\n    });\n    tokenId = poolToken.mint(params, msg.sender);\n    usdcCoin.transferFrom(msg.sender, address(this), amount);\n    usdcCoin.approve(address(this), amount);\n    emit DepositMade(msg.sender, tranche, tokenId, amount);\n    return tokenId;\n  }\n\n  function assess() external override {}\n\n  function depositWithPermit(\n    uint256 tranche,\n    uint256 amount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external override returns (uint256 tokenId) {\n    return 0;\n  }\n\n  function withdraw(uint256 tokenId, uint256 amount)\n    external\n    override\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn)\n  {\n    usdcCoin.transfer(msg.sender, amount);\n    return (amount, 0);\n  }\n\n  function withdrawMax(uint256 tokenId)\n    external\n    override\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn)\n  {\n    return (0, 0);\n  }\n\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts)\n    external\n    override\n  {}\n\n  /**\n   * @notice Determines the amount of interest and principal redeemable by a particular tokenId\n   * @param tokenId The token representing the position\n   * @return interestRedeemable The interest available to redeem\n   * @return principalRedeemable The principal available to redeem\n   */\n  function availableToWithdraw(uint256 tokenId)\n    public\n    view\n    override\n    returns (uint256 interestRedeemable, uint256 principalRedeemable)\n  {\n    return (tokenId * 1000, tokenId * 10000);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/goldfinch/protocol/core/SeniorPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"../../interfaces/ISeniorPool.sol\";\nimport \"../../interfaces/IPoolTokens.sol\";\nimport \"../../../alloyx/test/FIDU.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Goldfinch's SeniorPool contract\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\n *  Automatically invests across borrower pools using an adjustable strategy.\n * @author Goldfinch\n */\ncontract SeniorPool is ISeniorPool {\n  using SafeMath for uint256;\n  FIDU private fiduCoin;\n  IERC20 private usdcCoin;\n\n  event DepositMade(address indexed capitalProvider, uint256 amount, uint256 shares);\n\n  constructor(\n    uint256 _sharePrice,\n    address _fiduCoinAddress,\n    address _usdcCoinAddress\n  ) public {\n    sharePrice = _sharePrice;\n    fiduCoin = FIDU(_fiduCoinAddress);\n    usdcCoin = IERC20(_usdcCoinAddress);\n  }\n\n  function setSharePrice(uint256 _sharePrice) external {\n    sharePrice = _sharePrice;\n  }\n\n  /**\n   * @notice Deposits `amount` USDC from msg.sender into the SeniorPool, and grants you the\n   *  equivalent value of FIDU tokens\n   * @param amount The amount of USDC to deposit\n   */\n  function deposit(uint256 amount) public override returns (uint256 depositShares) {\n    require(amount > 0, \"Must deposit more than zero\");\n    // Check if the amount of new shares to be added is within limits\n    depositShares = getNumShares(amount);\n    emit DepositMade(msg.sender, amount, depositShares);\n    bool success = doUSDCTransfer(msg.sender, address(this), amount);\n    usdcCoin.approve(address(this), amount);\n    require(success, \"Failed to transfer for deposit\");\n    fiduCoin.mint(msg.sender, depositShares);\n    return depositShares;\n  }\n\n  function doUSDCTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal returns (bool) {\n    require(to != address(0), \"Can't send to zero address\");\n    return usdcCoin.transferFrom(from, to, amount);\n  }\n\n  function depositWithPermit(\n    uint256 amount,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external override returns (uint256 depositShares) {\n    return 0;\n  }\n\n  function withdraw(uint256 usdcAmount) external override returns (uint256 amount) {\n    return 0;\n  }\n\n  function withdrawInFidu(uint256 fiduAmount) external override returns (uint256 amount) {\n    require(fiduAmount > 0, \"Must withdraw more than zero\");\n    uint256 usdcAmount = getUSDCAmountFromShares(fiduAmount);\n    uint256 withdrawShares = fiduAmount;\n    return _withdraw(usdcAmount, withdrawShares);\n  }\n\n  function _withdraw(uint256 usdcAmount, uint256 withdrawShares)\n    internal\n    returns (uint256 userAmount)\n  {\n    uint256 currentShares = fiduCoin.balanceOf(msg.sender);\n    require(\n      withdrawShares <= currentShares,\n      \"Amount requested is greater than what this address owns\"\n    );\n\n    // Send the amounts\n    bool success = doUSDCTransfer(address(this), msg.sender, usdcAmount);\n\n    fiduCoin.burn(msg.sender, withdrawShares);\n    return usdcAmount;\n  }\n\n  function sweepToCompound() public override {}\n\n  function sweepFromCompound() public override {}\n\n  function invest(ITranchedPool pool) public override {}\n\n  function estimateInvestment(ITranchedPool pool) public view override returns (uint256) {\n    return 0;\n  }\n\n  function redeem(uint256 tokenId) public override {}\n\n  function writedown(uint256 tokenId) public override {}\n\n  function calculateWritedown(uint256 tokenId)\n    public\n    view\n    override\n    returns (uint256 writedownAmount)\n  {\n    return 0;\n  }\n\n  function assets() public view override returns (uint256) {\n    return 0;\n  }\n\n  /**\n   * @notice Converts and USDC amount to FIDU amount\n   * @param _amount USDC amount to convert to FIDU\n   */\n  function getNumShares(uint256 _amount) public view override returns (uint256) {\n    return usdcToFidu(_amount).mul(fiduMantissa()).div(sharePrice);\n  }\n\n  function usdcToFidu(uint256 amount) internal pure returns (uint256) {\n    return amount.mul(fiduMantissa()).div(usdcMantissa());\n  }\n\n  function getUSDCAmountFromShares(uint256 fiduAmount) internal view returns (uint256) {\n    return fiduToUSDC(fiduAmount.mul(sharePrice).div(fiduMantissa()));\n  }\n\n  function fiduToUSDC(uint256 amount) internal pure returns (uint256) {\n    return amount.div(fiduMantissa().div(usdcMantissa()));\n  }\n\n  function totalShares() internal view returns (uint256) {\n    return fiduCoin.totalSupply();\n  }\n\n  function fiduMantissa() internal pure returns (uint256) {\n    return uint256(10)**uint256(18);\n  }\n\n  function usdcMantissa() internal pure returns (uint256) {\n    return uint256(10)**uint256(6);\n  }\n}\n"
    },
    "contracts/alloyx/test/FIDU.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract FIDU is ERC20, Ownable {\n  constructor() ERC20(\"FIDU\", \"FIDU\") {}\n\n  function mint(address _account, uint256 _amount) external onlyOwner returns (bool) {\n    _mint(_account, _amount);\n    return true;\n  }\n\n  function burn(address _account, uint256 _amount) external onlyOwner returns (bool) {\n    _burn(_account, _amount);\n    return true;\n  }\n\n  function contractName() external returns (string memory) {\n    return \"FIDU\";\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/alloyx/SwapTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./interfaces/IMintBurnableERC20.sol\";\n/**\n * @title SwapTokens\n * @author AlloyX\n */\ncontract SwapTokens is Ownable {\n  using SafeMath for uint256;\n  uint256 public ratio;\n  uint256 public ratioDecimals;\n  IMintBurnableERC20 public tokenToMint;\n  IMintBurnableERC20 public tokenToBurn;\n  address public existingHolder;\n\n  constructor(\n    address _tokenToMint,\n    address _tokenToBurn,\n    uint256 _ratio,\n    uint256 _ratioDecimals,\n    address _existingHolder\n  ) {\n    tokenToMint = IMintBurnableERC20(_tokenToMint);\n    tokenToBurn = IMintBurnableERC20(_tokenToBurn);\n    ratio = _ratio;\n    ratioDecimals = _ratioDecimals;\n    existingHolder = _existingHolder;\n  }\n\n  /**\n   * @notice Exchange tokenToMint to tokenToBurn at exchange rate\n   * @param _from the address of the token to be burned from\n   * @param _tokenToBurnAmount the amount of tokenToBurn\n   */\n  function exchange(address _from, uint256 _tokenToBurnAmount) external onlyOwner {\n    tokenToBurn.burn(_from, _tokenToBurnAmount);\n    uint256 tokenToMintAmount = _tokenToBurnAmount.mul(ratio).div(10**ratioDecimals);\n    tokenToMint.mint(_from, tokenToMintAmount);\n  }\n\n  /**\n   * @notice Exchange all tokenToMint to tokenToBurn at exchange rate\n   * @param _from the address of the token to be burned from\n   */\n  function exchangeAll(address _from) external onlyOwner {\n    uint256 tokenToBurnAmount = tokenToBurn.balanceOf(_from);\n    tokenToBurn.burn(_from, tokenToBurnAmount);\n    uint256 tokenToMintAmount = tokenToBurnAmount.mul(ratio).div(10**ratioDecimals);\n    tokenToMint.mint(_from, tokenToMintAmount);\n  }\n\n  /**\n   * @notice Exchange tokenToMint to tokenToBurn at exchange rate with existing holder\n   * @param _from the address of the token to be burned from\n   * @param _tokenToBurnAmount the amount of tokenToBurn\n   */\n  function exchangeFromExistingHolder(address _from, uint256 _tokenToBurnAmount)\n    external\n    onlyOwner\n  {\n    require(\n      _from != existingHolder,\n      \"the address from the existing holder is the same as fromAddress\"\n    );\n    tokenToBurn.burn(_from, _tokenToBurnAmount);\n    uint256 tokenToMintAmount = _tokenToBurnAmount.mul(ratio).div(10**ratioDecimals);\n    tokenToMint.mint(_from, tokenToMintAmount);\n    tokenToMint.burn(existingHolder, tokenToMintAmount);\n  }\n\n  /**\n   * @notice Change tokenToMint address\n   * @param _tokenToMintAddress the address to change to\n   */\n  function changeAddressOfTokenToMint(address _tokenToMintAddress) external onlyOwner {\n    tokenToMint = IMintBurnableERC20(_tokenToMintAddress);\n  }\n\n  /**\n   * @notice Change tokenToBurn address\n   * @param _tokenToBurnAddress the address to change to\n   */\n  function changeAddressOfTokenToBurn(address _tokenToBurnAddress) external onlyOwner {\n    tokenToBurn = IMintBurnableERC20(_tokenToBurnAddress);\n  }\n\n  /**\n   * @notice Change tokenToBurn address\n   * @param _existingHolder the address of existing holder\n   */\n  function changeAddressOfExistingHolder(address _existingHolder) external onlyOwner {\n    existingHolder = _existingHolder;\n  }\n\n  /**\n   * @notice Change Ratio\n   * @param _ratio the ratio with decimals\n   */\n  function setRatio(uint256 _ratio) external onlyOwner {\n    ratio = _ratio;\n  }\n\n  /**\n   * @notice Change Ratio Decimals\n   * @param _ratioDecimals the ratio decimals\n   */\n  function setRatioDecimals(uint256 _ratioDecimals) external onlyOwner {\n    ratioDecimals = _ratioDecimals;\n  }\n}\n"
    },
    "contracts/alloyx/AlloyxTokenDURA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"./interfaces/IMintBurnableERC20.sol\";\nimport \"./AdminUpgradeable.sol\";\n\ncontract AlloyxTokenDURA is ERC20Upgradeable, AdminUpgradeable {\n  function initialize() public initializer {\n    __AdminUpgradeable_init(msg.sender);\n    __ERC20_init(\"Duralumin\", \"DURA\");\n  }\n\n  function mint(address _account, uint256 _amount) external onlyAdmin returns (bool) {\n    _mint(_account, _amount);\n    return true;\n  }\n\n  function burn(address _account, uint256 _amount) external onlyAdmin returns (bool) {\n    _burn(_account, _amount);\n    return true;\n  }\n\n  function contractName() external pure returns (string memory) {\n    return \"AlloyxTokenDura\";\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/alloyx/AlloyxTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"./interfaces/IAlloyxTreasury.sol\";\nimport \"./ConfigHelper.sol\";\nimport \"./AlloyxConfig.sol\";\nimport \"./AdminUpgradeable.sol\";\n\n/**\n * @title AlloyxTreasury\n * @notice This treasury contains all the assets and methods to move or approve tokens, keeps track of all fees and methods to extract fee\n * @author AlloyX\n */\ncontract AlloyxTreasury is IAlloyxTreasury, ERC721HolderUpgradeable, AdminUpgradeable {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  using SafeMath for uint256;\n\n  AlloyxConfig public config;\n  using ConfigHelper for AlloyxConfig;\n\n  uint256 public earningGfiFee;\n  uint256 public repaymentFee;\n  uint256 public redemptionFee;\n  uint256 public duraToFiduFee;\n\n  event AlloyxConfigUpdated(address indexed who, address configAddress);\n\n  function initialize(address _configAddress) public initializer {\n    __ERC721Holder_init();\n    __AdminUpgradeable_init(msg.sender);\n    config = AlloyxConfig(_configAddress);\n  }\n\n  function updateConfig() external onlyAdmin {\n    config = AlloyxConfig(config.configAddress());\n    emit AlloyxConfigUpdated(msg.sender, address(config));\n  }\n\n  function getAllUsdcFees() public view override returns (uint256) {\n    return repaymentFee.add(redemptionFee).add(duraToFiduFee);\n  }\n\n  function getAllGfiFees() public view override returns (uint256) {\n    return earningGfiFee;\n  }\n\n  function addEarningGfiFee(uint256 _amount) external override onlyAdmin {\n    earningGfiFee += _amount;\n  }\n\n  function addRepaymentFee(uint256 _amount) external override onlyAdmin {\n    repaymentFee += _amount;\n  }\n\n  function addRedemptionFee(uint256 _amount) external override onlyAdmin {\n    redemptionFee += _amount;\n  }\n\n  function addDuraToFiduFee(uint256 _amount) external override onlyAdmin {\n    duraToFiduFee += _amount;\n  }\n\n  /**\n   * @notice Transfer certain amount token of certain address to some other account\n   * @param _account the address to transfer\n   * @param _amount the amount to transfer\n   * @param _tokenAddress the token address to transfer\n   */\n  function transferERC20(\n    address _tokenAddress,\n    address _account,\n    uint256 _amount\n  ) public override onlyAdmin {\n    IERC20Upgradeable(_tokenAddress).safeTransfer(_account, _amount);\n  }\n\n  /**\n   * @notice Transfer certain amount token of certain address to some other account\n   * @param _account the address to transfer\n   * @param _tokenId the token ID to transfer\n   * @param _tokenAddress the token address to transfer\n   */\n  function transferERC721(\n    address _tokenAddress,\n    address _account,\n    uint256 _tokenId\n  ) public override onlyAdmin {\n    IERC721(_tokenAddress).safeTransferFrom(address(this), _account, _tokenId);\n  }\n\n  /**\n   * @notice USDC fees including repaymentFee,redemptionFee,duraToFiduFee\n   * @param _to the address to transfer tokens to\n   */\n  function transferAllUsdcFees(address _to) external onlyAdmin {\n    transferERC20(config.usdcAddress(), _to, getAllUsdcFees());\n  }\n\n  /**\n   * @notice Gfi fees including earningGfiFee\n   * @param _to the address to transfer tokens to\n   */\n  function transferAllGfiFees(address _to) external onlyAdmin {\n    transferERC20(config.gfiAddress(), _to, earningGfiFee);\n  }\n\n  /**\n   * @notice Approve certain amount token of certain address to some other account\n   * @param _account the address to approve\n   * @param _amount the amount to approve\n   * @param _tokenAddress the token address to approve\n   */\n  function approveERC20(\n    address _tokenAddress,\n    address _account,\n    uint256 _amount\n  ) external override onlyAdmin {\n    IERC20Upgradeable(_tokenAddress).approve(_account, _amount);\n  }\n\n  /**\n   * @notice Approve certain amount token of certain address to some other account\n   * @param _account the address to approve\n   * @param _tokenId the token ID to transfer\n   * @param _tokenAddress the token address to approve\n   */\n  function approveERC721(\n    address _tokenAddress,\n    address _account,\n    uint256 _tokenId\n  ) external override onlyAdmin {\n    IERC721(_tokenAddress).approve(_account, _tokenId);\n  }\n\n  /**\n   * @notice Migrate certain ERC20 to an address\n   * @param _tokenAddress the token address to migrate\n   * @param _to the address to transfer tokens to\n   */\n  function migrateERC20(address _tokenAddress, address _to) external onlyAdmin {\n    uint256 balance = IERC20Upgradeable(_tokenAddress).balanceOf(address(this));\n    IERC20Upgradeable(_tokenAddress).safeTransfer(_to, balance);\n  }\n\n  /**\n   * @notice Migrate all Pooltokens to an address\n   * @param _tokenAddress the address of the ERC721Enumerable\n   * @param _toAddress the address to transfer tokens to\n   */\n  function migrateAllERC721Enumerable(address _tokenAddress, address _toAddress)\n    external\n    onlyAdmin\n  {\n    uint256[] memory tokenIds = getERC721EnumerableIdsOf(_tokenAddress, address(this));\n    for (uint256 i = 0; i < tokenIds.length; i++) {\n      transferERC721(_tokenAddress, _toAddress, tokenIds[i]);\n    }\n  }\n\n  /**\n   * @notice Get the IDs of Pooltokens of an addresss\n   * @param _tokenAddress the address of the ERC721Enumerable\n   * @param _owner the address to get IDs of\n   */\n  function getERC721EnumerableIdsOf(address _tokenAddress, address _owner)\n    internal\n    view\n    returns (uint256[] memory)\n  {\n    uint256 count = IERC721Enumerable(_tokenAddress).balanceOf(_owner);\n    uint256[] memory ids = new uint256[](count);\n    for (uint256 i = 0; i < count; i++) {\n      ids[i] = IERC721Enumerable(_tokenAddress).tokenOfOwnerByIndex(_owner, i);\n    }\n    return ids;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/goldfinch/protocol/core/PoolTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"../../interfaces/ITranchedPool.sol\";\nimport \"../../interfaces/IPoolTokens.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\n/**\n * @title PoolTokens\n * @notice PoolTokens is an ERC721 compliant contract, which can represent\n *  junior tranche or senior tranche shares of any of the borrower pools.\n * @author Goldfinch\n */\n\ncontract PoolTokens is ERC721Enumerable, IPoolTokens {\n  struct PoolInfo {\n    uint256 totalMinted;\n    uint256 totalPrincipalRedeemed;\n    bool created;\n  }\n\n  uint256 lastTokenId = 0;\n\n  // tokenId => tokenInfo\n  mapping(uint256 => TokenInfo) public tokens;\n  // poolAddress => poolInfo\n  mapping(address => PoolInfo) public pools;\n\n  address poolAddress;\n\n  constructor(address _poolAddress) ERC721(\"PoolTokens\", \"PTN\") {\n    poolAddress = _poolAddress;\n  }\n\n  /**\n   * @notice Called by pool to create a debt position in a particular tranche and amount\n   * @param params Struct containing the tranche and the amount\n   * @param to The address that should own the position\n   * @return tokenId The token ID (auto-incrementing integer across all pools)\n   */\n  function mint(MintParams calldata params, address to)\n    external\n    override\n    returns (uint256 tokenId)\n  {\n    return self_mint(params, to, lastTokenId + 1);\n  }\n\n  function self_mint(\n    MintParams calldata params,\n    address to,\n    uint256 tokenId\n  ) public returns (uint256 tokenIdReturn) {\n    tokenId = createToken(params, poolAddress, tokenId);\n    _mint(to, tokenId);\n    lastTokenId = tokenId;\n    return tokenId;\n  }\n\n  /**\n   * @notice Updates a token to reflect the principal and interest amounts that have been redeemed.\n   * @param tokenId The token id to update (must be owned by the pool calling this function)\n   * @param principalRedeemed The incremental amount of principal redeemed (cannot be more than principal deposited)\n   * @param interestRedeemed The incremental amount of interest redeemed\n   */\n  function redeem(\n    uint256 tokenId,\n    uint256 principalRedeemed,\n    uint256 interestRedeemed\n  ) external override {}\n\n  /**\n   * @dev Burns a specific ERC721 token, and removes the data from our mappings\n   * @param tokenId uint256 id of the ERC721 token to be burned.\n   */\n  function burn(uint256 tokenId) external virtual override {}\n\n  function getTokenInfo(uint256 tokenId) external view virtual override returns (TokenInfo memory) {\n    return tokens[tokenId];\n  }\n\n  function setPoolAddress(address _poolAddress) external {\n    poolAddress = _poolAddress;\n  }\n\n  /**\n   * @notice Called by the GoldfinchFactory to register the pool as a valid pool. Only valid pools can mint/redeem\n   * tokens\n   * @param newPool The address of the newly created pool\n   */\n  function onPoolCreated(address newPool) external override {\n    pools[newPool].created = true;\n  }\n\n  /**\n   * @notice Returns a boolean representing whether the spender is the owner or the approved spender of the token\n   * @param spender The address to check\n   * @param tokenId The token id to check for\n   * @return True if approved to redeem/transfer/burn the token, false if not\n   */\n  function isApprovedOrOwner(address spender, uint256 tokenId)\n    external\n    view\n    override\n    returns (bool)\n  {\n    return _isApprovedOrOwner(spender, tokenId);\n  }\n\n  function validPool(address sender) public view virtual override returns (bool) {\n    return true;\n  }\n\n  function createToken(\n    MintParams calldata params,\n    address _poolAddress,\n    uint256 tokenId\n  ) internal returns (uint256 tokenIdReturn) {\n    tokens[tokenId] = TokenInfo({\n      pool: _poolAddress,\n      tranche: params.tranche,\n      principalAmount: params.principalAmount,\n      principalRedeemed: 0,\n      interestRedeemed: 0\n    });\n    return tokenId;\n  }\n\n  function _getTokenInfo(uint256 tokenId) internal view returns (TokenInfo memory) {\n    return tokens[tokenId];\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "contracts/alloyx/test/MockJnr.sol": {
      "content": "// contracts/GameItem.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract MockJnr is ERC721URIStorage {\n  using Counters for Counters.Counter;\n  Counters.Counter private _tokenIds;\n\n  constructor() ERC721(\"MOCK_JUNIOR\", \"MKJR\") {}\n\n  function awardItem(address player, string memory tokenURI) public returns (uint256) {\n    _tokenIds.increment();\n\n    uint256 newItemId = _tokenIds.current();\n    _mint(player, newItemId);\n    _setTokenURI(newItemId, tokenURI);\n\n    return newItemId;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/goldfinch/protocol/core/UniqueIdentity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n\n/**\n * @title UniqueIdentity\n * @notice UniqueIdentity is an ERC1155-compliant contract for representing\n * the identity verification status of addresses.\n * @author Goldfinch\n */\n\ncontract UniqueIdentity is ERC1155 {\n  bytes32 public constant SIGNER_ROLE = keccak256(\"SIGNER_ROLE\");\n\n  uint256 public constant ID_TYPE_0 = 0;\n  uint256 public constant ID_TYPE_1 = 1;\n  uint256 public constant ID_TYPE_2 = 2;\n  uint256 public constant ID_TYPE_3 = 3;\n  uint256 public constant ID_TYPE_4 = 4;\n  uint256 public constant ID_TYPE_5 = 5;\n  uint256 public constant ID_TYPE_6 = 6;\n  uint256 public constant ID_TYPE_7 = 7;\n  uint256 public constant ID_TYPE_8 = 8;\n  uint256 public constant ID_TYPE_9 = 9;\n  uint256 public constant ID_TYPE_10 = 10;\n\n  constructor() ERC1155(\"UniqueIdentity\") {}\n\n  /**\n   * @dev Gets the token name.\n   * @return string representing the token name\n   */\n  function name() public pure returns (string memory) {\n    return \"Unique Identity\";\n  }\n\n  /**\n   * @dev Gets the token symbol.\n   * @return string representing the token symbol\n   */\n  function symbol() public pure returns (string memory) {\n    return \"UID\";\n  }\n\n  function mint(uint256 id) public payable {\n    _mint(_msgSender(), id, 1, \"\");\n  }\n}\n"
    },
    "contracts/alloyx/test/USDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract USDC is ERC20, Ownable {\n  constructor() ERC20(\"USDC\", \"USDC\") {}\n\n  function mint(address account, uint256 amount) external onlyOwner returns (bool) {\n    _mint(account, amount);\n    return true;\n  }\n\n  function burn(address account, uint256 amount) external onlyOwner returns (bool) {\n    _burn(account, amount);\n    return true;\n  }\n\n  function usdc() external returns (bool) {\n    return true;\n  }\n\n  function decimals() public view override returns (uint8) {\n    return 6;\n  }\n}\n"
    },
    "contracts/alloyx/test/UID.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract UID is ERC1155, Ownable {\n  constructor() ERC1155(\"UID\") {}\n}\n"
    },
    "contracts/alloyx/test/TokenToMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TokenToMint is ERC20, Ownable {\n  constructor() ERC20(\"TokenToMint\", \"TokenToMint\") {}\n\n  function mint(address account, uint256 amount) external onlyOwner returns (bool) {\n    _mint(account, amount);\n    return true;\n  }\n\n  function burn(address account, uint256 amount) external onlyOwner returns (bool) {\n    _burn(account, amount);\n    return true;\n  }\n\n  function contractName() external pure returns (string memory) {\n    return \"TokenToMint\";\n  }\n}\n"
    },
    "contracts/alloyx/test/TokenToBurn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TokenToBurn is ERC20, Ownable {\n  constructor() ERC20(\"TokenToBurn\", \"TokenToBurn\") {}\n\n  function mint(address account, uint256 amount) external onlyOwner returns (bool) {\n    _mint(account, amount);\n    return true;\n  }\n\n  function burn(address account, uint256 amount) external onlyOwner returns (bool) {\n    _burn(account, amount);\n    return true;\n  }\n\n  function contractName() external pure returns (string memory) {\n    return \"TokenToBurn\";\n  }\n}\n"
    },
    "contracts/alloyx/test/GFI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract GFI is ERC20, Ownable {\n  constructor() ERC20(\"GFI\", \"GFI\") {}\n\n  function mint(address _account, uint256 _amount) external onlyOwner returns (bool) {\n    _mint(_account, _amount);\n    return true;\n  }\n\n  function burn(address _account, uint256 _amount) external onlyOwner returns (bool) {\n    _burn(_account, _amount);\n    return true;\n  }\n\n  function contractName() external returns (string memory) {\n    return \"GFI\";\n  }\n}\n"
    },
    "contracts/alloyx/SortedGoldfinchTranches.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title SortedGoldfinchTranches\n * @notice A editable sorted list of tranch pool addresses according to score\n * @author AlloyX\n */\ncontract SortedGoldfinchTranches is Ownable {\n  mapping(address => uint256) public scores;\n  mapping(address => address) _nextTranches;\n  uint256 public listSize;\n  address constant GUARD = address(1);\n\n  constructor() public {\n    _nextTranches[GUARD] = GUARD;\n  }\n\n  /**\n   * @notice A method to add a tranch with a score\n   * @param tranch the address of the tranch pool address\n   * @param score the score of the tranch pool address\n   */\n  function addTranch(address tranch, uint256 score) public {\n    require(_nextTranches[tranch] == address(0));\n    address index = _findIndex(score);\n    scores[tranch] = score;\n    _nextTranches[tranch] = _nextTranches[index];\n    _nextTranches[index] = tranch;\n    listSize++;\n  }\n\n  /**\n   * @notice A method to increase the score of a tranch pool\n   * @param tranch the address of the tranch pool address\n   * @param score the score of the tranch pool address to increase by\n   */\n  function increaseScore(address tranch, uint256 score) public {\n    updateScore(tranch, scores[tranch] + score);\n  }\n\n  /**\n   * @notice A method to reduce the score of a tranch pool\n   * @param tranch the address of the tranch pool address\n   * @param score the score of the tranch pool address to reduce by\n   */\n  function reduceScore(address tranch, uint256 score) public {\n    updateScore(tranch, scores[tranch] - score);\n  }\n\n  /**\n   * @notice A method to update the score of a tranch pool\n   * @param tranch the address of the tranch pool address\n   * @param newScore the score of the tranch pool address to update to\n   */\n  function updateScore(address tranch, uint256 newScore) public {\n    require(_nextTranches[tranch] != address(0));\n    address prevTranch = _findPrevTranch(tranch);\n    address nextTranch = _nextTranches[tranch];\n    if (_verifyIndex(prevTranch, newScore, nextTranch)) {\n      scores[tranch] = newScore;\n    } else {\n      removeTranch(tranch);\n      addTranch(tranch, newScore);\n    }\n  }\n\n  /**\n   * @notice A method to remove the tranch pool address\n   * @param tranch the address of the tranch pool address\n   */\n  function removeTranch(address tranch) public {\n    require(_nextTranches[tranch] != address(0));\n    address prevTranch = _findPrevTranch(tranch);\n    _nextTranches[prevTranch] = _nextTranches[tranch];\n    _nextTranches[tranch] = address(0);\n    scores[tranch] = 0;\n    listSize--;\n  }\n\n  /**\n   * @notice A method to get the top k tranch pools\n   * @param k the top k tranch pools\n   */\n  function getTop(uint256 k) public view returns (address[] memory) {\n    require(k <= listSize);\n    address[] memory tranchLists = new address[](k);\n    address currentAddress = _nextTranches[GUARD];\n    for (uint256 i = 0; i < k; ++i) {\n      tranchLists[i] = currentAddress;\n      currentAddress = _nextTranches[currentAddress];\n    }\n    return tranchLists;\n  }\n\n  /**\n   * @notice A method to verify the next tranch is valid\n   * @param prevTranch the previous tranch pool address\n   * @param newValue the new score\n   * @param nextTranch the next tranch pool address\n   */\n  function _verifyIndex(\n    address prevTranch,\n    uint256 newValue,\n    address nextTranch\n  ) internal view returns (bool) {\n    return\n      (prevTranch == GUARD || scores[prevTranch] >= newValue) &&\n      (nextTranch == GUARD || newValue > scores[nextTranch]);\n  }\n\n  /**\n   * @notice A method to find the index of the newly added score\n   * @param newValue the new score\n   */\n  function _findIndex(uint256 newValue) internal view returns (address) {\n    address candidateAddress = GUARD;\n    while (true) {\n      if (_verifyIndex(candidateAddress, newValue, _nextTranches[candidateAddress]))\n        return candidateAddress;\n      candidateAddress = _nextTranches[candidateAddress];\n    }\n    return address(0);\n  }\n\n  /**\n   * @notice A method to tell if the previous tranch is ahead of current tranch\n   * @param tranch the current tranch pool\n   * @param prevTranch the previous tranch pool\n   */\n  function _isPrevTranch(address tranch, address prevTranch) internal view returns (bool) {\n    return _nextTranches[prevTranch] == tranch;\n  }\n\n  /**\n   * @notice A method to find the previous tranch pool\n   * @param tranch the current tranch pool\n   */\n  function _findPrevTranch(address tranch) internal view returns (address) {\n    address currentAddress = GUARD;\n    while (_nextTranches[currentAddress] != GUARD) {\n      if (_isPrevTranch(tranch, currentAddress)) return currentAddress;\n      currentAddress = _nextTranches[currentAddress];\n    }\n    return address(0);\n  }\n}\n"
    },
    "contracts/alloyx/AlloyxWhitelist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"./interfaces/IAlloyxWhitelist.sol\";\n\n/**\n * @title AlloyxWhitelist\n * @author AlloyX\n */\ncontract AlloyxWhitelist is Ownable, IAlloyxWhitelist {\n  mapping(address => bool) whitelistedAddresses;\n  IERC1155 private uidToken;\n  event ChangeAddress(string _field, address _address);\n\n  constructor(address _uidAddress) public {\n    uidToken = IERC1155(_uidAddress);\n  }\n\n  /**\n   * @notice If address is whitelisted\n   * @param _address The address to verify.\n   */\n  modifier isWhitelisted(address _address) {\n    require(isUserWhitelisted(_address), \"You need to be whitelisted\");\n    _;\n  }\n\n  /**\n   * @notice If address is not whitelisted\n   * @param _address The address to verify.\n   */\n  modifier notWhitelisted(address _address) {\n    require(!isUserWhitelisted(_address), \"You are whitelisted\");\n    _;\n  }\n\n  /**\n   * @notice If address is not whitelisted by goldfinch(non-US entity or non-US individual)\n   * @param _userAddress The address to verify.\n   */\n  function hasWhitelistedUID(address _userAddress) public view returns (bool) {\n    uint256 balanceForNonUsIndividual = uidToken.balanceOf(_userAddress, 0);\n    uint256 balanceForNonUsEntity = uidToken.balanceOf(_userAddress, 4);\n    return balanceForNonUsIndividual + balanceForNonUsEntity > 0;\n  }\n\n  /**\n   * @notice Add whitelist address\n   * @param _addressToWhitelist The address to whitelist.\n   */\n  function addWhitelistedUser(address _addressToWhitelist)\n    public\n    onlyOwner\n    notWhitelisted(_addressToWhitelist)\n  {\n    whitelistedAddresses[_addressToWhitelist] = true;\n  }\n\n  /**\n   * @notice Remove whitelist address\n   * @param _addressToDeWhitelist The address to de-whitelist.\n   */\n  function removeWhitelistedUser(address _addressToDeWhitelist)\n    public\n    onlyOwner\n    isWhitelisted(_addressToDeWhitelist)\n  {\n    whitelistedAddresses[_addressToDeWhitelist] = false;\n  }\n\n  /**\n   * @notice Check whether user is whitelisted\n   * @param _whitelistedAddress The address to whitelist.\n   */\n  function isUserWhitelisted(address _whitelistedAddress) public view override returns (bool) {\n    return whitelistedAddresses[_whitelistedAddress] || hasWhitelistedUID(_whitelistedAddress);\n  }\n\n  /**\n   * @notice Change UID address\n   * @param _uidAddress the address to change to\n   */\n  function changeUIDAddress(address _uidAddress) external onlyOwner {\n    uidToken = IERC1155(_uidAddress);\n    emit ChangeAddress(\"uidToken\", _uidAddress);\n  }\n}\n"
    },
    "contracts/alloyx/AlloyxExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./interfaces/IAlloyxExchange.sol\";\nimport \"./ConfigHelper.sol\";\nimport \"./AdminUpgradeable.sol\";\nimport \"./AlloyxConfig.sol\";\n\n/**\n * @title AlloyxExchange\n * @notice Contract to maintain the exchange information or key statistics of AlloyxTreasury\n * @author AlloyX\n */\ncontract AlloyxExchange is IAlloyxExchange, AdminUpgradeable {\n  using SafeMath for uint256;\n\n  AlloyxConfig public config;\n  using ConfigHelper for AlloyxConfig;\n  event AlloyxConfigUpdated(address indexed who, address configAddress);\n\n  function initialize(address _configAddress) public initializer {\n    __AdminUpgradeable_init(msg.sender);\n    config = AlloyxConfig(_configAddress);\n  }\n\n  function updateConfig() external onlyAdmin {\n    config = AlloyxConfig(config.configAddress());\n    emit AlloyxConfigUpdated(msg.sender, address(config));\n  }\n\n  /**\n   * @notice Alloy DURA Token Value in terms of USDC\n   */\n  function getTreasuryTotalBalanceInUsdc() public view override returns (uint256) {\n    uint256 totalValue = config\n      .getUSDC()\n      .balanceOf(config.treasuryAddress())\n      .add(getFiduBalanceInUsdc())\n      .add(config.getGoldfinchDesk().getGoldFinchPoolTokenBalanceInUsdc());\n    return totalValue.sub(config.getTreasury().getAllUsdcFees());\n  }\n\n  /**\n   * @notice Convert Alloyx DURA to USDC amount\n   * @param _amount the amount of DURA token to convert to usdc\n   */\n  function alloyxDuraToUsdc(uint256 _amount) public view override returns (uint256) {\n    uint256 alloyDuraTotalSupply = config.getDURA().totalSupply();\n    uint256 totalValue = getTreasuryTotalBalanceInUsdc();\n    return _amount.mul(totalValue).div(alloyDuraTotalSupply);\n  }\n\n  /**\n   * @notice Convert USDC Amount to Alloyx DURA\n   * @param _amount the amount of usdc to convert to DURA token\n   */\n  function usdcToAlloyxDura(uint256 _amount) public view override returns (uint256) {\n    uint256 alloyDuraTotalSupply = config.getDURA().totalSupply();\n    uint256 totalValue = getTreasuryTotalBalanceInUsdc();\n    return _amount.mul(alloyDuraTotalSupply).div(totalValue);\n  }\n\n  /**\n   * @notice Fidu Value in Vault in term of USDC\n   */\n  function getFiduBalanceInUsdc() public view returns (uint256) {\n    return\n      fiduToUsdc(\n        config\n          .getFIDU()\n          .balanceOf(config.treasuryAddress())\n          .mul(config.getSeniorPool().sharePrice())\n          .div(fiduMantissa())\n      );\n  }\n\n  /**\n   * @notice Convert FIDU coins to USDC\n   */\n  function fiduToUsdc(uint256 amount) internal pure returns (uint256) {\n    return amount.div(fiduMantissa().div(usdcMantissa()));\n  }\n\n  /**\n   * @notice Fidu mantissa with 18 decimals\n   */\n  function fiduMantissa() internal pure returns (uint256) {\n    return uint256(10)**uint256(18);\n  }\n\n  /**\n   * @notice USDC mantissa with 6 decimals\n   */\n  function usdcMantissa() internal pure returns (uint256) {\n    return uint256(10)**uint256(6);\n  }\n}\n"
    },
    "contracts/alloyx/AlloyxTokenCRWN.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"./interfaces/IMintBurnableERC20.sol\";\nimport \"./AdminUpgradeable.sol\";\n\ncontract AlloyxTokenCRWN is ERC20Upgradeable, AdminUpgradeable {\n  function initialize() public initializer {\n    __AdminUpgradeable_init(msg.sender);\n    __ERC20_init(\"Crown Gold\", \"CRWN\");\n  }\n\n  function mint(address _account, uint256 _amount) external onlyAdmin returns (bool) {\n    _mint(_account, _amount);\n    return true;\n  }\n\n  function burn(address _account, uint256 _amount) external onlyAdmin returns (bool) {\n    _burn(_account, _amount);\n    return true;\n  }\n\n  function contractName() external pure returns (string memory) {\n    return \"AlloyxTokenCRWN\";\n  }\n}\n"
    },
    "contracts/alloyx/AlloyxStakeInfo.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./AdminUpgradeable.sol\";\nimport \"./ConfigHelper.sol\";\nimport \"./AlloyxConfig.sol\";\n\n/**\n * @title AlloyxStakeInfo\n * @author AlloyX\n */\ncontract AlloyxStakeInfo is AdminUpgradeable {\n  using SafeMath for uint256;\n  struct StakeInfo {\n    uint256 amount;\n    uint256 since;\n  }\n  AlloyxConfig public config;\n  using ConfigHelper for AlloyxConfig;\n\n  uint256 public totalPastRedeemableReward;\n  address vaultAddress;\n  mapping(address => uint256) private pastRedeemableReward;\n  mapping(address => StakeInfo) private stakesMapping;\n  mapping(address => bool) private stakeholderMap;\n  StakeInfo totalActiveStake;\n\n  event AlloyxConfigUpdated(address indexed who, address configAddress);\n\n  function initialize(address _configAddress) public initializer {\n    __AdminUpgradeable_init(msg.sender);\n    config = AlloyxConfig(_configAddress);\n  }\n\n  function updateConfig() external onlyAdmin {\n    config = AlloyxConfig(config.configAddress());\n    emit AlloyxConfigUpdated(msg.sender, address(config));\n  }\n\n  /**\n   * @notice Check if an address is a stakeholder.\n   * @param _address The address to verify.\n   * @return bool Whether the address is a stakeholder,\n   * and if so its position in the stakeholders array.\n   */\n  function isStakeholder(address _address) public view returns (bool) {\n    return stakeholderMap[_address];\n  }\n\n  /**\n   * @notice Add a stakeholder.\n   * @param _stakeholder The stakeholder to add.\n   */\n  function addStakeholder(address _stakeholder) internal {\n    stakeholderMap[_stakeholder] = true;\n  }\n\n  /**\n   * @notice Remove a stakeholder.\n   * @param _stakeholder The stakeholder to remove.\n   */\n  function removeStakeholder(address _stakeholder) internal {\n    stakeholderMap[_stakeholder] = false;\n  }\n\n  /**\n   * @notice Retrieve the stake for a stakeholder.\n   * @param _stakeholder The stakeholder to retrieve the stake for.\n   * @return Stake The amount staked and the time since when it's staked.\n   */\n  function stakeOf(address _stakeholder) public view returns (StakeInfo memory) {\n    return stakesMapping[_stakeholder];\n  }\n\n  /**\n   * @notice A method for a stakeholder to reset the timestamp of the stake.\n   * @param _stakeholder The stakeholder to retrieve the stake for.\n   */\n  function resetStakeTimestamp(address _stakeholder) internal {\n    if (stakesMapping[_stakeholder].amount == 0) addStakeholder(_stakeholder);\n    addPastRedeemableReward(_stakeholder, stakesMapping[_stakeholder]);\n    stakesMapping[_stakeholder] = StakeInfo(stakesMapping[_stakeholder].amount, block.timestamp);\n  }\n\n  /**\n   * @notice Add stake for a staker\n   * @param _staker The person intending to stake\n   * @param _stake The size of the stake to be created.\n   */\n  function addStake(address _staker, uint256 _stake) public onlyAdmin {\n    if (stakesMapping[_staker].amount == 0) addStakeholder(_staker);\n    addPastRedeemableReward(_staker, stakesMapping[_staker]);\n    stakesMapping[_staker] = StakeInfo(stakesMapping[_staker].amount.add(_stake), block.timestamp);\n    updateTotalStakeInfoAndPastRedeemable(_stake, 0, 0, 0);\n  }\n\n  /**\n   * @notice Remove stake for a staker\n   * @param _staker The person intending to remove stake\n   * @param _stake The size of the stake to be removed.\n   */\n  function removeStake(address _staker, uint256 _stake) public onlyAdmin {\n    require(stakeOf(_staker).amount >= _stake, \"User has insufficient dura coin staked\");\n    if (stakesMapping[_staker].amount == 0) addStakeholder(_staker);\n    addPastRedeemableReward(_staker, stakesMapping[_staker]);\n    stakesMapping[_staker] = StakeInfo(stakesMapping[_staker].amount.sub(_stake), block.timestamp);\n    updateTotalStakeInfoAndPastRedeemable(0, _stake, 0, 0);\n  }\n\n  /**\n   * @notice Add the stake to past redeemable reward\n   * @param _stake the stake to be added into the reward\n   */\n  function addPastRedeemableReward(address _staker, StakeInfo storage _stake) internal {\n    uint256 additionalPastRedeemableReward = calculateRewardFromStake(_stake);\n    pastRedeemableReward[_staker] = pastRedeemableReward[_staker].add(\n      additionalPastRedeemableReward\n    );\n  }\n\n  function updateTotalStakeInfoAndPastRedeemable(\n    uint256 increaseInStake,\n    uint256 decreaseInStake,\n    uint256 increaseInPastRedeemable,\n    uint256 decreaseInPastRedeemable\n  ) internal {\n    uint256 additionalPastRedeemableReward = calculateRewardFromStake(totalActiveStake);\n    totalPastRedeemableReward = totalPastRedeemableReward.add(additionalPastRedeemableReward);\n    totalPastRedeemableReward = totalPastRedeemableReward.add(increaseInPastRedeemable).sub(\n      decreaseInPastRedeemable\n    );\n    totalActiveStake = StakeInfo(\n      totalActiveStake.amount.add(increaseInStake).sub(decreaseInStake),\n      block.timestamp\n    );\n  }\n\n  /**\n   * @notice A method for a stakeholder to clear a stake with some leftover reward\n   * @param _staker the address of the staker\n   * @param _reward the leftover reward the staker owns\n   */\n  function resetStakeTimestampWithRewardLeft(address _staker, uint256 _reward) public onlyAdmin {\n    resetStakeTimestamp(_staker);\n    adjustTotalStakeWithRewardLeft(_staker, _reward);\n    pastRedeemableReward[_staker] = _reward;\n  }\n\n  /**\n   * @notice Adjust total stake variables with leftover reward\n   * @param _reward the leftover reward the staker owns\n   */\n  function adjustTotalStakeWithRewardLeft(address _staker, uint256 _reward) internal {\n    uint256 increaseInPastReward = 0;\n    uint256 decreaseInPastReward = 0;\n    if (pastRedeemableReward[_staker] >= _reward) {\n      decreaseInPastReward = pastRedeemableReward[_staker].sub(_reward);\n    } else {\n      increaseInPastReward = _reward.sub(pastRedeemableReward[_staker]);\n    }\n    updateTotalStakeInfoAndPastRedeemable(0, 0, increaseInPastReward, decreaseInPastReward);\n  }\n\n  /**\n   * @notice Calculate reward from the stake info\n   * @param _stake the stake info to calculate reward based on\n   */\n  function calculateRewardFromStake(StakeInfo memory _stake) internal view returns (uint256) {\n    return\n      _stake\n        .amount\n        .mul(block.timestamp.sub(_stake.since))\n        .mul(config.getPercentageRewardPerYear())\n        .div(100)\n        .div(365 days);\n  }\n\n  /**\n   * @notice Claimable CRWN token amount of an address\n   * @param _receiver the address of receiver\n   */\n  function claimableCRWNToken(address _receiver) public view returns (uint256) {\n    StakeInfo memory stakeValue = stakeOf(_receiver);\n    return pastRedeemableReward[_receiver] + calculateRewardFromStake(stakeValue);\n  }\n\n  /**\n   * @notice Total claimable CRWN tokens of all stakeholders\n   */\n  function totalClaimableCRWNToken() public view returns (uint256) {\n    return calculateRewardFromStake(totalActiveStake) + totalPastRedeemableReward;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}
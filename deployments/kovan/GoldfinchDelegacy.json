{
  "address": "0x976e6c56Ac3c4E9555E0291649FF27EC0579E263",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fiduCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gfiCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seniorPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_coreVaultAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        }
      ],
      "name": "changePoolTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seniorPool",
          "type": "address"
        }
      ],
      "name": "changeSeniorPoolAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "name": "changeVaultAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentageFee",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earningGfiFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGFIBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGoldfinchDelegacyBalanceInUSDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "getJuniorTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDCBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "isValidPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        }
      ],
      "name": "migrateAllGoldfinchPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrateERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "migrateGoldfinchPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "payUsdc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tranche",
          "type": "uint256"
        }
      ],
      "name": "purchaseJuniorToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "purchaseSeniorTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repaymentFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_percentageBronzeRepayment",
          "type": "uint256"
        }
      ],
      "name": "sellJuniorToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentageBronzeRepayment",
          "type": "uint256"
        }
      ],
      "name": "sellSeniorTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferEarningGfiFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferRepaymentFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "validatesTokenToDepositAndGetPurchasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x090154b8bb795c4f626a1a3ce4856553d024543ca6bb8b02a580e243f8bf128b",
  "receipt": {
    "to": null,
    "from": "0xd988EB2777ec4d844ced75f68148A08310bEFc76",
    "contractAddress": "0x976e6c56Ac3c4E9555E0291649FF27EC0579E263",
    "transactionIndex": 2,
    "gasUsed": "2831962",
    "logsBloom": "0x
    "blockHash": "0xf74adad71590ec18848c0c39014bb852b1ad420c0beb030619e710c3def9058e",
    "transactionHash": "0x090154b8bb795c4f626a1a3ce4856553d024543ca6bb8b02a580e243f8bf128b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 30999610,
        "transactionHash": "0x090154b8bb795c4f626a1a3ce4856553d024543ca6bb8b02a580e243f8bf128b",
        "address": "0x976e6c56Ac3c4E9555E0291649FF27EC0579E263",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d988eb2777ec4d844ced75f68148a08310befc76"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xf74adad71590ec18848c0c39014bb852b1ad420c0beb030619e710c3def9058e"
      }
    ],
    "blockNumber": 30999610,
    "cumulativeGasUsed": "2888320",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67F3693E36F7a0b4E88b7fDD7227e26188913406",
    "0x539B954C3bD20933609639cA1a1bAFF7F038884e",
    "0x826d71d85Ac39568755Bb2a98e7101831502D6C2",
    "0xccCe42C507742fdc93277e5ec44965F41Cb8B1bD",
    "0x2d6D7086f61Dc78eeDFEa5bBBf7aE806A8517706",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "db08b62b14234d1de3753dca8e7e1a75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fiduCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gfiCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seniorPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coreVaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"changePoolTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seniorPool\",\"type\":\"address\"}],\"name\":\"changeSeniorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"changeVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageFee\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earningGfiFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGFIBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGoldfinchDelegacyBalanceInUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getJuniorTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDCBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"migrateAllGoldfinchPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"migrateGoldfinchPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"}],\"name\":\"purchaseJuniorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repaymentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentageBronzeRepayment\",\"type\":\"uint256\"}],\"name\":\"sellJuniorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageBronzeRepayment\",\"type\":\"uint256\"}],\"name\":\"sellSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferEarningGfiFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferRepaymentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"validatesTokenToDepositAndGetPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AlloyX\",\"kind\":\"dev\",\"methods\":{\"approve(address,address,uint256)\":{\"params\":{\"_account\":\"the address to approve\",\"_amount\":\"the amount to approve\",\"_tokenAddress\":\"the token address to approve\"}},\"changePoolTokenAddress(address)\":{\"params\":{\"_poolToken\":\"The address to change to\"}},\"changeSeniorPoolAddress(address)\":{\"params\":{\"_seniorPool\":\"The address to change to\"}},\"changeVaultAddress(address)\":{\"params\":{\"_vaultAddress\":\"The address to change to\"}},\"claimReward(address,uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"the amount of silver tokens used to claim\",\"_percentageFee\":\"the earning fee for redeeming silver token in percentage in terms of GFI\",\"_rewardee\":\"the address of rewardee\",\"_totalSupply\":\"total claimable and claimed silver tokens of all stakeholders\"}},\"getJuniorTokenValue(uint256)\":{\"params\":{\"_tokenID\":\"The backer NFT id\"}},\"isValidPool(uint256)\":{\"params\":{\"_tokenID\":\"The backer NFT id\"}},\"migrateAllGoldfinchPoolTokens(address)\":{\"params\":{\"_toAddress\":\"the address to transfer tokens to\"}},\"migrateERC20(address,address)\":{\"params\":{\"_to\":\"the address to transfer tokens to\",\"_tokenAddress\":\"the token address to migrate\"}},\"migrateGoldfinchPoolTokens(address,uint256)\":{\"params\":{\"_toAddress\":\"the address to transfer tokens to\",\"_tokenId\":\"the token ID to transfer\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payUsdc(address,uint256)\":{\"params\":{\"_amount\":\"the amount to pay\",\"_to\":\"the address to pay to\"}},\"purchaseJuniorToken(uint256,address,uint256)\":{\"params\":{\"_amount\":\"the amount of usdc to purchase by\",\"_poolAddress\":\"the pool address to buy from\",\"_tranche\":\"the tranch id\"}},\"purchaseSeniorTokens(uint256)\":{\"params\":{\"_amount\":\"the amount of USDC to purchase by\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sellJuniorToken(uint256,uint256,address,uint256)\":{\"params\":{\"_amount\":\"the amount to withdraw\",\"_percentageBronzeRepayment\":\"the repayment fee for bronze token in percentage\",\"_poolAddress\":\"the pool address to withdraw from\",\"_tokenId\":\"the ID of token to sell\"}},\"sellSeniorTokens(uint256,uint256)\":{\"params\":{\"_amount\":\"the amount of fidu to sell\",\"_percentageBronzeRepayment\":\"the repayment fee for bronze token in percentage\"}},\"transferEarningGfiFee(address)\":{\"params\":{\"_to\":\"the address to transfer tokens to\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferRepaymentFee(address)\":{\"params\":{\"_to\":\"the address to transfer tokens to\"}},\"validatesTokenToDepositAndGetPurchasePrice(address,address,uint256)\":{\"params\":{\"_depositor\":\"the person to deposit\",\"_tokenAddress\":\"the Pooltoken address\",\"_tokenID\":\"the ID of the Pooltoken\"}}},\"title\":\"Goldfinch Delegacy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,address,uint256)\":{\"notice\":\"Approve certain amount token of certain address to some other account\"},\"changePoolTokenAddress(address)\":{\"notice\":\"Change the pool token address\"},\"changeSeniorPoolAddress(address)\":{\"notice\":\"Change the senior pool address\"},\"changeVaultAddress(address)\":{\"notice\":\"Change the vault address\"},\"claimReward(address,uint256,uint256,uint256)\":{\"notice\":\"Claim certain amount of reward token based on alloy silver token, the method will burn the silver token of the amount of message sender, and transfer reward token to message sender\"},\"destroy()\":{\"notice\":\"Destroy the contract\"},\"getGFIBalance()\":{\"notice\":\"GFI Balance in Vault\"},\"getGoldfinchDelegacyBalanceInUSDC()\":{\"notice\":\"Delegacy Value in terms of USDC\"},\"getJuniorTokenValue(uint256)\":{\"notice\":\"Using the Goldfinch contracts, read the principal, redeemed and redeemable values\"},\"getUSDCBalance()\":{\"notice\":\"USDC Value in Vault\"},\"isValidPool(uint256)\":{\"notice\":\"Using the PoolTokens interface, check if this is a valid pool\"},\"migrateAllGoldfinchPoolTokens(address)\":{\"notice\":\"Migrate all Pooltokens to an address\"},\"migrateERC20(address,address)\":{\"notice\":\"Migrate certain ERC20 to an address\"},\"migrateGoldfinchPoolTokens(address,uint256)\":{\"notice\":\"Migrate Pooltoken of ID to an address\"},\"payUsdc(address,uint256)\":{\"notice\":\"Pay USDC tokens to account\"},\"purchaseJuniorToken(uint256,address,uint256)\":{\"notice\":\"Purchase junior token through this delegacy to get pooltoken inside this delegacy\"},\"purchaseSeniorTokens(uint256)\":{\"notice\":\"Purchase senior token through this delegacy to get FIDU inside this delegacy\"},\"sellJuniorToken(uint256,uint256,address,uint256)\":{\"notice\":\"Sell junior token through this delegacy to get repayments\"},\"sellSeniorTokens(uint256,uint256)\":{\"notice\":\"sell senior token through delegacy to redeem fidu\"},\"transferEarningGfiFee(address)\":{\"notice\":\"Transfer earning gfi fee to some other address\"},\"transferRepaymentFee(address)\":{\"notice\":\"Transfer repayment fee to some other address\"},\"validatesTokenToDepositAndGetPurchasePrice(address,address,uint256)\":{\"notice\":\"Validates the Pooltoken to be deposited and get the USDC value of the token\"}},\"notice\":\"Middle layer to communicate with goldfinch contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alloyx/GoldfinchDelegacy.sol\":\"GoldfinchDelegacy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/alloyx/GoldfinchDelegacy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"../goldfinch/interfaces/ITranchedPool.sol\\\";\\nimport \\\"../goldfinch/interfaces/ISeniorPool.sol\\\";\\nimport \\\"../goldfinch/interfaces/IPoolTokens.sol\\\";\\nimport \\\"./IGoldfinchDelegacy.sol\\\";\\n\\n/**\\n * @title Goldfinch Delegacy\\n * @notice Middle layer to communicate with goldfinch contracts\\n * @author AlloyX\\n */\\ncontract GoldfinchDelegacy is IGoldfinchDelegacy, ERC721Holder, Ownable {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  IERC20 private usdcCoin;\\n  IERC20 private gfiCoin;\\n  IERC20 private fiduCoin;\\n  IPoolTokens private poolToken;\\n  ISeniorPool private seniorPool;\\n  address private coreVaultAddress;\\n  uint256 public earningGfiFee = 0;\\n  uint256 public repaymentFee = 0;\\n\\n  constructor(\\n    address _usdcCoinAddress,\\n    address _fiduCoinAddress,\\n    address _gfiCoinAddress,\\n    address _poolTokenAddress,\\n    address _seniorPoolAddress,\\n    address _coreVaultAddress\\n  ) {\\n    usdcCoin = IERC20(_usdcCoinAddress);\\n    gfiCoin = IERC20(_gfiCoinAddress);\\n    fiduCoin = IERC20(_fiduCoinAddress);\\n    poolToken = IPoolTokens(_poolTokenAddress);\\n    seniorPool = ISeniorPool(_seniorPoolAddress);\\n    coreVaultAddress = _coreVaultAddress;\\n  }\\n\\n  /**\\n   * @notice If it is called from the vault\\n   */\\n  modifier fromVault() {\\n    require(coreVaultAddress == msg.sender, \\\"The function must be called from vault\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Approve certain amount token of certain address to some other account\\n   * @param _account the address to approve\\n   * @param _amount the amount to approve\\n   * @param _tokenAddress the token address to approve\\n   */\\n  function approve(\\n    address _tokenAddress,\\n    address _account,\\n    uint256 _amount\\n  ) external override fromVault {\\n    IERC20(_tokenAddress).approve(_account, _amount);\\n  }\\n\\n  /**\\n   * @notice Fidu Value in Vault in term of USDC\\n   */\\n  function getFiduBalanceInUSDC() internal view returns (uint256) {\\n    return\\n      fiduToUSDC(\\n        fiduCoin.balanceOf(address(this)).mul(seniorPool.sharePrice()).div(fiduMantissa())\\n      );\\n  }\\n\\n  /**\\n   * @notice USDC Value in Vault\\n   */\\n  function getUSDCBalance() public view returns (uint256) {\\n    return usdcCoin.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @notice GFI Balance in Vault\\n   */\\n  function getGFIBalance() public view returns (uint256) {\\n    return gfiCoin.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @notice Delegacy Value in terms of USDC\\n   */\\n  function getGoldfinchDelegacyBalanceInUSDC() public view override returns (uint256) {\\n    uint256 delegacyValue = getFiduBalanceInUSDC().add(getUSDCBalance()).add(\\n      getGoldFinchPoolTokenBalanceInUSDC()\\n    );\\n    require(delegacyValue >= repaymentFee, \\\"Vault value is less than the repayment fee collected\\\");\\n    return delegacyValue.sub(repaymentFee);\\n  }\\n\\n  /**\\n   * @notice Convert FIDU coins to USDC\\n   */\\n  function fiduToUSDC(uint256 amount) internal pure returns (uint256) {\\n    return amount.div(fiduMantissa().div(usdcMantissa()));\\n  }\\n\\n  /**\\n   * @notice Fidu mantissa with 18 decimals\\n   */\\n  function fiduMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(18);\\n  }\\n\\n  /**\\n   * @notice USDC mantissa with 6 decimals\\n   */\\n  function usdcMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(6);\\n  }\\n\\n  /**\\n   * @notice Change the senior pool address\\n   * @param _seniorPool The address to change to\\n   */\\n  function changeSeniorPoolAddress(address _seniorPool) external onlyOwner {\\n    seniorPool = ISeniorPool(_seniorPool);\\n  }\\n\\n  /**\\n   * @notice Change the pool token address\\n   * @param _poolToken The address to change to\\n   */\\n  function changePoolTokenAddress(address _poolToken) external onlyOwner {\\n    poolToken = IPoolTokens(_poolToken);\\n  }\\n\\n  /**\\n   * @notice Change the vault address\\n   * @param _vaultAddress The address to change to\\n   */\\n  function changeVaultAddress(address _vaultAddress) external onlyOwner {\\n    coreVaultAddress = _vaultAddress;\\n  }\\n\\n  /**\\n   * @notice GoldFinch PoolToken Value in Value in term of USDC\\n   */\\n  function getGoldFinchPoolTokenBalanceInUSDC() internal view returns (uint256) {\\n    uint256 total = 0;\\n    uint256 balance = poolToken.balanceOf(address(this));\\n    for (uint256 i = 0; i < balance; i++) {\\n      total = total.add(getJuniorTokenValue(poolToken.tokenOfOwnerByIndex(address(this), i)));\\n    }\\n    return total;\\n  }\\n\\n  /**\\n   * @notice Using the Goldfinch contracts, read the principal, redeemed and redeemable values\\n   * @param _tokenID The backer NFT id\\n   */\\n  function getJuniorTokenValue(uint256 _tokenID) public view returns (uint256) {\\n    IPoolTokens.TokenInfo memory tokenInfo = poolToken.getTokenInfo(_tokenID);\\n    uint256 principalAmount = tokenInfo.principalAmount;\\n    uint256 totalRedeemed = tokenInfo.principalRedeemed.add(tokenInfo.interestRedeemed);\\n\\n    // now get the redeemable values for the given token\\n    address tranchedPoolAddress = tokenInfo.pool;\\n    ITranchedPool tranchedTokenContract = ITranchedPool(tranchedPoolAddress);\\n    (uint256 interestRedeemable, uint256 principalRedeemable) = tranchedTokenContract\\n      .availableToWithdraw(_tokenID);\\n    uint256 totalRedeemable = interestRedeemable;\\n    // only add principal here if there have been drawdowns otherwise it overstates the value\\n    if (principalRedeemable < principalAmount) {\\n      totalRedeemable.add(principalRedeemable);\\n    }\\n    return principalAmount.sub(totalRedeemed).add(totalRedeemable);\\n  }\\n\\n  /**\\n   * @notice Purchase junior token through this delegacy to get pooltoken inside this delegacy\\n   * @param _amount the amount of usdc to purchase by\\n   * @param _poolAddress the pool address to buy from\\n   * @param _tranche the tranch id\\n   */\\n  function purchaseJuniorToken(\\n    uint256 _amount,\\n    address _poolAddress,\\n    uint256 _tranche\\n  ) external override fromVault {\\n    require(usdcCoin.balanceOf(address(this)) >= _amount, \\\"Vault has insufficent stable coin\\\");\\n    require(_amount > 0, \\\"Must deposit more than zero\\\");\\n    ITranchedPool juniorPool = ITranchedPool(_poolAddress);\\n    juniorPool.deposit(_amount, _tranche);\\n  }\\n\\n  /**\\n   * @notice Sell junior token through this delegacy to get repayments\\n   * @param _tokenId the ID of token to sell\\n   * @param _amount the amount to withdraw\\n   * @param _poolAddress the pool address to withdraw from\\n   * @param _percentageBronzeRepayment the repayment fee for bronze token in percentage\\n   */\\n  function sellJuniorToken(\\n    uint256 _tokenId,\\n    uint256 _amount,\\n    address _poolAddress,\\n    uint256 _percentageBronzeRepayment\\n  ) external override fromVault {\\n    require(fiduCoin.balanceOf(address(this)) >= _amount, \\\"Vault has insufficent fidu coin\\\");\\n    require(_amount > 0, \\\"Must deposit more than zero\\\");\\n    ITranchedPool juniorPool = ITranchedPool(_poolAddress);\\n    (uint256 principal, uint256 interest) = juniorPool.withdraw(_tokenId, _amount);\\n    uint256 fee = principal.add(interest).mul(_percentageBronzeRepayment).div(100);\\n    repaymentFee = repaymentFee.add(fee);\\n  }\\n\\n  /**\\n   * @notice Purchase senior token through this delegacy to get FIDU inside this delegacy\\n   * @param _amount the amount of USDC to purchase by\\n   */\\n  function purchaseSeniorTokens(uint256 _amount) external override fromVault {\\n    require(usdcCoin.balanceOf(address(this)) >= _amount, \\\"Vault has insufficent stable coin\\\");\\n    require(_amount > 0, \\\"Must deposit more than zero\\\");\\n    seniorPool.deposit(_amount);\\n  }\\n\\n  /**\\n   * @notice sell senior token through delegacy to redeem fidu\\n   * @param _amount the amount of fidu to sell\\n   * @param _percentageBronzeRepayment the repayment fee for bronze token in percentage\\n   */\\n  function sellSeniorTokens(uint256 _amount, uint256 _percentageBronzeRepayment)\\n    external\\n    override\\n    fromVault\\n  {\\n    require(fiduCoin.balanceOf(address(this)) >= _amount, \\\"Vault has insufficent fidu coin\\\");\\n    require(_amount > 0, \\\"Must deposit more than zero\\\");\\n    uint256 usdcAmount = seniorPool.withdrawInFidu(_amount);\\n    uint256 fee = usdcAmount.mul(_percentageBronzeRepayment).div(100);\\n    repaymentFee = repaymentFee.add(fee);\\n  }\\n\\n  /**\\n   * @notice Claim certain amount of reward token based on alloy silver token, the method will burn the silver token of\\n   * the amount of message sender, and transfer reward token to message sender\\n   * @param _rewardee the address of rewardee\\n   * @param _amount the amount of silver tokens used to claim\\n   * @param _totalSupply total claimable and claimed silver tokens of all stakeholders\\n   * @param _percentageFee the earning fee for redeeming silver token in percentage in terms of GFI\\n   */\\n  function claimReward(\\n    address _rewardee,\\n    uint256 _amount,\\n    uint256 _totalSupply,\\n    uint256 _percentageFee\\n  ) external override fromVault {\\n    require(\\n      getGFIBalance() >= earningGfiFee,\\n      \\\"The GFI in the delegacy is less than the GFI fee collected\\\"\\n    );\\n    uint256 amountToReward = _amount.mul(getGFIBalance().sub(earningGfiFee)).div(_totalSupply);\\n    uint256 fee = amountToReward.mul(_percentageFee).div(100);\\n    gfiCoin.safeTransfer(_rewardee, amountToReward.sub(fee));\\n    earningGfiFee = earningGfiFee.add(fee);\\n  }\\n\\n  /**\\n   * @notice Validates the Pooltoken to be deposited and get the USDC value of the token\\n   * @param _tokenAddress the Pooltoken address\\n   * @param _depositor the person to deposit\\n   * @param _tokenID the ID of the Pooltoken\\n   */\\n  function validatesTokenToDepositAndGetPurchasePrice(\\n    address _tokenAddress,\\n    address _depositor,\\n    uint256 _tokenID\\n  ) external override fromVault returns (uint256) {\\n    require(_tokenAddress == address(poolToken), \\\"Not Goldfinch Pool Token\\\");\\n    require(isValidPool(_tokenID) == true, \\\"Not a valid pool\\\");\\n    require(IERC721(_tokenAddress).ownerOf(_tokenID) == _depositor, \\\"User does not own this token\\\");\\n    require(\\n      poolToken.getApproved(_tokenID) == msg.sender,\\n      \\\"User has not approved the vault for this token\\\"\\n    );\\n    uint256 purchasePrice = getJuniorTokenValue(_tokenID);\\n    require(purchasePrice > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n    require(\\n      usdcCoin.balanceOf(address(this)) >= purchasePrice,\\n      \\\"The vault does not have sufficient stable coin\\\"\\n    );\\n    return purchasePrice;\\n  }\\n\\n  /**\\n   * @notice Pay USDC tokens to account\\n   * @param _to the address to pay to\\n   * @param _amount the amount to pay\\n   */\\n  function payUsdc(address _to, uint256 _amount) external override fromVault {\\n    usdcCoin.safeTransfer(_to, _amount);\\n  }\\n\\n  /**\\n   * @notice Using the PoolTokens interface, check if this is a valid pool\\n   * @param _tokenID The backer NFT id\\n   */\\n  function isValidPool(uint256 _tokenID) public view returns (bool) {\\n    IPoolTokens.TokenInfo memory tokenInfo = poolToken.getTokenInfo(_tokenID);\\n    address tranchedPool = tokenInfo.pool;\\n    return poolToken.validPool(tranchedPool);\\n  }\\n\\n  /**\\n   * @notice Destroy the contract\\n   */\\n  function destroy() external onlyOwner {\\n    require(usdcCoin.balanceOf(address(this)) == 0, \\\"Balance of stable coin must be 0\\\");\\n    require(fiduCoin.balanceOf(address(this)) == 0, \\\"Balance of Fidu coin must be 0\\\");\\n    require(gfiCoin.balanceOf(address(this)) == 0, \\\"Balance of GFI coin must be 0\\\");\\n    require(poolToken.balanceOf(address(this)) == 0, \\\"Pool token balance must be 0\\\");\\n\\n    address payable addr = payable(address(owner()));\\n    selfdestruct(addr);\\n  }\\n\\n  /**\\n   * @notice Get the IDs of Pooltokens of an addresss\\n   * @param _owner the address to get IDs of\\n   */\\n  function getGoldfinchTokenIdsOf(address _owner) internal view returns (uint256[] memory) {\\n    uint256 count = poolToken.balanceOf(_owner);\\n    uint256[] memory ids = new uint256[](count);\\n    for (uint256 i = 0; i < count; i++) {\\n      ids[i] = poolToken.tokenOfOwnerByIndex(_owner, i);\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @notice Migrate Pooltoken of ID to an address\\n   * @param _toAddress the address to transfer tokens to\\n   * @param _tokenId the token ID to transfer\\n   */\\n  function migrateGoldfinchPoolTokens(address _toAddress, uint256 _tokenId) public onlyOwner {\\n    poolToken.safeTransferFrom(address(this), _toAddress, _tokenId);\\n  }\\n\\n  /**\\n   * @notice Migrate all Pooltokens to an address\\n   * @param _toAddress the address to transfer tokens to\\n   */\\n  function migrateAllGoldfinchPoolTokens(address _toAddress) external onlyOwner {\\n    uint256[] memory tokenIds = getGoldfinchTokenIdsOf(address(this));\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      migrateGoldfinchPoolTokens(_toAddress, tokenIds[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Migrate certain ERC20 to an address\\n   * @param _tokenAddress the token address to migrate\\n   * @param _to the address to transfer tokens to\\n   */\\n  function migrateERC20(address _tokenAddress, address _to) external onlyOwner {\\n    uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n    IERC20(_tokenAddress).safeTransfer(_to, balance);\\n  }\\n\\n  /**\\n   * @notice Transfer repayment fee to some other address\\n   * @param _to the address to transfer tokens to\\n   */\\n  function transferRepaymentFee(address _to) external onlyOwner {\\n    usdcCoin.safeTransfer(_to, repaymentFee);\\n    repaymentFee = 0;\\n  }\\n\\n  /**\\n   * @notice Transfer earning gfi fee to some other address\\n   * @param _to the address to transfer tokens to\\n   */\\n  function transferEarningGfiFee(address _to) external onlyOwner {\\n    gfiCoin.safeTransfer(_to, earningGfiFee);\\n    earningGfiFee = 0;\\n  }\\n}\\n\",\"keccak256\":\"0xa02adcab1fb228486b7701b4fa37bd78e1ac13d86684a6690fa8a6dc8cea36de\",\"license\":\"MIT\"},\"contracts/alloyx/IGoldfinchDelegacy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../goldfinch/interfaces/ITranchedPool.sol\\\";\\nimport \\\"../goldfinch/interfaces/ISeniorPool.sol\\\";\\nimport \\\"../goldfinch/interfaces/IPoolTokens.sol\\\";\\n\\n/**\\n * @title Goldfinch Delegacy Interface\\n * @notice Middle layer to communicate with goldfinch contracts\\n * @author AlloyX\\n */\\ninterface IGoldfinchDelegacy {\\n  /**\\n   * @notice GoldFinch PoolToken Value in Value in term of USDC\\n   */\\n  function getGoldfinchDelegacyBalanceInUSDC() external view returns (uint256);\\n\\n  /**\\n   * @notice Claim certain amount of reward token based on alloy silver token, the method will burn the silver token of\\n   * the amount of message sender, and transfer reward token to message sender\\n   * @param _rewardee the address of rewardee\\n   * @param _amount the amount of silver tokens used to claim\\n   * @param _totalSupply total claimable and claimed silver tokens of all stakeholders\\n   * @param _percentageFee the earning fee for redeeming silver token in percentage in terms of GFI\\n   */\\n  function claimReward(\\n    address _rewardee,\\n    uint256 _amount,\\n    uint256 _totalSupply,\\n    uint256 _percentageFee\\n  ) external;\\n\\n  /**\\n   * @notice Purchase junior token through this delegacy to get pooltoken inside this delegacy\\n   * @param _amount the amount of usdc to purchase by\\n   * @param _poolAddress the pool address to buy from\\n   * @param _tranche the tranch id\\n   */\\n  function purchaseJuniorToken(\\n    uint256 _amount,\\n    address _poolAddress,\\n    uint256 _tranche\\n  ) external;\\n\\n  /**\\n   * @notice Sell junior token through this delegacy to get repayments\\n   * @param _tokenId the ID of token to sell\\n   * @param _amount the amount to withdraw\\n   * @param _poolAddress the pool address to withdraw from\\n   * @param _percentageBronzeRepayment the repayment fee for bronze token in percentage\\n   */\\n  function sellJuniorToken(\\n    uint256 _tokenId,\\n    uint256 _amount,\\n    address _poolAddress,\\n    uint256 _percentageBronzeRepayment\\n  ) external;\\n\\n  /**\\n   * @notice Purchase senior token through this delegacy to get FIDU inside this delegacy\\n   * @param _amount the amount of USDC to purchase by\\n   */\\n  function purchaseSeniorTokens(uint256 _amount) external;\\n\\n  /**\\n   * @notice sell senior token through delegacy to redeem fidu\\n   * @param _amount the amount of fidu to sell\\n   * @param _percentageBronzeRepayment the repayment fee for bronze token in percentage\\n   */\\n  function sellSeniorTokens(uint256 _amount, uint256 _percentageBronzeRepayment) external;\\n\\n  /**\\n   * @notice Validates the Pooltoken to be deposited and get the USDC value of the token\\n   * @param _tokenAddress the Pooltoken address\\n   * @param _depositor the person to deposit\\n   * @param _tokenID the ID of the Pooltoken\\n   */\\n  function validatesTokenToDepositAndGetPurchasePrice(\\n    address _tokenAddress,\\n    address _depositor,\\n    uint256 _tokenID\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Pay USDC tokens to account\\n   * @param _to the address to pay to\\n   * @param _amount the amount to pay\\n   */\\n  function payUsdc(address _to, uint256 _amount) external;\\n\\n  /**\\n   * @notice Approve certain amount token of certain address to some other account\\n   * @param _account the address to approve\\n   * @param _amount the amount to approve\\n   * @param _tokenAddress the token address to approve\\n   */\\n  function approve(\\n    address _tokenAddress,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x00f43841792c78d14d9a0a8a1b5cd7bd72e176fd1d80334dc885d15569a0ca81\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfea45d04903141890eeb3739f2481a1b3fe94cdfa58457e7d2fe9c962a112725\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPoolTokens is IERC721, IERC721Enumerable {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe672903d9d507aab4254c1f9bc3c581e02c1899217355c94922701b2413352ba\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x3ed9fff9cf9e8e14f2c090e97bbf78dcf65b7e63955c1c0ab5ce02814e8fe421\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts)\\n    external\\n    virtual;\\n}\\n\",\"keccak256\":\"0x3f653ee468dcaef9a5fc81d23a23eb0aa8c2e5669b560d0d2ed4bb46644c9aae\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xb5211aa4a83a69c7ebdb3a4f21fbd432c809c1e1f3406295287f6628bc0e7205\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c35760003560e01c806387e9a939116100f9578063d2d9cc6411610097578063e1f21c6711610071578063e1f21c67146103c7578063e7e808e6146103da578063f2fde38b146103ed578063f5a416271461040057600080fd5b8063d2d9cc641461037e578063d848b058146103a1578063d905e9b4146103b457600080fd5b8063917f69fe116100d3578063917f69fe1461033257806393af90a914610345578063b2ee682014610358578063c763f2161461036b57600080fd5b806387e9a939146102fb5780638da5cb5b146103045780638f2da01d1461031f57600080fd5b8063523a5c2911610166578063715018a611610140578063715018a6146102c557806375af1df8146102cd57806383197ef0146102e05780638682caf8146102e857600080fd5b8063523a5c29146102a2578063531d7dec146102aa5780636713fb86146102b257600080fd5b8063196b5443116101a2578063196b54431461025f5780631b61eb67146102745780633cfd1ccc14610287578063460408721461028f57600080fd5b8062f5271c146101c85780630d8b0408146101e4578063150b7a02146101f7575b600080fd5b6101d160085481565b6040519081526020015b60405180910390f35b6101d16101f2366004612bff565b610413565b61022e610205366004612a39565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101db565b61027261026d366004612afd565b610593565b005b610272610282366004612c31565b61061c565b6101d161084b565b61027261029d366004612985565b6108cd565b6101d1610944565b6101d1610975565b6102726102c0366004612985565b610a24565b610272610a91565b6102726102db366004612985565b610ae5565b610272610b80565b6102726102f6366004612985565b610ef8565b6101d160075481565b6000546040516001600160a01b0390911681526020016101db565b61027261032d366004612bff565b610f6f565b610272610340366004612afd565b611192565b610272610353366004612c9e565b611264565b610272610366366004612985565b6114c9565b610272610379366004612985565b611536565b61039161038c366004612bff565b6115ad565b60405190151581526020016101db565b6102726103af366004612b29565b6116d3565b6102726103c23660046129bf565b61182d565b6102726103d53660046129f8565b611905565b6101d16103e83660046129f8565b611a0f565b6102726103fb366004612985565b611ead565b61027261040e366004612c58565b611f7d565b6004805460405163463d31d760e11b815291820183905260009182916001600160a01b031690638c7a63ae9060240160a06040518083038186803b15801561045a57600080fd5b505afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190612b86565b905060008160400151905060006104ba836080015184606001516121c390919063ffffffff16565b83516040517f4d02fe6f0000000000000000000000000000000000000000000000000000000081526004810188905291925090819060009081906001600160a01b03841690634d02fe6f90602401604080518083038186803b15801561051f57600080fd5b505afa158015610533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105579190612c7a565b909250905081868210156105715761056f81836121c3565b505b6105858161057f89896121d8565b906121c3565b9a9950505050505050505050565b6006546001600160a01b031633146106015760405162461bcd60e51b815260206004820152602660248201527f5468652066756e6374696f6e206d7573742062652063616c6c65642066726f6d604482015265081d985d5b1d60d21b60648201526084015b60405180910390fd5b600154610618906001600160a01b031683836121e4565b5050565b6006546001600160a01b031633146106855760405162461bcd60e51b815260206004820152602660248201527f5468652066756e6374696f6e206d7573742062652063616c6c65642066726f6d604482015265081d985d5b1d60d21b60648201526084016105f8565b6001546040516370a0823160e01b815230600482015284916001600160a01b0316906370a082319060240160206040518083038186803b1580156106c857600080fd5b505afa1580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190612c18565b10156107585760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b60648201526084016105f8565b600083116107a85760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f000000000060448201526064016105f8565b6040517fe2bbb158000000000000000000000000000000000000000000000000000000008152600481018490526024810182905282906001600160a01b0382169063e2bbb15890604401602060405180830381600087803b15801561080c57600080fd5b505af1158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190612c18565b5050505050565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024015b60206040518083038186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c89190612c18565b905090565b6000546001600160a01b031633146109155760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401610878565b600080610996610983612264565b61057f61098e61084b565b61057f6123a4565b9050600854811015610a105760405162461bcd60e51b815260206004820152603460248201527f5661756c742076616c7565206973206c657373207468616e207468652072657060448201527f61796d656e742066656520636f6c6c656374656400000000000000000000000060648201526084016105f8565b600854610a1e9082906121d8565b91505090565b6000546001600160a01b03163314610a6c5760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b600754600254610a89916001600160a01b039091169083906121e4565b506000600755565b6000546001600160a01b03163314610ad95760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b610ae360006124cb565b565b6000546001600160a01b03163314610b2d5760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b6000610b3830612528565b905060005b8151811015610b7b57610b6983838381518110610b5c57610b5c612f15565b6020026020010151611192565b80610b7381612ee4565b915050610b3d565b505050565b6000546001600160a01b03163314610bc85760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610c0b57600080fd5b505afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190612c18565b15610c905760405162461bcd60e51b815260206004820181905260248201527f42616c616e6365206f6620737461626c6520636f696e206d757374206265203060448201526064016105f8565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610cd357600080fd5b505afa158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190612c18565b15610d585760405162461bcd60e51b815260206004820152601e60248201527f42616c616e6365206f66204669647520636f696e206d7573742062652030000060448201526064016105f8565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610d9b57600080fd5b505afa158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190612c18565b15610e205760405162461bcd60e51b815260206004820152601d60248201527f42616c616e6365206f662047464920636f696e206d757374206265203000000060448201526064016105f8565b600480546040516370a0823160e01b815230928101929092526001600160a01b0316906370a082319060240160206040518083038186803b158015610e6457600080fd5b505afa158015610e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9c9190612c18565b15610ee95760405162461bcd60e51b815260206004820152601c60248201527f506f6f6c20746f6b656e2062616c616e6365206d75737420626520300000000060448201526064016105f8565b6000546001600160a01b031680ff5b6000546001600160a01b03163314610f405760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6006546001600160a01b03163314610fd85760405162461bcd60e51b815260206004820152602660248201527f5468652066756e6374696f6e206d7573742062652063616c6c65642066726f6d604482015265081d985d5b1d60d21b60648201526084016105f8565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561101b57600080fd5b505afa15801561102f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110539190612c18565b10156110ab5760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b60648201526084016105f8565b600081116110fb5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f000000000060448201526064016105f8565b6005546040517fb6b55f25000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063b6b55f2590602401602060405180830381600087803b15801561115a57600080fd5b505af115801561116e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106189190612c18565b6000546001600160a01b031633146111da5760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b600480546040517f42842e0e00000000000000000000000000000000000000000000000000000000815230928101929092526001600160a01b0384811660248401526044830184905216906342842e0e90606401600060405180830381600087803b15801561124857600080fd5b505af115801561125c573d6000803e3d6000fd5b505050505050565b6006546001600160a01b031633146112cd5760405162461bcd60e51b815260206004820152602660248201527f5468652066756e6374696f6e206d7573742062652063616c6c65642066726f6d604482015265081d985d5b1d60d21b60648201526084016105f8565b6003546040516370a0823160e01b815230600482015284916001600160a01b0316906370a082319060240160206040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190612c18565b10156113965760405162461bcd60e51b815260206004820152601f60248201527f5661756c742068617320696e737566666963656e74206669647520636f696e0060448201526064016105f8565b600083116113e65760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f000000000060448201526064016105f8565b6040517f441a3e700000000000000000000000000000000000000000000000000000000081526004810185905260248101849052829060009081906001600160a01b0384169063441a3e70906044016040805180830381600087803b15801561144e57600080fd5b505af1158015611462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114869190612c7a565b909250905060006114ac60646114a6876114a087876121c3565b906126bd565b906126c9565b6008549091506114bc90826121c3565b6008555050505050505050565b6000546001600160a01b031633146115115760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b60085460015461152e916001600160a01b039091169083906121e4565b506000600855565b6000546001600160a01b0316331461157e5760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004805460405163463d31d760e11b815291820183905260009182916001600160a01b031690638c7a63ae9060240160a06040518083038186803b1580156115f457600080fd5b505afa158015611608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162c9190612b86565b8051600480546040517fb5ada6d80000000000000000000000000000000000000000000000000000000081526001600160a01b0380851693820193909352939450919291169063b5ada6d89060240160206040518083038186803b15801561169357600080fd5b505afa1580156116a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cb9190612b64565b949350505050565b6006546001600160a01b0316331461173c5760405162461bcd60e51b815260206004820152602660248201527f5468652066756e6374696f6e206d7573742062652063616c6c65642066726f6d604482015265081d985d5b1d60d21b60648201526084016105f8565b600754611747610944565b10156117bb5760405162461bcd60e51b815260206004820152603a60248201527f5468652047464920696e207468652064656c6567616379206973206c6573732060448201527f7468616e20746865204746492066656520636f6c6c656374656400000000000060648201526084016105f8565b60006117df836114a66117d86007546117d2610944565b906121d8565b87906126bd565b905060006117f260646114a684866126bd565b90506118158661180284846121d8565b6002546001600160a01b031691906121e4565b60075461182290826121c3565b600755505050505050565b6000546001600160a01b031633146118755760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156118b757600080fd5b505afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ef9190612c18565b9050610b7b6001600160a01b03841683836121e4565b6006546001600160a01b0316331461196e5760405162461bcd60e51b815260206004820152602660248201527f5468652066756e6374696f6e206d7573742062652063616c6c65642066726f6d604482015265081d985d5b1d60d21b60648201526084016105f8565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063095ea7b390604401602060405180830381600087803b1580156119d157600080fd5b505af11580156119e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a099190612b64565b50505050565b6006546000906001600160a01b03163314611a7b5760405162461bcd60e51b815260206004820152602660248201527f5468652066756e6374696f6e206d7573742062652063616c6c65642066726f6d604482015265081d985d5b1d60d21b60648201526084016105f8565b6004546001600160a01b03858116911614611ad85760405162461bcd60e51b815260206004820152601860248201527f4e6f7420476f6c6466696e636820506f6f6c20546f6b656e000000000000000060448201526064016105f8565b611ae1826115ad565b1515600114611b325760405162461bcd60e51b815260206004820152601060248201527f4e6f7420612076616c696420706f6f6c0000000000000000000000000000000060448201526064016105f8565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b038085169190861690636352211e9060240160206040518083038186803b158015611b9057600080fd5b505afa158015611ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc891906129a2565b6001600160a01b031614611c1e5760405162461bcd60e51b815260206004820152601c60248201527f5573657220646f6573206e6f74206f776e207468697320746f6b656e0000000060448201526064016105f8565b600480546040517f081812fc00000000000000000000000000000000000000000000000000000000815291820184905233916001600160a01b039091169063081812fc9060240160206040518083038186803b158015611c7d57600080fd5b505afa158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb591906129a2565b6001600160a01b031614611d315760405162461bcd60e51b815260206004820152602e60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f72207468697320746f6b656e00000000000000000000000000000000000060648201526084016105f8565b6000611d3c83610413565b905060008111611db45760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e2030000000000000000000000060648201526084016105f8565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015611df757600080fd5b505afa158015611e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2f9190612c18565b1015611ea35760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e00000000000000000000000000000000000060648201526084016105f8565b90505b9392505050565b6000546001600160a01b03163314611ef55760405162461bcd60e51b81526020600482018190526024820152600080516020612f5783398151915260448201526064016105f8565b6001600160a01b038116611f715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105f8565b611f7a816124cb565b50565b6006546001600160a01b03163314611fe65760405162461bcd60e51b815260206004820152602660248201527f5468652066756e6374696f6e206d7573742062652063616c6c65642066726f6d604482015265081d985d5b1d60d21b60648201526084016105f8565b6003546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190612c18565b10156120af5760405162461bcd60e51b815260206004820152601f60248201527f5661756c742068617320696e737566666963656e74206669647520636f696e0060448201526064016105f8565b600082116120ff5760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f000000000060448201526064016105f8565b6005546040517f58031d12000000000000000000000000000000000000000000000000000000008152600481018490526000916001600160a01b0316906358031d1290602401602060405180830381600087803b15801561215f57600080fd5b505af1158015612173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121979190612c18565b905060006121aa60646114a684866126bd565b6008549091506121ba90826121c3565b60085550505050565b60006121cf8284612d5d565b90505b92915050565b60006121cf8284612ea1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610b7b9084906126d5565b600480546040516370a0823160e01b81523092810192909252600091829182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156122b157600080fd5b505afa1580156122c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e99190612c18565b905060005b8181101561239c5760048054604051632f745c5960e01b815230928101929092526024820183905261238891612381916001600160a01b031690632f745c599060440160206040518083038186803b15801561234957600080fd5b505afa15801561235d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f29190612c18565b84906121c3565b92508061239481612ee4565b9150506122ee565b509092915050565b60006108c86124c66123b46127ba565b600554604080517f8726972900000000000000000000000000000000000000000000000000000000815290516114a6926001600160a01b0316916387269729916004808301926020929190829003018186803b15801561241357600080fd5b505afa158015612427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244b9190612c18565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561248e57600080fd5b505afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a09190612c18565b6127c8565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600480546040516370a0823160e01b81526001600160a01b038481169382019390935260609260009216906370a082319060240160206040518083038186803b15801561257457600080fd5b505afa158015612588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ac9190612c18565b905060008167ffffffffffffffff8111156125c9576125c9612f2b565b6040519080825280602002602001820160405280156125f2578160200160208202803683370190505b50905060005b828110156126b55760048054604051632f745c5960e01b81526001600160a01b038881169382019390935260248101849052911690632f745c599060440160206040518083038186803b15801561264e57600080fd5b505afa158015612662573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126869190612c18565b82828151811061269857612698612f15565b6020908102919091010152806126ad81612ee4565b9150506125f8565b509392505050565b60006121cf8284612e82565b60006121cf8284612d75565b600061272a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127e79092919063ffffffff16565b805190915015610b7b57808060200190518101906127489190612b64565b610b7b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016105f8565b60006108c86012600a612dda565b60006121d26127e06127d86127f6565b6114a66127ba565b83906126c9565b6060611ea38484600085612804565b60006108c86006600a612dda565b60608247101561287c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016105f8565b6001600160a01b0385163b6128d35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105f8565b600080866001600160a01b031685876040516128ef9190612cdd565b60006040518083038185875af1925050503d806000811461292c576040519150601f19603f3d011682016040523d82523d6000602084013e612931565b606091505b509150915061294182828661294c565b979650505050505050565b6060831561295b575081611ea6565b82511561296b5782518084602001fd5b8160405162461bcd60e51b81526004016105f89190612cf9565b60006020828403121561299757600080fd5b8135611ea681612f41565b6000602082840312156129b457600080fd5b8151611ea681612f41565b600080604083850312156129d257600080fd5b82356129dd81612f41565b915060208301356129ed81612f41565b809150509250929050565b600080600060608486031215612a0d57600080fd5b8335612a1881612f41565b92506020840135612a2881612f41565b929592945050506040919091013590565b60008060008060808587031215612a4f57600080fd5b8435612a5a81612f41565b9350602085810135612a6b81612f41565b935060408601359250606086013567ffffffffffffffff80821115612a8f57600080fd5b818801915088601f830112612aa357600080fd5b813581811115612ab557612ab5612f2b565b612ac7601f8201601f19168501612d2c565b91508082528984828501011115612add57600080fd5b808484018584013760008482840101525080935050505092959194509250565b60008060408385031215612b1057600080fd5b8235612b1b81612f41565b946020939093013593505050565b60008060008060808587031215612b3f57600080fd5b8435612b4a81612f41565b966020860135965060408601359560600135945092505050565b600060208284031215612b7657600080fd5b81518015158114611ea657600080fd5b600060a08284031215612b9857600080fd5b60405160a0810181811067ffffffffffffffff82111715612bbb57612bbb612f2b565b6040528251612bc981612f41565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b600060208284031215612c1157600080fd5b5035919050565b600060208284031215612c2a57600080fd5b5051919050565b600080600060608486031215612c4657600080fd5b833592506020840135612a2881612f41565b60008060408385031215612c6b57600080fd5b50508035926020909101359150565b60008060408385031215612c8d57600080fd5b505080516020909101519092909150565b60008060008060808587031215612cb457600080fd5b84359350602085013592506040850135612ccd81612f41565b9396929550929360600135925050565b60008251612cef818460208701612eb8565b9190910192915050565b6020815260008251806020840152612d18816040850160208701612eb8565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612d5557612d55612f2b565b604052919050565b60008219821115612d7057612d70612eff565b500190565b600082612d9257634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612dd2578160001904821115612db857612db8612eff565b80851615612dc557918102915b93841c9390800290612d9c565b509250929050565b60006121cf8383600082612df0575060016121d2565b81612dfd575060006121d2565b8160018114612e135760028114612e1d57612e39565b60019150506121d2565b60ff841115612e2e57612e2e612eff565b50506001821b6121d2565b5060208310610133831016604e8410600b8410161715612e5c575081810a6121d2565b612e668383612d97565b8060001904821115612e7a57612e7a612eff565b029392505050565b6000816000190483118215151615612e9c57612e9c612eff565b500290565b600082821015612eb357612eb3612eff565b500390565b60005b83811015612ed3578181015183820152602001612ebb565b83811115611a095750506000910152565b6000600019821415612ef857612ef8612eff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611f7a57600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d25c569f6d336e726d47aa6293d23b1744e2c230ad9a93bd990a2c70b2f447c364736f6c63430008070033",
  "devdoc": {
    "author": "AlloyX",
    "kind": "dev",
    "methods": {
      "approve(address,address,uint256)": {
        "params": {
          "_account": "the address to approve",
          "_amount": "the amount to approve",
          "_tokenAddress": "the token address to approve"
        }
      },
      "changePoolTokenAddress(address)": {
        "params": {
          "_poolToken": "The address to change to"
        }
      },
      "changeSeniorPoolAddress(address)": {
        "params": {
          "_seniorPool": "The address to change to"
        }
      },
      "changeVaultAddress(address)": {
        "params": {
          "_vaultAddress": "The address to change to"
        }
      },
      "claimReward(address,uint256,uint256,uint256)": {
        "params": {
          "_amount": "the amount of silver tokens used to claim",
          "_percentageFee": "the earning fee for redeeming silver token in percentage in terms of GFI",
          "_rewardee": "the address of rewardee",
          "_totalSupply": "total claimable and claimed silver tokens of all stakeholders"
        }
      },
      "getJuniorTokenValue(uint256)": {
        "params": {
          "_tokenID": "The backer NFT id"
        }
      },
      "isValidPool(uint256)": {
        "params": {
          "_tokenID": "The backer NFT id"
        }
      },
      "migrateAllGoldfinchPoolTokens(address)": {
        "params": {
          "_toAddress": "the address to transfer tokens to"
        }
      },
      "migrateERC20(address,address)": {
        "params": {
          "_to": "the address to transfer tokens to",
          "_tokenAddress": "the token address to migrate"
        }
      },
      "migrateGoldfinchPoolTokens(address,uint256)": {
        "params": {
          "_toAddress": "the address to transfer tokens to",
          "_tokenId": "the token ID to transfer"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payUsdc(address,uint256)": {
        "params": {
          "_amount": "the amount to pay",
          "_to": "the address to pay to"
        }
      },
      "purchaseJuniorToken(uint256,address,uint256)": {
        "params": {
          "_amount": "the amount of usdc to purchase by",
          "_poolAddress": "the pool address to buy from",
          "_tranche": "the tranch id"
        }
      },
      "purchaseSeniorTokens(uint256)": {
        "params": {
          "_amount": "the amount of USDC to purchase by"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sellJuniorToken(uint256,uint256,address,uint256)": {
        "params": {
          "_amount": "the amount to withdraw",
          "_percentageBronzeRepayment": "the repayment fee for bronze token in percentage",
          "_poolAddress": "the pool address to withdraw from",
          "_tokenId": "the ID of token to sell"
        }
      },
      "sellSeniorTokens(uint256,uint256)": {
        "params": {
          "_amount": "the amount of fidu to sell",
          "_percentageBronzeRepayment": "the repayment fee for bronze token in percentage"
        }
      },
      "transferEarningGfiFee(address)": {
        "params": {
          "_to": "the address to transfer tokens to"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferRepaymentFee(address)": {
        "params": {
          "_to": "the address to transfer tokens to"
        }
      },
      "validatesTokenToDepositAndGetPurchasePrice(address,address,uint256)": {
        "params": {
          "_depositor": "the person to deposit",
          "_tokenAddress": "the Pooltoken address",
          "_tokenID": "the ID of the Pooltoken"
        }
      }
    },
    "title": "Goldfinch Delegacy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,address,uint256)": {
        "notice": "Approve certain amount token of certain address to some other account"
      },
      "changePoolTokenAddress(address)": {
        "notice": "Change the pool token address"
      },
      "changeSeniorPoolAddress(address)": {
        "notice": "Change the senior pool address"
      },
      "changeVaultAddress(address)": {
        "notice": "Change the vault address"
      },
      "claimReward(address,uint256,uint256,uint256)": {
        "notice": "Claim certain amount of reward token based on alloy silver token, the method will burn the silver token of the amount of message sender, and transfer reward token to message sender"
      },
      "destroy()": {
        "notice": "Destroy the contract"
      },
      "getGFIBalance()": {
        "notice": "GFI Balance in Vault"
      },
      "getGoldfinchDelegacyBalanceInUSDC()": {
        "notice": "Delegacy Value in terms of USDC"
      },
      "getJuniorTokenValue(uint256)": {
        "notice": "Using the Goldfinch contracts, read the principal, redeemed and redeemable values"
      },
      "getUSDCBalance()": {
        "notice": "USDC Value in Vault"
      },
      "isValidPool(uint256)": {
        "notice": "Using the PoolTokens interface, check if this is a valid pool"
      },
      "migrateAllGoldfinchPoolTokens(address)": {
        "notice": "Migrate all Pooltokens to an address"
      },
      "migrateERC20(address,address)": {
        "notice": "Migrate certain ERC20 to an address"
      },
      "migrateGoldfinchPoolTokens(address,uint256)": {
        "notice": "Migrate Pooltoken of ID to an address"
      },
      "payUsdc(address,uint256)": {
        "notice": "Pay USDC tokens to account"
      },
      "purchaseJuniorToken(uint256,address,uint256)": {
        "notice": "Purchase junior token through this delegacy to get pooltoken inside this delegacy"
      },
      "purchaseSeniorTokens(uint256)": {
        "notice": "Purchase senior token through this delegacy to get FIDU inside this delegacy"
      },
      "sellJuniorToken(uint256,uint256,address,uint256)": {
        "notice": "Sell junior token through this delegacy to get repayments"
      },
      "sellSeniorTokens(uint256,uint256)": {
        "notice": "sell senior token through delegacy to redeem fidu"
      },
      "transferEarningGfiFee(address)": {
        "notice": "Transfer earning gfi fee to some other address"
      },
      "transferRepaymentFee(address)": {
        "notice": "Transfer repayment fee to some other address"
      },
      "validatesTokenToDepositAndGetPurchasePrice(address,address,uint256)": {
        "notice": "Validates the Pooltoken to be deposited and get the USDC value of the token"
      }
    },
    "notice": "Middle layer to communicate with goldfinch contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2183,
        "contract": "contracts/alloyx/GoldfinchDelegacy.sol:GoldfinchDelegacy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6149,
        "contract": "contracts/alloyx/GoldfinchDelegacy.sol:GoldfinchDelegacy",
        "label": "usdcCoin",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 6152,
        "contract": "contracts/alloyx/GoldfinchDelegacy.sol:GoldfinchDelegacy",
        "label": "gfiCoin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 6155,
        "contract": "contracts/alloyx/GoldfinchDelegacy.sol:GoldfinchDelegacy",
        "label": "fiduCoin",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 6158,
        "contract": "contracts/alloyx/GoldfinchDelegacy.sol:GoldfinchDelegacy",
        "label": "poolToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPoolTokens)15138"
      },
      {
        "astId": 6161,
        "contract": "contracts/alloyx/GoldfinchDelegacy.sol:GoldfinchDelegacy",
        "label": "seniorPool",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISeniorPool)15234"
      },
      {
        "astId": 6163,
        "contract": "contracts/alloyx/GoldfinchDelegacy.sol:GoldfinchDelegacy",
        "label": "coreVaultAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6166,
        "contract": "contracts/alloyx/GoldfinchDelegacy.sol:GoldfinchDelegacy",
        "label": "earningGfiFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6169,
        "contract": "contracts/alloyx/GoldfinchDelegacy.sol:GoldfinchDelegacy",
        "label": "repaymentFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3038": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolTokens)15138": {
        "encoding": "inplace",
        "label": "contract IPoolTokens",
        "numberOfBytes": "20"
      },
      "t_contract(ISeniorPool)15234": {
        "encoding": "inplace",
        "label": "contract ISeniorPool",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
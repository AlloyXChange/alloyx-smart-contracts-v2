{
  "address": "0xB7E1e43Ed1703127560eE8Ab81458a4C7Dd7B784",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcCoinAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "availableToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestRedeemable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalRedeemable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditLine",
      "outputs": [
        {
          "internalType": "contract IV2CreditLine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "drawdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        }
      ],
      "name": "getTranche",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalSharePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestSharePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITranchedPool.TrancheInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_config",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_juniorFeePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paymentPeriodInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_termInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lateFeeApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_principalGracePeriodInDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundableAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_allowedUIDTypes",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fundableAt",
          "type": "uint256"
        }
      ],
      "name": "initializeNextSlice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockJuniorCapital",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setFundableAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolTokens",
          "type": "address"
        }
      ],
      "name": "setPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalJuniorDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x41bc844cddab757640a754f2debc850a83a47f8f521701898b88237726dc3587",
  "receipt": {
    "to": null,
    "from": "0xd988EB2777ec4d844ced75f68148A08310bEFc76",
    "contractAddress": "0xB7E1e43Ed1703127560eE8Ab81458a4C7Dd7B784",
    "transactionIndex": 8,
    "gasUsed": "560892",
    "logsBloom": "0x
    "blockHash": "0x3d12491e1ce57c5f9ae1a2242146bdc9e9f84496d60ad5cb85efcf86ab5afdf5",
    "transactionHash": "0x41bc844cddab757640a754f2debc850a83a47f8f521701898b88237726dc3587",
    "logs": [],
    "blockNumber": 30284719,
    "cumulativeGasUsed": "2800090",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x8E7093Ad9720E606bF617FD465e9dCa5b1Ef0Ea7"
  ],
  "numDeployments": 3,
  "solcInputHash": "d07d32007b996b2c1be287970f2d99af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcCoinAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRedeemable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalRedeemable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditLine\",\"outputs\":[{\"internalType\":\"contract IV2CreditLine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"getTranche\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct ITranchedPool.TrancheInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_juniorFeePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_termInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lateFeeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_principalGracePeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundableAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_allowedUIDTypes\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundableAt\",\"type\":\"uint256\"}],\"name\":\"initializeNextSlice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockJuniorCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setFundableAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokens\",\"type\":\"address\"}],\"name\":\"setPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJuniorDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"availableToWithdraw(uint256)\":{\"params\":{\"tokenId\":\"The token representing the position\"},\"returns\":{\"interestRedeemable\":\"The interest available to redeem\",\"principalRedeemable\":\"The principal available to redeem\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"availableToWithdraw(uint256)\":{\"notice\":\"Determines the amount of interest and principal redeemable by a particular tokenId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/goldfinch/protocol/core/TranchedPool.sol\":\"TranchedPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfea45d04903141890eeb3739f2481a1b3fe94cdfa58457e7d2fe9c962a112725\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPoolTokens is IERC721, IERC721Enumerable {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe672903d9d507aab4254c1f9bc3c581e02c1899217355c94922701b2413352ba\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts)\\n    external\\n    virtual;\\n}\\n\",\"keccak256\":\"0x3f653ee468dcaef9a5fc81d23a23eb0aa8c2e5669b560d0d2ed4bb46644c9aae\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xb5211aa4a83a69c7ebdb3a4f21fbd432c809c1e1f3406295287f6628bc0e7205\",\"license\":\"MIT\"},\"contracts/goldfinch/protocol/core/TranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../interfaces/ITranchedPool.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract TranchedPool is ITranchedPool {\\n  IPoolTokens private poolToken;\\n  IERC20 private usdcCoin;\\n\\n  constructor(address _poolTokenAddress, address _usdcCoinAddress) public {\\n    poolToken = IPoolTokens(_poolTokenAddress);\\n    usdcCoin = IERC20(_usdcCoinAddress);\\n  }\\n\\n  event DepositMade(\\n    address indexed owner,\\n    uint256 indexed tranche,\\n    uint256 indexed tokenId,\\n    uint256 amount\\n  );\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public override {}\\n\\n  function setPoolTokens(address _poolTokens) external {\\n    poolToken = IPoolTokens(_poolTokens);\\n  }\\n\\n  function getTranche(uint256 tranche) external view override returns (TrancheInfo memory) {\\n    return TrancheInfo(0, 0, 0, 0, 0);\\n  }\\n\\n  function pay(uint256 amount) external override {}\\n\\n  function lockJuniorCapital() external override {}\\n\\n  function lockPool() external override {}\\n\\n  function initializeNextSlice(uint256 _fundableAt) external override {}\\n\\n  function totalJuniorDeposits() external view override returns (uint256) {\\n    return 0;\\n  }\\n\\n  function drawdown(uint256 amount) external override {}\\n\\n  function setFundableAt(uint256 timestamp) external override {}\\n\\n  function deposit(uint256 tranche, uint256 amount) external override returns (uint256 tokenId) {\\n    require(amount > 0, \\\"Must deposit > zero\\\");\\n    IPoolTokens.MintParams memory params = IPoolTokens.MintParams({\\n      tranche: tranche,\\n      principalAmount: amount * 100000\\n    });\\n    tokenId = poolToken.mint(params, msg.sender);\\n    usdcCoin.transferFrom(msg.sender, address(this), amount);\\n    emit DepositMade(msg.sender, tranche, tokenId, amount);\\n    return tokenId;\\n  }\\n\\n  function assess() external override {}\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override returns (uint256 tokenId) {\\n    return 0;\\n  }\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    override\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn)\\n  {\\n    return (0, 0);\\n  }\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    override\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn)\\n  {\\n    return (0, 0);\\n  }\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts)\\n    external\\n    override\\n  {}\\n\\n  /**\\n   * @notice Determines the amount of interest and principal redeemable by a particular tokenId\\n   * @param tokenId The token representing the position\\n   * @return interestRedeemable The interest available to redeem\\n   * @return principalRedeemable The principal available to redeem\\n   */\\n  function availableToWithdraw(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable)\\n  {\\n    return (tokenId * 1000, tokenId * 10000);\\n  }\\n}\\n\",\"keccak256\":\"0x82d198b956e21e98e0a17117a09e6564190fb25bd2c51406dfffa424355e4646\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161097638038061097683398101604081905261002f9161007c565b600280546001600160a01b039384166001600160a01b031991821617909155600380549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b6108b8806100be6000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063a079a4dd116100cd578063c290d69111610081578063d972e8ad11610066578063d972e8ad14610293578063dd0ec241146102e8578063e2bbb158146102ef57600080fd5b8063c290d69114610233578063cf09e0d01461028a57600080fd5b8063a8deac0e116100b2578063a8deac0e14610258578063aa2a7c4c14610274578063ae6c857a1461023357600080fd5b8063a079a4dd14610233578063a6a25e881461015657600080fd5b80634d02fe6f1161012457806366e6f56c1161010957806366e6f56c146101eb57806378bcd604146102335780639d1105301461024457600080fd5b80634d02fe6f146101b0578063515bc323146101c357600080fd5b80630881806c146101565780634026478e14610156578063441a3e701461015857806347195e1314610185575b600080fd5b005b61016b6101663660046107c1565b610302565b604080519283526020830191909152015b60405180910390f35b600054610198906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b61016b6101be36600461078f565b61030d565b6101dd6101d13660046107e3565b60009695505050505050565b60405190815260200161017c565b6101566101f9366004610626565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61015661024136600461078f565b50565b610156610252366004610701565b50505050565b610156610266366004610648565b505050505050505050505050565b61016b61028236600461078f565b506000908190565b6101dd60015481565b6102a66102a136600461078f565b610331565b60405161017c9190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b60006101dd565b6101dd6102fd3660046107c1565b610396565b6000805b9250929050565b60008061031c836103e861083c565b6103288461271061083c565b91509150915091565b6103636040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060a001604052806000815260200160008152602001600081526020016000815260200160008152509050919050565b6000808211610405576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d757374206465706f736974203e207a65726f00000000000000000000000000604482015260640160405180910390fd5b6000604051806040016040528084620186a0610421919061083c565b815260209081018690526002546040517f5be57b6a000000000000000000000000000000000000000000000000000000008152835160048201529183015160248301523360448301529192506001600160a01b0390911690635be57b6a90606401602060405180830381600087803b15801561049c57600080fd5b505af11580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d491906107a8565b6003546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690529193506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561054057600080fd5b505af1158015610554573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610578919061076d565b508184336001600160a01b03167fcb3ef4109dcd006671348924f00aac8398190a5ff283d6e470d74581513e1036866040516105b691815260200190565b60405180910390a45092915050565b80356001600160a01b03811681146105dc57600080fd5b919050565b60008083601f8401126105f357600080fd5b50813567ffffffffffffffff81111561060b57600080fd5b6020830191508360208260051b850101111561030657600080fd5b60006020828403121561063857600080fd5b610641826105c5565b9392505050565b6000806000806000806000806000806000806101608d8f03121561066b57600080fd5b6106748d6105c5565b9b5061068260208e016105c5565b9a5060408d0135995060608d0135985060808d0135975060a08d0135965060c08d0135955060e08d013594506101008d013593506101208d0135925067ffffffffffffffff6101408e013511156106d857600080fd5b6106e98e6101408f01358f016105e1565b81935080925050509295989b509295989b509295989b565b6000806000806040858703121561071757600080fd5b843567ffffffffffffffff8082111561072f57600080fd5b61073b888389016105e1565b9096509450602087013591508082111561075457600080fd5b50610761878288016105e1565b95989497509550505050565b60006020828403121561077f57600080fd5b8151801515811461064157600080fd5b6000602082840312156107a157600080fd5b5035919050565b6000602082840312156107ba57600080fd5b5051919050565b600080604083850312156107d457600080fd5b50508035926020909101359150565b60008060008060008060c087890312156107fc57600080fd5b863595506020870135945060408701359350606087013560ff8116811461082257600080fd5b9598949750929560808101359460a0909101359350915050565b600081600019048311821515161561087d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50029056fea2646970667358221220bfd1051bacc96cf85d8b3aa222601f905e745492f22dfd1d155178548fc15e7064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063a079a4dd116100cd578063c290d69111610081578063d972e8ad11610066578063d972e8ad14610293578063dd0ec241146102e8578063e2bbb158146102ef57600080fd5b8063c290d69114610233578063cf09e0d01461028a57600080fd5b8063a8deac0e116100b2578063a8deac0e14610258578063aa2a7c4c14610274578063ae6c857a1461023357600080fd5b8063a079a4dd14610233578063a6a25e881461015657600080fd5b80634d02fe6f1161012457806366e6f56c1161010957806366e6f56c146101eb57806378bcd604146102335780639d1105301461024457600080fd5b80634d02fe6f146101b0578063515bc323146101c357600080fd5b80630881806c146101565780634026478e14610156578063441a3e701461015857806347195e1314610185575b600080fd5b005b61016b6101663660046107c1565b610302565b604080519283526020830191909152015b60405180910390f35b600054610198906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b61016b6101be36600461078f565b61030d565b6101dd6101d13660046107e3565b60009695505050505050565b60405190815260200161017c565b6101566101f9366004610626565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61015661024136600461078f565b50565b610156610252366004610701565b50505050565b610156610266366004610648565b505050505050505050505050565b61016b61028236600461078f565b506000908190565b6101dd60015481565b6102a66102a136600461078f565b610331565b60405161017c9190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b60006101dd565b6101dd6102fd3660046107c1565b610396565b6000805b9250929050565b60008061031c836103e861083c565b6103288461271061083c565b91509150915091565b6103636040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060a001604052806000815260200160008152602001600081526020016000815260200160008152509050919050565b6000808211610405576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d757374206465706f736974203e207a65726f00000000000000000000000000604482015260640160405180910390fd5b6000604051806040016040528084620186a0610421919061083c565b815260209081018690526002546040517f5be57b6a000000000000000000000000000000000000000000000000000000008152835160048201529183015160248301523360448301529192506001600160a01b0390911690635be57b6a90606401602060405180830381600087803b15801561049c57600080fd5b505af11580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d491906107a8565b6003546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690529193506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561054057600080fd5b505af1158015610554573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610578919061076d565b508184336001600160a01b03167fcb3ef4109dcd006671348924f00aac8398190a5ff283d6e470d74581513e1036866040516105b691815260200190565b60405180910390a45092915050565b80356001600160a01b03811681146105dc57600080fd5b919050565b60008083601f8401126105f357600080fd5b50813567ffffffffffffffff81111561060b57600080fd5b6020830191508360208260051b850101111561030657600080fd5b60006020828403121561063857600080fd5b610641826105c5565b9392505050565b6000806000806000806000806000806000806101608d8f03121561066b57600080fd5b6106748d6105c5565b9b5061068260208e016105c5565b9a5060408d0135995060608d0135985060808d0135975060a08d0135965060c08d0135955060e08d013594506101008d013593506101208d0135925067ffffffffffffffff6101408e013511156106d857600080fd5b6106e98e6101408f01358f016105e1565b81935080925050509295989b509295989b509295989b565b6000806000806040858703121561071757600080fd5b843567ffffffffffffffff8082111561072f57600080fd5b61073b888389016105e1565b9096509450602087013591508082111561075457600080fd5b50610761878288016105e1565b95989497509550505050565b60006020828403121561077f57600080fd5b8151801515811461064157600080fd5b6000602082840312156107a157600080fd5b5035919050565b6000602082840312156107ba57600080fd5b5051919050565b600080604083850312156107d457600080fd5b50508035926020909101359150565b60008060008060008060c087890312156107fc57600080fd5b863595506020870135945060408701359350606087013560ff8116811461082257600080fd5b9598949750929560808101359460a0909101359350915050565b600081600019048311821515161561087d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50029056fea2646970667358221220bfd1051bacc96cf85d8b3aa222601f905e745492f22dfd1d155178548fc15e7064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "availableToWithdraw(uint256)": {
        "params": {
          "tokenId": "The token representing the position"
        },
        "returns": {
          "interestRedeemable": "The interest available to redeem",
          "principalRedeemable": "The principal available to redeem"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "availableToWithdraw(uint256)": {
        "notice": "Determines the amount of interest and principal redeemable by a particular tokenId"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8459,
        "contract": "contracts/goldfinch/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "creditLine",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IV2CreditLine)8763"
      },
      {
        "astId": 8461,
        "contract": "contracts/goldfinch/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "createdAt",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9339,
        "contract": "contracts/goldfinch/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "poolToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPoolTokens)8356"
      },
      {
        "astId": 9342,
        "contract": "contracts/goldfinch/protocol/core/TranchedPool.sol:TranchedPool",
        "label": "usdcCoin",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3038"
      }
    ],
    "types": {
      "t_contract(IERC20)3038": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolTokens)8356": {
        "encoding": "inplace",
        "label": "contract IPoolTokens",
        "numberOfBytes": "20"
      },
      "t_contract(IV2CreditLine)8763": {
        "encoding": "inplace",
        "label": "contract IV2CreditLine",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
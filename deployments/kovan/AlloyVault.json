{
  "address": "0x1eA79965052737df4Cf1600e3cEDC7Ce3225B2b3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alloyxBronzeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_alloyxSilverAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fiduCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gfiCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_goldFinchTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seniorPoolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositAlloyx",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "DepositNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositStable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alloyxAddress",
          "type": "address"
        }
      ],
      "name": "changeAlloyxBronzeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alloyxAddress",
          "type": "address"
        }
      ],
      "name": "changeAlloyxSilverAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        }
      ],
      "name": "changePoolTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seniorPool",
          "type": "address"
        }
      ],
      "name": "changeSeniorPoolAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositAlloyxBronzeTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "depositNFTToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositUSDCCoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "isValidPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrateERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_toAddress",
          "type": "address"
        }
      ],
      "name": "migrateGoldfinchPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVaultOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferAlloyxOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c27f3535a634ad7cf348b7ecc340e63b80eb5e557d5e783f167363703f621f5",
  "receipt": {
    "to": null,
    "from": "0xd988EB2777ec4d844ced75f68148A08310bEFc76",
    "contractAddress": "0x1eA79965052737df4Cf1600e3cEDC7Ce3225B2b3",
    "transactionIndex": 0,
    "gasUsed": "4402884",
    "logsBloom": "0x
    "blockHash": "0xb4d0357a9abc0f963074d801621228eee22cbc31da3ba45d3c9ff0ff9ac2916a",
    "transactionHash": "0x5c27f3535a634ad7cf348b7ecc340e63b80eb5e557d5e783f167363703f621f5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30147506,
        "transactionHash": "0x5c27f3535a634ad7cf348b7ecc340e63b80eb5e557d5e783f167363703f621f5",
        "address": "0x1eA79965052737df4Cf1600e3cEDC7Ce3225B2b3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d988eb2777ec4d844ced75f68148a08310befc76"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb4d0357a9abc0f963074d801621228eee22cbc31da3ba45d3c9ff0ff9ac2916a"
      }
    ],
    "blockNumber": 30147506,
    "cumulativeGasUsed": "4402884",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1467A9a6BC61670DcD9cd00cCde98F83Ab0c8fb4",
    "0x333d1f9D9356b4C43965985C8c30f9Ab74Ed8681",
    "0xeaE3F227e370d9333a7AF82058DDfd34B1BeB627",
    "0x6A2e821CCD293f6989080370ECe62751B4DAFB8f",
    "0x94fF8A71Cd9f8EE849c8259A7a246eA2ef276D8f",
    "0x94fF8A71Cd9f8EE849c8259A7a246eA2ef276D8f",
    "0x94fF8A71Cd9f8EE849c8259A7a246eA2ef276D8f"
  ],
  "numDeployments": 2,
  "solcInputHash": "a0c7958062e8cf25bb9a5e1fdeb0921f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxBronzeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alloyxSilverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fiduCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gfiCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_goldFinchTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seniorPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositAlloyx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxAddress\",\"type\":\"address\"}],\"name\":\"changeAlloyxBronzeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxAddress\",\"type\":\"address\"}],\"name\":\"changeAlloyxSilverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"changePoolTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seniorPool\",\"type\":\"address\"}],\"name\":\"changeSeniorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAlloyxBronzeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"depositNFTToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDCCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"migrateGoldfinchPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVaultOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAlloyxOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AlloyX\",\"kind\":\"dev\",\"methods\":{\"depositAlloyxBronzeTokens(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of Alloy Tokens\"}},\"depositNFTToken(address,uint256)\":{\"params\":{\"_tokenAddress\":\"NFT Address\",\"_tokenID\":\"NFT ID\"}},\"depositUSDCCoin(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of stable coin\"}},\"isValidPool(address,uint256)\":{\"params\":{\"_tokenAddress\":\"The backer NFT address\",\"_tokenID\":\"The backer NFT id\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AlloyX Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositAlloyxBronzeTokens(uint256)\":{\"notice\":\"An Alloy token holder can deposit their tokens and redeem them for USDC\"},\"depositNFTToken(address,uint256)\":{\"notice\":\"A Junior token holder can deposit their NFT for stable coin\"},\"depositUSDCCoin(uint256)\":{\"notice\":\"A Liquidity Provider can deposit supported stable coins for Alloy Tokens\"},\"isValidPool(address,uint256)\":{\"notice\":\"Using the PoolTokens interface, check if this is a valid pool\"},\"startVaultOperation()\":{\"notice\":\"Initialize by minting the alloy brown tokens to owner\"}},\"notice\":\"Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract uses a pricing oracle to determine the value of the underlying assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alloyx/v2.0/AlloyVault.sol\":\"AlloyVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxTokenBronze.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract AlloyxTokenBronze is ERC20, Ownable {\\n    constructor() ERC20('AlloyxTokenBronze', 'ABRNZ') {}\\n\\n    function mint(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function alloyBronze() external returns(bool){\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x099ce2cceedfa6dbaa8819316c071c62776dc565cf4cdf67a6fa7ba50c96183e\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxTokenSilver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract AlloyxTokenSilver is ERC20, Ownable {\\n    constructor() ERC20('AlloyxTokenSilver', 'ABSLV') {}\\n\\n    function mint(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function alloySilver() external returns(bool){\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb6693427f4910e4c0c64cca03382d779168bd00557e627d2039a6c001776ba21\",\"license\":\"MIT\"},\"contracts/alloyx/v2.0/AlloyVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport '../AlloyxTokenBronze.sol';\\nimport '../AlloyxTokenSilver.sol';\\n\\nimport '../../goldfinch/interfaces/IPoolTokens.sol';\\nimport '../../goldfinch/interfaces/ITranchedPool.sol';\\nimport '../../goldfinch/interfaces/ISeniorPool.sol';\\n\\n/**\\n * @title AlloyX Vault\\n * @notice Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch\\n * and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract\\n * uses a pricing oracle to determine the value of the underlying assets\\n * @author AlloyX\\n */\\ncontract AlloyVault is ERC721Holder, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bool private vaultStarted;\\n    IERC20 private usdcCoin;\\n    IERC20 private gfiCoin;\\n    IERC20 private fiduCoin;\\n    IPoolTokens private goldFinchPoolToken;\\n    AlloyxTokenBronze private alloyxTokenBronze;\\n    AlloyxTokenSilver private alloyTokenSilver;\\n    ISeniorPool private seniorPool;\\n\\n    event DepositStable(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n    event DepositNFT(address _tokenAddress, address _tokenSender, uint256 _tokenID);\\n    event DepositAlloyx(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n    event Mint(address _tokenReceiver, uint256 _tokenAmount);\\n    event Burn(address _tokenReceiver, uint256 _tokenAmount);\\n\\n    constructor(\\n        address _alloyxBronzeAddress,\\n        address _alloyxSilverAddress,\\n        address _usdcCoinAddress,\\n        address _fiduCoinAddress,\\n        address _gfiCoinAddress,\\n        address _goldFinchTokenAddress,\\n        address _seniorPoolAddress\\n    ) {\\n        alloyxTokenBronze = AlloyxTokenBronze(_alloyxBronzeAddress);\\n        alloyTokenSilver = AlloyxTokenSilver(_alloyxSilverAddress);\\n        usdcCoin = IERC20(_usdcCoinAddress);\\n        gfiCoin = IERC20(_gfiCoinAddress);\\n        fiduCoin = IERC20(_fiduCoinAddress);\\n        goldFinchPoolToken = IPoolTokens(_goldFinchTokenAddress);\\n        seniorPool = ISeniorPool(_seniorPoolAddress);\\n        vaultStarted = false;\\n    }\\n\\n    /**\\n     * @notice Alloy Brown Token Value in terms of USDC\\n     */\\n    function getAlloyxBronzeTokenBalanceInUSDC() internal view returns (uint256)  {\\n        return getFiduBalanceInUSDC().add(getUSDCBalance()).add(getGoldFinchPoolTokenBalanceInUSDC());\\n    }\\n\\n    /**\\n     * @notice Fidu Value in Vault in term of USDC\\n     */\\n    function getFiduBalanceInUSDC() internal view returns (uint256)  {\\n        return fiduToUSDC(fiduCoin.balanceOf(address(this)).mul(seniorPool.sharePrice()).div(fiduMantissa()));\\n    }\\n\\n    /**\\n     * @notice USDC Value in Vault\\n     */\\n    function getUSDCBalance() internal view returns (uint256)  {\\n        return usdcCoin.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice GFI Balance in Vault\\n     */\\n    function getGFIBalance() internal view returns (uint256)  {\\n        return gfiCoin.balanceOf(address(this));\\n    }\\n\\n\\n    /**\\n     * @notice GoldFinch PoolToken Value in Value in term of USDC\\n     */\\n    function getGoldFinchPoolTokenBalanceInUSDC() internal view returns (uint256)  {\\n        uint256 total =0;\\n        uint256 balance=goldFinchPoolToken.balanceOf(address(this));\\n        for(uint i=0;i<balance;i++){\\n            total=total.add(getJuniorTokenValue(address(goldFinchPoolToken),goldFinchPoolToken.tokenOfOwnerByIndex(address(this),i)));\\n        }\\n        return total.mul(usdcMantissa());\\n    }\\n\\n    /**\\n     * @notice Convert Alloyx Bronze to USDC amount\\n     */\\n    function alloyxBronzeToUSDC(uint256 amount) internal view returns (uint256) {\\n        uint256 alloyBronzeTotalSupply=alloyxTokenBronze.totalSupply();\\n        uint256 totalVaultAlloyxBronzeValueInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        return amount.mul(totalVaultAlloyxBronzeValueInUSDC).div(alloyBronzeTotalSupply);\\n    }\\n\\n    /**\\n     * @notice Convert USDC Amount to Alloyx Bronze\\n     */\\n    function USDCtoAlloyxBronze(uint256 amount) internal view returns (uint256) {\\n        uint256 alloyBronzeTotalSupply=alloyxTokenBronze.totalSupply();\\n        uint256 totalVaultAlloyxBronzeValueInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        return amount.mul(alloyBronzeTotalSupply).div(totalVaultAlloyxBronzeValueInUSDC);\\n    }\\n\\n\\n    function fiduToUSDC(uint256 amount) internal pure returns (uint256) {\\n        return amount.div(fiduMantissa().div(usdcMantissa()));\\n    }\\n\\n    function fiduMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(18);\\n    }\\n\\n    function alloyMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(18);\\n    }\\n\\n    function usdcMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(6);\\n    }\\n\\n\\n    function changeAlloyxBronzeAddress(address _alloyxAddress) external onlyOwner {\\n        alloyxTokenBronze = AlloyxTokenBronze(_alloyxAddress);\\n    }\\n\\n    function changeAlloyxSilverAddress(address _alloyxAddress) external onlyOwner {\\n        alloyTokenSilver = AlloyxTokenSilver(_alloyxAddress);\\n    }\\n\\n    function changeSeniorPoolAddress(address _seniorPool) external onlyOwner {\\n        seniorPool = ISeniorPool(_seniorPool);\\n    }\\n\\n    function changePoolTokenAddress(address _poolToken) external onlyOwner {\\n        goldFinchPoolToken = IPoolTokens(_poolToken);\\n    }\\n\\n    modifier whenVaultStarted() {\\n        require(vaultStarted, \\\"Vault has not start accepting deposits\\\");\\n        _;\\n    }\\n\\n    modifier whenVaultNotStarted() {\\n        require(!vaultStarted, \\\"Vault has already start accepting deposits\\\");\\n        _;\\n    }\\n\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Initialize by minting the alloy brown tokens to owner\\n     */\\n    function startVaultOperation() external onlyOwner whenVaultNotStarted returns (bool) {\\n        uint256 totalBalanceInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        alloyxTokenBronze.mint(address(this), totalBalanceInUSDC.mul(alloyMantissa()).div(usdcMantissa()));\\n        vaultStarted=true;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\\n     * @param _tokenAmount Number of Alloy Tokens\\n     */\\n    function depositAlloyxBronzeTokens(uint256 _tokenAmount) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(alloyxTokenBronze.balanceOf(msg.sender) >= _tokenAmount, 'User has insufficient alloyx coin');\\n        require(alloyxTokenBronze.allowance(msg.sender, address(this)) >= _tokenAmount, 'User has not approved the vault for sufficient alloyx coin');\\n        uint256 amountToWithdraw = alloyxBronzeToUSDC(_tokenAmount);\\n        require(amountToWithdraw > 0, 'The amount of stable coin to get is not larger than 0');\\n        require(usdcCoin.balanceOf(address(this)) >= amountToWithdraw, 'The vault does not have sufficient stable coin');\\n        alloyxTokenBronze.burn(msg.sender, amountToWithdraw);\\n        usdcCoin.safeTransfer(msg.sender, amountToWithdraw);\\n        emit DepositAlloyx(address(alloyxTokenBronze), msg.sender, amountToWithdraw);\\n        emit Burn(msg.sender, amountToWithdraw);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\\n     * @param _tokenAmount Number of stable coin\\n     */\\n    function depositUSDCCoin(uint256 _tokenAmount) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(usdcCoin.balanceOf(msg.sender) >= _tokenAmount, 'User has insufficient stable coin');\\n        require(\\n            usdcCoin.allowance(msg.sender, address(this)) >= _tokenAmount,\\n            'User has not approved the vault for sufficient stable coin'\\n        );\\n        uint256 amountToMint = USDCtoAlloyxBronze(_tokenAmount);\\n        require(amountToMint > 0, 'The amount of alloyx bronze coin to get is not larger than 0');\\n        usdcCoin.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n        alloyxTokenBronze.mint(msg.sender, amountToMint);\\n        emit DepositStable(address(usdcCoin), msg.sender, amountToMint);\\n        emit Mint(msg.sender, amountToMint);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice A Junior token holder can deposit their NFT for stable coin\\n     * @param _tokenAddress NFT Address\\n     * @param _tokenID NFT ID\\n     */\\n    function depositNFTToken(address _tokenAddress, uint256 _tokenID) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(_tokenAddress == address(goldFinchPoolToken), 'Not Goldfinch Pool Token');\\n        require(isValidPool(_tokenAddress, _tokenID) == true, 'Not a valid pool');\\n        require(IERC721(_tokenAddress).ownerOf(_tokenID) == msg.sender, 'User does not own this token');\\n        require(\\n            IERC721(_tokenAddress).getApproved(_tokenID) == address(this),\\n            'User has not approved the vault for this token'\\n        );\\n        uint256 purchasePrice = getJuniorTokenValue(_tokenAddress, _tokenID);\\n        require(purchasePrice > 0, 'The amount of stable coin to get is not larger than 0');\\n        require(usdcCoin.balanceOf(address(this)) >= purchasePrice, 'The vault does not have sufficient stable coin');\\n        IERC721(_tokenAddress).safeTransferFrom(msg.sender, address(this), _tokenID);\\n        usdcCoin.safeTransfer(msg.sender,purchasePrice);\\n        emit DepositNFT(_tokenAddress, msg.sender, _tokenID);\\n        return true;\\n    }\\n\\n    function destroy() external onlyOwner whenPaused {\\n        require(usdcCoin.balanceOf(address(this)) == 0, 'Balance of stable coin must be 0');\\n        require(fiduCoin.balanceOf(address(this)) == 0, 'Balance of Fidu coin must be 0');\\n        require(gfiCoin.balanceOf(address(this)) == 0, 'Balance of GFI coin must be 0');\\n\\n        address payable addr = payable(address(owner()));\\n        selfdestruct(addr);\\n    }\\n\\n    /**\\n     * @notice Using the PoolTokens interface, check if this is a valid pool\\n     * @param _tokenAddress The backer NFT address\\n     * @param _tokenID The backer NFT id\\n     */\\n    function isValidPool(address _tokenAddress, uint256 _tokenID) public view returns (bool) {\\n        IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n        IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n        address tranchedPool = tokenInfo.pool;\\n        return poolTokenContract.validPool(tranchedPool);\\n    }\\n\\n    /**\\n     * @notice Using the Goldfinch contracts, read the principal, redeemed and redeemable values\\n     * @param _tokenAddress The backer NFT address\\n     * @param _tokenID The backer NFT id\\n     */\\n    function getJuniorTokenValue(address _tokenAddress, uint256 _tokenID) internal view returns (uint256) {\\n        // first get the amount redeemed and the principal\\n        IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n        IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n        uint256 principalAmount = tokenInfo.principalAmount;\\n        uint256 totalRedeemed = tokenInfo.principalRedeemed.add(tokenInfo.interestRedeemed);\\n\\n        // now get the redeemable values for the given token\\n        address tranchedPoolAddress = tokenInfo.pool;\\n        ITranchedPool tranchedTokenContract = ITranchedPool(tranchedPoolAddress);\\n        (uint256 interestRedeemable, uint256 principalRedeemable) = tranchedTokenContract.availableToWithdraw(_tokenID);\\n        uint256 totalRedeemable = interestRedeemable;\\n        // only add principal here if there have been drawdowns otherwise it overstates the value\\n        if (principalRedeemable < principalAmount) {\\n            totalRedeemable.add(principalRedeemable);\\n        }\\n        return principalAmount.sub(totalRedeemed).add(totalRedeemable);\\n    }\\n\\n    function migrateGoldfinchPoolTokens(\\n        address payable _toAddress\\n    ) external onlyOwner whenPaused {\\n        uint256 balance=goldFinchPoolToken.balanceOf(address(this));\\n        for(uint i=0;i<balance;i++){\\n            goldFinchPoolToken.safeTransferFrom(address(this), _toAddress, goldFinchPoolToken.tokenOfOwnerByIndex(address(this),i));\\n        }\\n    }\\n\\n    function migrateERC20(address _tokenAddress, address payable _to) external onlyOwner whenPaused {\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n        IERC20(_tokenAddress).safeTransfer(_to, balance);\\n    }\\n\\n    function transferAlloyxOwnership(address _to) external onlyOwner whenPaused {\\n        alloyxTokenBronze.transferOwnership(_to);\\n    }\\n}\\n\",\"keccak256\":\"0xfd3d587961739bb365cb18086bf4daf4c199edb632323f36bb2b2cfc9b3d54f3\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfea45d04903141890eeb3739f2481a1b3fe94cdfa58457e7d2fe9c962a112725\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPoolTokens is IERC721,IERC721Enumerable {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd64623f1a0518009df079edb64fdf284e116cde6b011200de75ad42e08c82933\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x1049267cb4e91fd7045df567ee4a5be48101d4ea60f9bc45084f17adc85ad774\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n}\\n\",\"keccak256\":\"0x34ab69f9ef19409cdadf831a915b65889928d9a89bc4cb28cd9084cef7d94db8\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xb5211aa4a83a69c7ebdb3a4f21fbd432c809c1e1f3406295287f6628bc0e7205\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806383197ef0116100ad578063b338ad1611610071578063b338ad16146102cf578063bb74c058146102ff578063d8ec06081461032f578063d905e9b41461034b578063f2fde38b146103675761012c565b806383197ef0146102635780638456cb591461026d5780638682caf8146102775780638d6f4d21146102935780638da5cb5b146102b15761012c565b806346040872116100f457806346040872146101d357806353c98f5a146101ef5780635c975abb1461021f578063715018a61461023d5780637c905457146102475761012c565b806307c0cf3d14610131578063150b7a021461014d5780631a97749d1461017d578063354d3c30146101995780633f4ba83a146101c9575b600080fd5b61014b6004803603810190610146919061355c565b610383565b005b61016760048036038101906101629190613623565b610443565b6040516101749190613cc1565b60405180910390f35b6101976004803603810190610192919061355c565b610457565b005b6101b360048036038101906101ae91906136a6565b610517565b6040516101c09190613ca6565b60405180910390f35b6101d1610647565b005b6101ed60048036038101906101e8919061355c565b610714565b005b61020960048036038101906102049190613740565b6107d4565b6040516102169190613ca6565b60405180910390f35b610227610c38565b6040516102349190613ca6565b60405180910390f35b610245610c4e565b005b610261600480360381019061025c91906135b6565b610cd6565b005b61026b610fa8565b005b610275611357565b005b610291600480360381019061028c919061355c565b611425565b005b61029b6114e5565b6040516102a89190613ca6565b60405180910390f35b6102b96116c4565b6040516102c69190613bcb565b60405180910390f35b6102e960048036038101906102e491906136a6565b6116ed565b6040516102f69190613ca6565b60405180910390f35b61031960048036038101906103149190613740565b611c92565b6040516103269190613ca6565b60405180910390f35b6103496004803603810190610344919061355c565b6121e1565b005b610365600480360381019061036091906135e3565b612334565b005b610381600480360381019061037c919061355c565b6124b4565b005b61038b6125ac565b73ffffffffffffffffffffffffffffffffffffffff166103a96116c4565b73ffffffffffffffffffffffffffffffffffffffff16146103ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f690613e9e565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600063150b7a0260e01b9050949350505050565b61045f6125ac565b73ffffffffffffffffffffffffffffffffffffffff1661047d6116c4565b73ffffffffffffffffffffffffffffffffffffffff16146104d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ca90613e9e565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008083905060008173ffffffffffffffffffffffffffffffffffffffff16638c7a63ae856040518263ffffffff1660e01b81526004016105589190613fde565b60a06040518083038186803b15801561057057600080fd5b505afa158015610584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a89190613713565b90506000816000015190508273ffffffffffffffffffffffffffffffffffffffff1663b5ada6d8826040518263ffffffff1660e01b81526004016105ec9190613bcb565b60206040518083038186803b15801561060457600080fd5b505afa158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c91906136e6565b935050505092915050565b61064f6125ac565b73ffffffffffffffffffffffffffffffffffffffff1661066d6116c4565b73ffffffffffffffffffffffffffffffffffffffff16146106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba90613e9e565b60405180910390fd5b6106cb610c38565b61070a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070190613d1e565b60405180910390fd5b6107126125b4565b565b61071c6125ac565b73ffffffffffffffffffffffffffffffffffffffff1661073a6116c4565b73ffffffffffffffffffffffffffffffffffffffff1614610790576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078790613e9e565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006107de610c38565b1561081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081590613dde565b60405180910390fd5b600060159054906101000a900460ff1661086d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086490613f1e565b60405180910390fd5b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016108c99190613bcb565b60206040518083038186803b1580156108e157600080fd5b505afa1580156108f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610919919061376d565b101561095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190613e5e565b60405180910390fd5b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016109b8929190613be6565b60206040518083038186803b1580156109d057600080fd5b505afa1580156109e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a08919061376d565b1015610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4090613e3e565b60405180910390fd5b6000610a5483612655565b905060008111610a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9090613dfe565b60405180910390fd5b610ae8333085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612734909392919063ffffffff16565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610b45929190613c7d565b602060405180830381600087803b158015610b5f57600080fd5b505af1158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9791906136e6565b507fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383604051610bed93929190613c46565b60405180910390a17f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968853382604051610c26929190613c7d565b60405180910390a16001915050919050565b60008060149054906101000a900460ff16905090565b610c566125ac565b73ffffffffffffffffffffffffffffffffffffffff16610c746116c4565b73ffffffffffffffffffffffffffffffffffffffff1614610cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc190613e9e565b60405180910390fd5b610cd460006127bd565b565b610cde6125ac565b73ffffffffffffffffffffffffffffffffffffffff16610cfc6116c4565b73ffffffffffffffffffffffffffffffffffffffff1614610d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4990613e9e565b60405180910390fd5b610d5a610c38565b610d99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9090613d1e565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610df69190613bcb565b60206040518083038186803b158015610e0e57600080fd5b505afa158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e46919061376d565b905060005b81811015610fa357600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3085600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c5930876040518363ffffffff1660e01b8152600401610ef0929190613c7d565b60206040518083038186803b158015610f0857600080fd5b505afa158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f40919061376d565b6040518463ffffffff1660e01b8152600401610f5e93929190613c0f565b600060405180830381600087803b158015610f7857600080fd5b505af1158015610f8c573d6000803e3d6000fd5b505050508080610f9b90614436565b915050610e4b565b505050565b610fb06125ac565b73ffffffffffffffffffffffffffffffffffffffff16610fce6116c4565b73ffffffffffffffffffffffffffffffffffffffff1614611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b90613e9e565b60405180910390fd5b61102c610c38565b61106b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106290613d1e565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110c89190613bcb565b60206040518083038186803b1580156110e057600080fd5b505afa1580156110f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611118919061376d565b14611158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114f90613ebe565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111b59190613bcb565b60206040518083038186803b1580156111cd57600080fd5b505afa1580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611205919061376d565b14611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c90613f7e565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112a29190613bcb565b60206040518083038186803b1580156112ba57600080fd5b505afa1580156112ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f2919061376d565b14611332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132990613e7e565b60405180910390fd5b600061133c6116c4565b90508073ffffffffffffffffffffffffffffffffffffffff16ff5b61135f6125ac565b73ffffffffffffffffffffffffffffffffffffffff1661137d6116c4565b73ffffffffffffffffffffffffffffffffffffffff16146113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca90613e9e565b60405180910390fd5b6113db610c38565b1561141b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141290613dde565b60405180910390fd5b611423612881565b565b61142d6125ac565b73ffffffffffffffffffffffffffffffffffffffff1661144b6116c4565b73ffffffffffffffffffffffffffffffffffffffff16146114a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149890613e9e565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006114ef6125ac565b73ffffffffffffffffffffffffffffffffffffffff1661150d6116c4565b73ffffffffffffffffffffffffffffffffffffffff1614611563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155a90613e9e565b60405180910390fd5b600060159054906101000a900460ff16156115b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115aa90613d7e565b60405180910390fd5b60006115bd612924565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930611631611609612965565b61162361161461297a565b8761298f90919063ffffffff16565b6129a590919063ffffffff16565b6040518363ffffffff1660e01b815260040161164e929190613c7d565b602060405180830381600087803b15801561166857600080fd5b505af115801561167c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a091906136e6565b506001600060156101000a81548160ff021916908315150217905550600191505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006116f7610c38565b15611737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172e90613dde565b60405180910390fd5b600060159054906101000a900460ff16611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d90613f1e565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180d90613fbe565b60405180910390fd5b600115156118248484610517565b151514611866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185d90613d9e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016118b69190613fde565b60206040518083038186803b1580156118ce57600080fd5b505afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119069190613589565b73ffffffffffffffffffffffffffffffffffffffff161461195c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195390613ede565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b81526004016119ac9190613fde565b60206040518083038186803b1580156119c457600080fd5b505afa1580156119d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fc9190613589565b73ffffffffffffffffffffffffffffffffffffffff1614611a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4990613cfe565b60405180910390fd5b6000611a5e84846129bb565b905060008111611aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9a90613f5e565b60405180910390fd5b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611aff9190613bcb565b60206040518083038186803b158015611b1757600080fd5b505afa158015611b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4f919061376d565b1015611b90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8790613e1e565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166342842e0e3330866040518463ffffffff1660e01b8152600401611bcd93929190613c46565b600060405180830381600087803b158015611be757600080fd5b505af1158015611bfb573d6000803e3d6000fd5b50505050611c4c3382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612b6b9092919063ffffffff16565b7fc7e8b1bdbecdc8a549557efb2a2ab715cff51630caead31610000019e61dfa4b843385604051611c7f93929190613c46565b60405180910390a1600191505092915050565b6000611c9c610c38565b15611cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd390613dde565b60405180910390fd5b600060159054906101000a900460ff16611d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2290613f1e565b60405180910390fd5b81600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611d879190613bcb565b60206040518083038186803b158015611d9f57600080fd5b505afa158015611db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd7919061376d565b1015611e18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0f90613f9e565b60405180910390fd5b81600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611e76929190613be6565b60206040518083038186803b158015611e8e57600080fd5b505afa158015611ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec6919061376d565b1015611f07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efe90613d3e565b60405180910390fd5b6000611f1283612bf1565b905060008111611f57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4e90613f5e565b60405180910390fd5b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611fb39190613bcb565b60206040518083038186803b158015611fcb57600080fd5b505afa158015611fdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612003919061376d565b1015612044576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203b90613e1e565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b81526004016120a1929190613c7d565b602060405180830381600087803b1580156120bb57600080fd5b505af11580156120cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f391906136e6565b506121413382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612b6b9092919063ffffffff16565b7f53fee901a59b4d2e659e450f8db17fc345e158fe408d2b39faf66d1f8c4a54fe600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338360405161219693929190613c46565b60405180910390a17fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca533826040516121cf929190613c7d565b60405180910390a16001915050919050565b6121e96125ac565b73ffffffffffffffffffffffffffffffffffffffff166122076116c4565b73ffffffffffffffffffffffffffffffffffffffff161461225d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225490613e9e565b60405180910390fd5b612265610c38565b6122a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229b90613d1e565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b81526004016122ff9190613bcb565b600060405180830381600087803b15801561231957600080fd5b505af115801561232d573d6000803e3d6000fd5b5050505050565b61233c6125ac565b73ffffffffffffffffffffffffffffffffffffffff1661235a6116c4565b73ffffffffffffffffffffffffffffffffffffffff16146123b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a790613e9e565b60405180910390fd5b6123b8610c38565b6123f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ee90613d1e565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124329190613bcb565b60206040518083038186803b15801561244a57600080fd5b505afa15801561245e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612482919061376d565b90506124af82828573ffffffffffffffffffffffffffffffffffffffff16612b6b9092919063ffffffff16565b505050565b6124bc6125ac565b73ffffffffffffffffffffffffffffffffffffffff166124da6116c4565b73ffffffffffffffffffffffffffffffffffffffff1614612530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252790613e9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259790613d5e565b60405180910390fd5b6125a9816127bd565b50565b600033905090565b6125bc610c38565b6125fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f290613d1e565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61263e6125ac565b60405161264b9190613bcb565b60405180910390a1565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126c057600080fd5b505afa1580156126d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f8919061376d565b90506000612704612924565b905061272b8161271d848761298f90919063ffffffff16565b6129a590919063ffffffff16565b92505050919050565b6127b7846323b872dd60e01b85858560405160240161275593929190613c46565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cd0565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612889610c38565b156128c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c090613dde565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861290d6125ac565b60405161291a9190613bcb565b60405180910390a1565b6000612960612931612d97565b61295261293c612f79565b61294461302b565b6131af90919063ffffffff16565b6131af90919063ffffffff16565b905090565b60006006600a612975919061415b565b905090565b60006012600a61298a919061415b565b905090565b6000818361299d9190614279565b905092915050565b600081836129b391906140d7565b905092915050565b60008083905060008173ffffffffffffffffffffffffffffffffffffffff16638c7a63ae856040518263ffffffff1660e01b81526004016129fc9190613fde565b60a06040518083038186803b158015612a1457600080fd5b505afa158015612a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4c9190613713565b90506000816040015190506000612a74836080015184606001516131af90919063ffffffff16565b905060008360000151905060008190506000808273ffffffffffffffffffffffffffffffffffffffff16634d02fe6f8b6040518263ffffffff1660e01b8152600401612ac09190613fde565b604080518083038186803b158015612ad757600080fd5b505afa158015612aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0f919061379a565b91509150600082905086821015612b3557612b3382826131af90919063ffffffff16565b505b612b5a81612b4c888a6131c590919063ffffffff16565b6131af90919063ffffffff16565b995050505050505050505092915050565b612bec8363a9059cbb60e01b8484604051602401612b8a929190613c7d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cd0565b505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c5c57600080fd5b505afa158015612c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c94919061376d565b90506000612ca0612924565b9050612cc782612cb9838761298f90919063ffffffff16565b6129a590919063ffffffff16565b92505050919050565b6000612d32826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166131db9092919063ffffffff16565b9050600081511115612d925780806020019051810190612d5291906136e6565b612d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8890613f3e565b60405180910390fd5b5b505050565b600080600090506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612dfb9190613bcb565b60206040518083038186803b158015612e1357600080fd5b505afa158015612e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4b919061376d565b905060005b81811015612f5757612f42612f33600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c5930866040518363ffffffff1660e01b8152600401612ede929190613c7d565b60206040518083038186803b158015612ef657600080fd5b505afa158015612f0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2e919061376d565b6129bb565b846131af90919063ffffffff16565b92508080612f4f90614436565b915050612e50565b50612f72612f63612965565b8361298f90919063ffffffff16565b9250505090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612fd69190613bcb565b60206040518083038186803b158015612fee57600080fd5b505afa158015613002573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613026919061376d565b905090565b60006131aa6131a561303b6131f3565b613197600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663872697296040518163ffffffff1660e01b815260040160206040518083038186803b1580156130a657600080fd5b505afa1580156130ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130de919061376d565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016131399190613bcb565b60206040518083038186803b15801561315157600080fd5b505afa158015613165573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613189919061376d565b61298f90919063ffffffff16565b6129a590919063ffffffff16565b613208565b905090565b600081836131bd9190614081565b905092915050565b600081836131d391906142d3565b905092915050565b60606131ea8484600085613244565b90509392505050565b60006012600a613203919061415b565b905090565b600061323d61322e613218612965565b6132206131f3565b6129a590919063ffffffff16565b836129a590919063ffffffff16565b9050919050565b606082471015613289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161328090613dbe565b60405180910390fd5b61329285613358565b6132d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132c890613efe565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516132fa9190613bb4565b60006040518083038185875af1925050503d8060008114613337576040519150601f19603f3d011682016040523d82523d6000602084013e61333c565b606091505b509150915061334c82828661337b565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561338b578290506133db565b60008351111561339e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133d29190613cdc565b60405180910390fd5b9392505050565b60006133f56133f08461401e565b613ff9565b90508281526020810184848401111561341157613410614516565b5b61341c8482856143c3565b509392505050565b60008135905061343381614ae0565b92915050565b60008151905061344881614ae0565b92915050565b60008135905061345d81614af7565b92915050565b60008151905061347281614b0e565b92915050565b600082601f83011261348d5761348c61450c565b5b813561349d8482602086016133e2565b91505092915050565b600060a082840312156134bc576134bb614511565b5b6134c660a0613ff9565b905060006134d684828501613439565b60008301525060206134ea84828501613547565b60208301525060406134fe84828501613547565b604083015250606061351284828501613547565b606083015250608061352684828501613547565b60808301525092915050565b60008135905061354181614b25565b92915050565b60008151905061355681614b25565b92915050565b60006020828403121561357257613571614520565b5b600061358084828501613424565b91505092915050565b60006020828403121561359f5761359e614520565b5b60006135ad84828501613439565b91505092915050565b6000602082840312156135cc576135cb614520565b5b60006135da8482850161344e565b91505092915050565b600080604083850312156135fa576135f9614520565b5b600061360885828601613424565b92505060206136198582860161344e565b9150509250929050565b6000806000806080858703121561363d5761363c614520565b5b600061364b87828801613424565b945050602061365c87828801613424565b935050604061366d87828801613532565b925050606085013567ffffffffffffffff81111561368e5761368d61451b565b5b61369a87828801613478565b91505092959194509250565b600080604083850312156136bd576136bc614520565b5b60006136cb85828601613424565b92505060206136dc85828601613532565b9150509250929050565b6000602082840312156136fc576136fb614520565b5b600061370a84828501613463565b91505092915050565b600060a0828403121561372957613728614520565b5b6000613737848285016134a6565b91505092915050565b60006020828403121561375657613755614520565b5b600061376484828501613532565b91505092915050565b60006020828403121561378357613782614520565b5b600061379184828501613547565b91505092915050565b600080604083850312156137b1576137b0614520565b5b60006137bf85828601613547565b92505060206137d085828601613547565b9150509250929050565b6137e38161438d565b82525050565b6137f281614307565b82525050565b6138018161432b565b82525050565b61381081614337565b82525050565b60006138218261404f565b61382b8185614065565b935061383b8185602086016143d2565b80840191505092915050565b60006138528261405a565b61385c8185614070565b935061386c8185602086016143d2565b61387581614525565b840191505092915050565b600061388d602e83614070565b915061389882614543565b604082019050919050565b60006138b0601483614070565b91506138bb82614592565b602082019050919050565b60006138d3603a83614070565b91506138de826145bb565b604082019050919050565b60006138f6602683614070565b91506139018261460a565b604082019050919050565b6000613919602a83614070565b915061392482614659565b604082019050919050565b600061393c601083614070565b9150613947826146a8565b602082019050919050565b600061395f602683614070565b915061396a826146d1565b604082019050919050565b6000613982601083614070565b915061398d82614720565b602082019050919050565b60006139a5603c83614070565b91506139b082614749565b604082019050919050565b60006139c8602e83614070565b91506139d382614798565b604082019050919050565b60006139eb603a83614070565b91506139f6826147e7565b604082019050919050565b6000613a0e602183614070565b9150613a1982614836565b604082019050919050565b6000613a31601d83614070565b9150613a3c82614885565b602082019050919050565b6000613a54602083614070565b9150613a5f826148ae565b602082019050919050565b6000613a77602083614070565b9150613a82826148d7565b602082019050919050565b6000613a9a601c83614070565b9150613aa582614900565b602082019050919050565b6000613abd601d83614070565b9150613ac882614929565b602082019050919050565b6000613ae0602683614070565b9150613aeb82614952565b604082019050919050565b6000613b03602a83614070565b9150613b0e826149a1565b604082019050919050565b6000613b26603583614070565b9150613b31826149f0565b604082019050919050565b6000613b49601e83614070565b9150613b5482614a3f565b602082019050919050565b6000613b6c602183614070565b9150613b7782614a68565b604082019050919050565b6000613b8f601883614070565b9150613b9a82614ab7565b602082019050919050565b613bae81614383565b82525050565b6000613bc08284613816565b915081905092915050565b6000602082019050613be060008301846137e9565b92915050565b6000604082019050613bfb60008301856137e9565b613c0860208301846137e9565b9392505050565b6000606082019050613c2460008301866137e9565b613c3160208301856137da565b613c3e6040830184613ba5565b949350505050565b6000606082019050613c5b60008301866137e9565b613c6860208301856137e9565b613c756040830184613ba5565b949350505050565b6000604082019050613c9260008301856137e9565b613c9f6020830184613ba5565b9392505050565b6000602082019050613cbb60008301846137f8565b92915050565b6000602082019050613cd66000830184613807565b92915050565b60006020820190508181036000830152613cf68184613847565b905092915050565b60006020820190508181036000830152613d1781613880565b9050919050565b60006020820190508181036000830152613d37816138a3565b9050919050565b60006020820190508181036000830152613d57816138c6565b9050919050565b60006020820190508181036000830152613d77816138e9565b9050919050565b60006020820190508181036000830152613d978161390c565b9050919050565b60006020820190508181036000830152613db78161392f565b9050919050565b60006020820190508181036000830152613dd781613952565b9050919050565b60006020820190508181036000830152613df781613975565b9050919050565b60006020820190508181036000830152613e1781613998565b9050919050565b60006020820190508181036000830152613e37816139bb565b9050919050565b60006020820190508181036000830152613e57816139de565b9050919050565b60006020820190508181036000830152613e7781613a01565b9050919050565b60006020820190508181036000830152613e9781613a24565b9050919050565b60006020820190508181036000830152613eb781613a47565b9050919050565b60006020820190508181036000830152613ed781613a6a565b9050919050565b60006020820190508181036000830152613ef781613a8d565b9050919050565b60006020820190508181036000830152613f1781613ab0565b9050919050565b60006020820190508181036000830152613f3781613ad3565b9050919050565b60006020820190508181036000830152613f5781613af6565b9050919050565b60006020820190508181036000830152613f7781613b19565b9050919050565b60006020820190508181036000830152613f9781613b3c565b9050919050565b60006020820190508181036000830152613fb781613b5f565b9050919050565b60006020820190508181036000830152613fd781613b82565b9050919050565b6000602082019050613ff36000830184613ba5565b92915050565b6000614003614014565b905061400f8282614405565b919050565b6000604051905090565b600067ffffffffffffffff821115614039576140386144dd565b5b61404282614525565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061408c82614383565b915061409783614383565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156140cc576140cb61447f565b5b828201905092915050565b60006140e282614383565b91506140ed83614383565b9250826140fd576140fc6144ae565b5b828204905092915050565b6000808291508390505b60018511156141525780860481111561412e5761412d61447f565b5b600185161561413d5780820291505b808102905061414b85614536565b9450614112565b94509492505050565b600061416682614383565b915061417183614383565b925061419e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846141a6565b905092915050565b6000826141b65760019050614272565b816141c45760009050614272565b81600181146141da57600281146141e457614213565b6001915050614272565b60ff8411156141f6576141f561447f565b5b8360020a91508482111561420d5761420c61447f565b5b50614272565b5060208310610133831016604e8410600b84101617156142485782820a9050838111156142435761424261447f565b5b614272565b6142558484846001614108565b9250905081840481111561426c5761426b61447f565b5b81810290505b9392505050565b600061428482614383565b915061428f83614383565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142c8576142c761447f565b5b828202905092915050565b60006142de82614383565b91506142e983614383565b9250828210156142fc576142fb61447f565b5b828203905092915050565b600061431282614363565b9050919050565b600061432482614363565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006143988261439f565b9050919050565b60006143aa826143b1565b9050919050565b60006143bc82614363565b9050919050565b82818337600083830152505050565b60005b838110156143f05780820151818401526020810190506143d5565b838111156143ff576000848401525b50505050565b61440e82614525565b810181811067ffffffffffffffff8211171561442d5761442c6144dd565b5b80604052505050565b600061444182614383565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144745761447361447f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f5573657220686173206e6f7420617070726f76656420746865207661756c742060008201527f666f72207468697320746f6b656e000000000000000000000000000000000000602082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f5573657220686173206e6f7420617070726f76656420746865207661756c742060008201527f666f722073756666696369656e7420616c6c6f797820636f696e000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5661756c742068617320616c726561647920737461727420616363657074696e60008201527f67206465706f7369747300000000000000000000000000000000000000000000602082015250565b7f4e6f7420612076616c696420706f6f6c00000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f54686520616d6f756e74206f6620616c6c6f79782062726f6e7a6520636f696e60008201527f20746f20676574206973206e6f74206c6172676572207468616e203000000000602082015250565b7f546865207661756c7420646f6573206e6f74206861766520737566666963696560008201527f6e7420737461626c6520636f696e000000000000000000000000000000000000602082015250565b7f5573657220686173206e6f7420617070726f76656420746865207661756c742060008201527f666f722073756666696369656e7420737461626c6520636f696e000000000000602082015250565b7f557365722068617320696e73756666696369656e7420737461626c6520636f6960008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f42616c616e6365206f662047464920636f696e206d7573742062652030000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f42616c616e6365206f6620737461626c6520636f696e206d7573742062652030600082015250565b7f5573657220646f6573206e6f74206f776e207468697320746f6b656e00000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5661756c7420686173206e6f7420737461727420616363657074696e6720646560008201527f706f736974730000000000000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460008201527f206973206e6f74206c6172676572207468616e20300000000000000000000000602082015250565b7f42616c616e6365206f66204669647520636f696e206d75737420626520300000600082015250565b7f557365722068617320696e73756666696369656e7420616c6c6f797820636f6960008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420476f6c6466696e636820506f6f6c20546f6b656e0000000000000000600082015250565b614ae981614307565b8114614af457600080fd5b50565b614b0081614319565b8114614b0b57600080fd5b50565b614b178161432b565b8114614b2257600080fd5b50565b614b2e81614383565b8114614b3957600080fd5b5056fea2646970667358221220be4f63b959b7ee630643cd2ba233baedc599cf2f9521effdec19a3c61c6faff664736f6c63430008070033",
  "devdoc": {
    "author": "AlloyX",
    "kind": "dev",
    "methods": {
      "depositAlloyxBronzeTokens(uint256)": {
        "params": {
          "_tokenAmount": "Number of Alloy Tokens"
        }
      },
      "depositNFTToken(address,uint256)": {
        "params": {
          "_tokenAddress": "NFT Address",
          "_tokenID": "NFT ID"
        }
      },
      "depositUSDCCoin(uint256)": {
        "params": {
          "_tokenAmount": "Number of stable coin"
        }
      },
      "isValidPool(address,uint256)": {
        "params": {
          "_tokenAddress": "The backer NFT address",
          "_tokenID": "The backer NFT id"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AlloyX Vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositAlloyxBronzeTokens(uint256)": {
        "notice": "An Alloy token holder can deposit their tokens and redeem them for USDC"
      },
      "depositNFTToken(address,uint256)": {
        "notice": "A Junior token holder can deposit their NFT for stable coin"
      },
      "depositUSDCCoin(uint256)": {
        "notice": "A Liquidity Provider can deposit supported stable coins for Alloy Tokens"
      },
      "isValidPool(address,uint256)": {
        "notice": "Using the PoolTokens interface, check if this is a valid pool"
      },
      "startVaultOperation()": {
        "notice": "Initialize by minting the alloy brown tokens to owner"
      }
    },
    "notice": "Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract uses a pricing oracle to determine the value of the underlying assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2183,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2298,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5497,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "vaultStarted",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5500,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "usdcCoin",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 5503,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "gfiCoin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 5506,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "fiduCoin",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 5509,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "goldFinchPoolToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPoolTokens)6806"
      },
      {
        "astId": 5512,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "alloyxTokenBronze",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AlloyxTokenBronze)4271"
      },
      {
        "astId": 5515,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "alloyTokenSilver",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(AlloyxTokenSilver)4334"
      },
      {
        "astId": 5518,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "seniorPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ISeniorPool)6902"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AlloyxTokenBronze)4271": {
        "encoding": "inplace",
        "label": "contract AlloyxTokenBronze",
        "numberOfBytes": "20"
      },
      "t_contract(AlloyxTokenSilver)4334": {
        "encoding": "inplace",
        "label": "contract AlloyxTokenSilver",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3038": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolTokens)6806": {
        "encoding": "inplace",
        "label": "contract IPoolTokens",
        "numberOfBytes": "20"
      },
      "t_contract(ISeniorPool)6902": {
        "encoding": "inplace",
        "label": "contract ISeniorPool",
        "numberOfBytes": "20"
      }
    }
  }
}
{
  "address": "0x4314c66E637c2108f4166aaD7BFE35030f55C27F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alloyxBronzeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_alloyxSilverAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fiduCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gfiCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_goldFinchTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seniorPoolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositAlloyx",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "DepositNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositStable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PurchaseJunior",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PurchaseSenior",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alloyxAddress",
          "type": "address"
        }
      ],
      "name": "changeAlloyxBronzeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alloyxAddress",
          "type": "address"
        }
      ],
      "name": "changeAlloyxSilverAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        }
      ],
      "name": "changePoolTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seniorPool",
          "type": "address"
        }
      ],
      "name": "changeSeniorPoolAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositAlloyxBronzeTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "depositNFTToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositUSDCCoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "isValidPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrateERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_toAddress",
          "type": "address"
        }
      ],
      "name": "migrateGoldfinchPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        }
      ],
      "name": "purchaseJuniorToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "purchaseSeniorTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVaultOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferAlloyxOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3dca0f70ce6966dfd47950a6555ab2c4103ccc0799a1260497fb3f2dc571223c",
  "receipt": {
    "to": null,
    "from": "0xd988EB2777ec4d844ced75f68148A08310bEFc76",
    "contractAddress": "0x4314c66E637c2108f4166aaD7BFE35030f55C27F",
    "transactionIndex": 1,
    "gasUsed": "4786818",
    "logsBloom": "0x
    "blockHash": "0x39e8b4f2f174455402094294acd474b2cc4b309721de757d33a5e18935297fc2",
    "transactionHash": "0x3dca0f70ce6966dfd47950a6555ab2c4103ccc0799a1260497fb3f2dc571223c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30148037,
        "transactionHash": "0x3dca0f70ce6966dfd47950a6555ab2c4103ccc0799a1260497fb3f2dc571223c",
        "address": "0x4314c66E637c2108f4166aaD7BFE35030f55C27F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d988eb2777ec4d844ced75f68148a08310befc76"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x39e8b4f2f174455402094294acd474b2cc4b309721de757d33a5e18935297fc2"
      }
    ],
    "blockNumber": 30148037,
    "cumulativeGasUsed": "4807818",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb7D25244472518F10f956db778dc88b57968f7A9",
    "0xb5AE032Ad7901B755c9C3C79f148c5AA20513bB3",
    "0xeaE3F227e370d9333a7AF82058DDfd34B1BeB627",
    "0x6A2e821CCD293f6989080370ECe62751B4DAFB8f",
    "0x94fF8A71Cd9f8EE849c8259A7a246eA2ef276D8f",
    "0x94fF8A71Cd9f8EE849c8259A7a246eA2ef276D8f",
    "0x94fF8A71Cd9f8EE849c8259A7a246eA2ef276D8f"
  ],
  "numDeployments": 3,
  "solcInputHash": "b7df6730a121c8a2e44e34efb438aa6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxBronzeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alloyxSilverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fiduCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gfiCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_goldFinchTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seniorPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositAlloyx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseJunior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseSenior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxAddress\",\"type\":\"address\"}],\"name\":\"changeAlloyxBronzeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxAddress\",\"type\":\"address\"}],\"name\":\"changeAlloyxSilverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"changePoolTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seniorPool\",\"type\":\"address\"}],\"name\":\"changeSeniorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAlloyxBronzeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"depositNFTToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDCCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"migrateGoldfinchPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"purchaseJuniorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"purchaseSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVaultOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAlloyxOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AlloyX\",\"kind\":\"dev\",\"methods\":{\"depositAlloyxBronzeTokens(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of Alloy Tokens\"}},\"depositNFTToken(address,uint256)\":{\"params\":{\"_tokenAddress\":\"NFT Address\",\"_tokenID\":\"NFT ID\"}},\"depositUSDCCoin(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of stable coin\"}},\"isValidPool(address,uint256)\":{\"params\":{\"_tokenAddress\":\"The backer NFT address\",\"_tokenID\":\"The backer NFT id\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AlloyX Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositAlloyxBronzeTokens(uint256)\":{\"notice\":\"An Alloy token holder can deposit their tokens and redeem them for USDC\"},\"depositNFTToken(address,uint256)\":{\"notice\":\"A Junior token holder can deposit their NFT for stable coin\"},\"depositUSDCCoin(uint256)\":{\"notice\":\"A Liquidity Provider can deposit supported stable coins for Alloy Tokens\"},\"isValidPool(address,uint256)\":{\"notice\":\"Using the PoolTokens interface, check if this is a valid pool\"},\"startVaultOperation()\":{\"notice\":\"Initialize by minting the alloy brown tokens to owner\"}},\"notice\":\"Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract uses a pricing oracle to determine the value of the underlying assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alloyx/v2.0/AlloyVault.sol\":\"AlloyVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxTokenBronze.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AlloyxTokenBronze is ERC20, Ownable {\\n    constructor() ERC20(\\\"AlloyxTokenBronze\\\", \\\"ABRNZ\\\") {}\\n\\n    function mint(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function alloyBronze() external returns(bool){\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x06400d0e50a859603bf27e856d64c6986ead1550bd3e1df8f02b3e3ceab3b5e8\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxTokenSilver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AlloyxTokenSilver is ERC20, Ownable {\\n    constructor() ERC20(\\\"AlloyxTokenSilver\\\", \\\"ABSLV\\\") {}\\n\\n    function mint(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function alloySilver() external returns(bool){\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc044f269ebdac3923d3dabf2789a8f3eb7ef1555a88a44a8d1e3824485e1ab18\",\"license\":\"MIT\"},\"contracts/alloyx/v2.0/AlloyVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../AlloyxTokenBronze.sol\\\";\\nimport \\\"../AlloyxTokenSilver.sol\\\";\\n\\nimport \\\"../../goldfinch/interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../goldfinch/interfaces/ITranchedPool.sol\\\";\\nimport \\\"../../goldfinch/interfaces/ISeniorPool.sol\\\";\\n\\n/**\\n * @title AlloyX Vault\\n * @notice Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch\\n * and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract\\n * uses a pricing oracle to determine the value of the underlying assets\\n * @author AlloyX\\n */\\ncontract AlloyVault is ERC721Holder, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bool private vaultStarted;\\n    IERC20 private usdcCoin;\\n    IERC20 private gfiCoin;\\n    IERC20 private fiduCoin;\\n    IPoolTokens private goldFinchPoolToken;\\n    AlloyxTokenBronze private alloyxTokenBronze;\\n    AlloyxTokenSilver private alloyTokenSilver;\\n    ISeniorPool private seniorPool;\\n\\n    event DepositStable(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n    event DepositNFT(address _tokenAddress, address _tokenSender, uint256 _tokenID);\\n    event DepositAlloyx(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n    event PurchaseSenior(uint256 amount);\\n    event PurchaseJunior(uint256 amount);\\n    event Mint(address _tokenReceiver, uint256 _tokenAmount);\\n    event Burn(address _tokenReceiver, uint256 _tokenAmount);\\n\\n    constructor(\\n        address _alloyxBronzeAddress,\\n        address _alloyxSilverAddress,\\n        address _usdcCoinAddress,\\n        address _fiduCoinAddress,\\n        address _gfiCoinAddress,\\n        address _goldFinchTokenAddress,\\n        address _seniorPoolAddress\\n    ) {\\n        alloyxTokenBronze = AlloyxTokenBronze(_alloyxBronzeAddress);\\n        alloyTokenSilver = AlloyxTokenSilver(_alloyxSilverAddress);\\n        usdcCoin = IERC20(_usdcCoinAddress);\\n        gfiCoin = IERC20(_gfiCoinAddress);\\n        fiduCoin = IERC20(_fiduCoinAddress);\\n        goldFinchPoolToken = IPoolTokens(_goldFinchTokenAddress);\\n        seniorPool = ISeniorPool(_seniorPoolAddress);\\n        vaultStarted = false;\\n    }\\n\\n    /**\\n     * @notice Alloy Brown Token Value in terms of USDC\\n     */\\n    function getAlloyxBronzeTokenBalanceInUSDC() internal view returns (uint256)  {\\n        return getFiduBalanceInUSDC().add(getUSDCBalance()).add(getGoldFinchPoolTokenBalanceInUSDC());\\n    }\\n\\n    /**\\n     * @notice Fidu Value in Vault in term of USDC\\n     */\\n    function getFiduBalanceInUSDC() internal view returns (uint256)  {\\n        return fiduToUSDC(fiduCoin.balanceOf(address(this)).mul(seniorPool.sharePrice()).div(fiduMantissa()));\\n    }\\n\\n    /**\\n     * @notice USDC Value in Vault\\n     */\\n    function getUSDCBalance() internal view returns (uint256)  {\\n        return usdcCoin.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice GFI Balance in Vault\\n     */\\n    function getGFIBalance() internal view returns (uint256)  {\\n        return gfiCoin.balanceOf(address(this));\\n    }\\n\\n\\n    /**\\n     * @notice GoldFinch PoolToken Value in Value in term of USDC\\n     */\\n    function getGoldFinchPoolTokenBalanceInUSDC() internal view returns (uint256)  {\\n        uint256 total =0;\\n        uint256 balance=goldFinchPoolToken.balanceOf(address(this));\\n        for(uint i=0;i<balance;i++){\\n            total=total.add(getJuniorTokenValue(address(goldFinchPoolToken),goldFinchPoolToken.tokenOfOwnerByIndex(address(this),i)));\\n        }\\n        return total.mul(usdcMantissa());\\n    }\\n\\n    /**\\n     * @notice Convert Alloyx Bronze to USDC amount\\n     */\\n    function alloyxBronzeToUSDC(uint256 amount) internal view returns (uint256) {\\n        uint256 alloyBronzeTotalSupply=alloyxTokenBronze.totalSupply();\\n        uint256 totalVaultAlloyxBronzeValueInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        return amount.mul(totalVaultAlloyxBronzeValueInUSDC).div(alloyBronzeTotalSupply);\\n    }\\n\\n    /**\\n     * @notice Convert USDC Amount to Alloyx Bronze\\n     */\\n    function USDCtoAlloyxBronze(uint256 amount) internal view returns (uint256) {\\n        uint256 alloyBronzeTotalSupply=alloyxTokenBronze.totalSupply();\\n        uint256 totalVaultAlloyxBronzeValueInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        return amount.mul(alloyBronzeTotalSupply).div(totalVaultAlloyxBronzeValueInUSDC);\\n    }\\n\\n\\n    function fiduToUSDC(uint256 amount) internal pure returns (uint256) {\\n        return amount.div(fiduMantissa().div(usdcMantissa()));\\n    }\\n\\n    function fiduMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(18);\\n    }\\n\\n    function alloyMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(18);\\n    }\\n\\n    function usdcMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(6);\\n    }\\n\\n\\n    function changeAlloyxBronzeAddress(address _alloyxAddress) external onlyOwner {\\n        alloyxTokenBronze = AlloyxTokenBronze(_alloyxAddress);\\n    }\\n\\n    function changeAlloyxSilverAddress(address _alloyxAddress) external onlyOwner {\\n        alloyTokenSilver = AlloyxTokenSilver(_alloyxAddress);\\n    }\\n\\n    function changeSeniorPoolAddress(address _seniorPool) external onlyOwner {\\n        seniorPool = ISeniorPool(_seniorPool);\\n    }\\n\\n    function changePoolTokenAddress(address _poolToken) external onlyOwner {\\n        goldFinchPoolToken = IPoolTokens(_poolToken);\\n    }\\n\\n    modifier whenVaultStarted() {\\n        require(vaultStarted, \\\"Vault has not start accepting deposits\\\");\\n        _;\\n    }\\n\\n    modifier whenVaultNotStarted() {\\n        require(!vaultStarted, \\\"Vault has already start accepting deposits\\\");\\n        _;\\n    }\\n\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Initialize by minting the alloy brown tokens to owner\\n     */\\n    function startVaultOperation() external onlyOwner whenVaultNotStarted returns (bool) {\\n        uint256 totalBalanceInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        alloyxTokenBronze.mint(address(this), totalBalanceInUSDC.mul(alloyMantissa()).div(usdcMantissa()));\\n        vaultStarted=true;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\\n     * @param _tokenAmount Number of Alloy Tokens\\n     */\\n    function depositAlloyxBronzeTokens(uint256 _tokenAmount) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(alloyxTokenBronze.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient alloyx coin\\\");\\n        require(alloyxTokenBronze.allowance(msg.sender, address(this)) >= _tokenAmount, \\\"User has not approved the vault for sufficient alloyx coin\\\");\\n        uint256 amountToWithdraw = alloyxBronzeToUSDC(_tokenAmount);\\n        require(amountToWithdraw > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n        require(usdcCoin.balanceOf(address(this)) >= amountToWithdraw, \\\"The vault does not have sufficient stable coin\\\");\\n        alloyxTokenBronze.burn(msg.sender, amountToWithdraw);\\n        usdcCoin.safeTransfer(msg.sender, amountToWithdraw);\\n        emit DepositAlloyx(address(alloyxTokenBronze), msg.sender, amountToWithdraw);\\n        emit Burn(msg.sender, amountToWithdraw);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\\n     * @param _tokenAmount Number of stable coin\\n     */\\n    function depositUSDCCoin(uint256 _tokenAmount) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(usdcCoin.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient stable coin\\\");\\n        require(\\n            usdcCoin.allowance(msg.sender, address(this)) >= _tokenAmount,\\n            \\\"User has not approved the vault for sufficient stable coin\\\"\\n        );\\n        uint256 amountToMint = USDCtoAlloyxBronze(_tokenAmount);\\n        require(amountToMint > 0, \\\"The amount of alloyx bronze coin to get is not larger than 0\\\");\\n        usdcCoin.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n        alloyxTokenBronze.mint(msg.sender, amountToMint);\\n        emit DepositStable(address(usdcCoin), msg.sender, amountToMint);\\n        emit Mint(msg.sender, amountToMint);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice A Junior token holder can deposit their NFT for stable coin\\n     * @param _tokenAddress NFT Address\\n     * @param _tokenID NFT ID\\n     */\\n    function depositNFTToken(address _tokenAddress, uint256 _tokenID) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(_tokenAddress == address(goldFinchPoolToken), \\\"Not Goldfinch Pool Token\\\");\\n        require(isValidPool(_tokenAddress, _tokenID) == true, \\\"Not a valid pool\\\");\\n        require(IERC721(_tokenAddress).ownerOf(_tokenID) == msg.sender, \\\"User does not own this token\\\");\\n        require(\\n            IERC721(_tokenAddress).getApproved(_tokenID) == address(this),\\n            \\\"User has not approved the vault for this token\\\"\\n        );\\n        uint256 purchasePrice = getJuniorTokenValue(_tokenAddress, _tokenID);\\n        require(purchasePrice > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n        require(usdcCoin.balanceOf(address(this)) >= purchasePrice, \\\"The vault does not have sufficient stable coin\\\");\\n        IERC721(_tokenAddress).safeTransferFrom(msg.sender, address(this), _tokenID);\\n        usdcCoin.safeTransfer(msg.sender,purchasePrice);\\n        emit DepositNFT(_tokenAddress, msg.sender, _tokenID);\\n        return true;\\n    }\\n\\n    function destroy() external onlyOwner whenPaused {\\n        require(usdcCoin.balanceOf(address(this)) == 0, \\\"Balance of stable coin must be 0\\\");\\n        require(fiduCoin.balanceOf(address(this)) == 0, \\\"Balance of Fidu coin must be 0\\\");\\n        require(gfiCoin.balanceOf(address(this)) == 0, \\\"Balance of GFI coin must be 0\\\");\\n\\n        address payable addr = payable(address(owner()));\\n        selfdestruct(addr);\\n    }\\n\\n    /**\\n     * @notice Using the PoolTokens interface, check if this is a valid pool\\n     * @param _tokenAddress The backer NFT address\\n     * @param _tokenID The backer NFT id\\n     */\\n    function isValidPool(address _tokenAddress, uint256 _tokenID) public view returns (bool) {\\n        IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n        IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n        address tranchedPool = tokenInfo.pool;\\n        return poolTokenContract.validPool(tranchedPool);\\n    }\\n\\n    /**\\n     * @notice Using the Goldfinch contracts, read the principal, redeemed and redeemable values\\n     * @param _tokenAddress The backer NFT address\\n     * @param _tokenID The backer NFT id\\n     */\\n    function getJuniorTokenValue(address _tokenAddress, uint256 _tokenID) internal view returns (uint256) {\\n        // first get the amount redeemed and the principal\\n        IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n        IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n        uint256 principalAmount = tokenInfo.principalAmount;\\n        uint256 totalRedeemed = tokenInfo.principalRedeemed.add(tokenInfo.interestRedeemed);\\n\\n        // now get the redeemable values for the given token\\n        address tranchedPoolAddress = tokenInfo.pool;\\n        ITranchedPool tranchedTokenContract = ITranchedPool(tranchedPoolAddress);\\n        (uint256 interestRedeemable, uint256 principalRedeemable) = tranchedTokenContract.availableToWithdraw(_tokenID);\\n        uint256 totalRedeemable = interestRedeemable;\\n        // only add principal here if there have been drawdowns otherwise it overstates the value\\n        if (principalRedeemable < principalAmount) {\\n            totalRedeemable.add(principalRedeemable);\\n        }\\n        return principalAmount.sub(totalRedeemed).add(totalRedeemable);\\n    }\\n\\n    function purchaseJuniorToken(\\n        uint256 amount,\\n        address poolAddress,\\n        uint256 tranche\\n    ) external onlyOwner {\\n        require(usdcCoin.balanceOf(address(this)) >= amount, \\\"Vault has insufficent stable coin\\\");\\n        require(amount > 0, \\\"Must deposit more than zero\\\");\\n        ITranchedPool juniorPool = ITranchedPool(poolAddress);\\n        juniorPool.deposit(amount, tranche);\\n        emit PurchaseJunior(amount);\\n    }\\n\\n    function purchaseSeniorTokens(uint256 amount, address poolAddress) external onlyOwner {\\n        require(usdcCoin.balanceOf(address(this)) >= amount, \\\"Vault has insufficent stable coin\\\");\\n        require(amount > 0, \\\"Must deposit more than zero\\\");\\n        ISeniorPool seniorPool = ISeniorPool(poolAddress);\\n        seniorPool.deposit(amount);\\n        emit PurchaseSenior(amount);\\n    }\\n\\n    function migrateGoldfinchPoolTokens(\\n        address payable _toAddress\\n    ) external onlyOwner whenPaused {\\n        uint256 balance=goldFinchPoolToken.balanceOf(address(this));\\n        for(uint i=0;i<balance;i++){\\n            goldFinchPoolToken.safeTransferFrom(address(this), _toAddress, goldFinchPoolToken.tokenOfOwnerByIndex(address(this),i));\\n        }\\n    }\\n\\n    function migrateERC20(address _tokenAddress, address payable _to) external onlyOwner whenPaused {\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n        IERC20(_tokenAddress).safeTransfer(_to, balance);\\n    }\\n\\n    function transferAlloyxOwnership(address _to) external onlyOwner whenPaused {\\n        alloyxTokenBronze.transferOwnership(_to);\\n    }\\n}\\n\",\"keccak256\":\"0x9cbe5d8509b490632b87161db6fdb49b0c37c7469c499cbd9876387f99c2851a\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfea45d04903141890eeb3739f2481a1b3fe94cdfa58457e7d2fe9c962a112725\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPoolTokens is IERC721,IERC721Enumerable {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaee8c8d68f48c40050e4d1e5fca57ab3edecec79e9a607aa811a149f371cd168\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x1049267cb4e91fd7045df567ee4a5be48101d4ea60f9bc45084f17adc85ad774\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n}\\n\",\"keccak256\":\"0x34ab69f9ef19409cdadf831a915b65889928d9a89bc4cb28cd9084cef7d94db8\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xb5211aa4a83a69c7ebdb3a4f21fbd432c809c1e1f3406295287f6628bc0e7205\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806383197ef0116100b8578063b338ad161161007c578063b338ad1614610301578063bb74c05814610331578063d8ec060814610361578063d905e9b41461037d578063df16694a14610399578063f2fde38b146103b557610142565b806383197ef0146102955780638456cb591461029f5780638682caf8146102a95780638d6f4d21146102c55780638da5cb5b146102e357610142565b80633f4ba83a1161010a5780633f4ba83a146101fb578063460408721461020557806353c98f5a146102215780635c975abb14610251578063715018a61461026f5780637c9054571461027957610142565b806307c0cf3d14610147578063150b7a02146101635780631a97749d146101935780631b61eb67146101af578063354d3c30146101cb575b600080fd5b610161600480360381019061015c9190613a9f565b6103d1565b005b61017d60048036038101906101789190613b66565b610491565b60405161018a91906142dd565b60405180910390f35b6101ad60048036038101906101a89190613a9f565b6104a5565b005b6101c960048036038101906101c49190613d1d565b610565565b005b6101e560048036038101906101e09190613be9565b6107e1565b6040516101f291906142c2565b60405180910390f35b610203610911565b005b61021f600480360381019061021a9190613a9f565b6109de565b005b61023b60048036038101906102369190613c83565b610a9e565b60405161024891906142c2565b60405180910390f35b610259610f02565b60405161026691906142c2565b60405180910390f35b610277610f18565b005b610293600480360381019061028e9190613af9565b610fa0565b005b61029d611272565b005b6102a7611621565b005b6102c360048036038101906102be9190613a9f565b6116ef565b005b6102cd6117af565b6040516102da91906142c2565b60405180910390f35b6102eb61198e565b6040516102f891906141e7565b60405180910390f35b61031b60048036038101906103169190613be9565b6119b7565b60405161032891906142c2565b60405180910390f35b61034b60048036038101906103469190613c83565b611f5c565b60405161035891906142c2565b60405180910390f35b61037b60048036038101906103769190613a9f565b6124ab565b005b61039760048036038101906103929190613b26565b6125fe565b005b6103b360048036038101906103ae9190613cdd565b61277e565b005b6103cf60048036038101906103ca9190613a9f565b6129f7565b005b6103d9612aef565b73ffffffffffffffffffffffffffffffffffffffff166103f761198e565b73ffffffffffffffffffffffffffffffffffffffff161461044d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610444906144da565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600063150b7a0260e01b9050949350505050565b6104ad612aef565b73ffffffffffffffffffffffffffffffffffffffff166104cb61198e565b73ffffffffffffffffffffffffffffffffffffffff1614610521576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610518906144da565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61056d612aef565b73ffffffffffffffffffffffffffffffffffffffff1661058b61198e565b73ffffffffffffffffffffffffffffffffffffffff16146105e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d8906144da565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161063d91906141e7565b60206040518083038186803b15801561065557600080fd5b505afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d9190613cb0565b10156106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c59061435a565b60405180910390fd5b60008311610711576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107089061461a565b60405180910390fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff1663e2bbb15885846040518363ffffffff1660e01b8152600401610751929190614655565b602060405180830381600087803b15801561076b57600080fd5b505af115801561077f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a39190613cb0565b507f7a3794cf7d311106018524dfd41878138e4264f1bee18e53f1c180a1627fa2b8846040516107d3919061463a565b60405180910390a150505050565b60008083905060008173ffffffffffffffffffffffffffffffffffffffff16638c7a63ae856040518263ffffffff1660e01b8152600401610822919061463a565b60a06040518083038186803b15801561083a57600080fd5b505afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190613c56565b90506000816000015190508273ffffffffffffffffffffffffffffffffffffffff1663b5ada6d8826040518263ffffffff1660e01b81526004016108b691906141e7565b60206040518083038186803b1580156108ce57600080fd5b505afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190613c29565b935050505092915050565b610919612aef565b73ffffffffffffffffffffffffffffffffffffffff1661093761198e565b73ffffffffffffffffffffffffffffffffffffffff161461098d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610984906144da565b60405180910390fd5b610995610f02565b6109d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cb9061433a565b60405180910390fd5b6109dc612af7565b565b6109e6612aef565b73ffffffffffffffffffffffffffffffffffffffff16610a0461198e565b73ffffffffffffffffffffffffffffffffffffffff1614610a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a51906144da565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610aa8610f02565b15610ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adf9061441a565b60405180910390fd5b600060159054906101000a900460ff16610b37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2e9061455a565b60405180910390fd5b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610b9391906141e7565b60206040518083038186803b158015610bab57600080fd5b505afa158015610bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be39190613cb0565b1015610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b9061449a565b60405180910390fd5b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610c82929190614202565b60206040518083038186803b158015610c9a57600080fd5b505afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd29190613cb0565b1015610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a9061447a565b60405180910390fd5b6000610d1e83612b98565b905060008111610d63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5a9061443a565b60405180910390fd5b610db2333085600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612c77909392919063ffffffff16565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610e0f929190614299565b602060405180830381600087803b158015610e2957600080fd5b505af1158015610e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e619190613c29565b507fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383604051610eb793929190614262565b60405180910390a17f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968853382604051610ef0929190614299565b60405180910390a16001915050919050565b60008060149054906101000a900460ff16905090565b610f20612aef565b73ffffffffffffffffffffffffffffffffffffffff16610f3e61198e565b73ffffffffffffffffffffffffffffffffffffffff1614610f94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8b906144da565b60405180910390fd5b610f9e6000612d00565b565b610fa8612aef565b73ffffffffffffffffffffffffffffffffffffffff16610fc661198e565b73ffffffffffffffffffffffffffffffffffffffff161461101c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611013906144da565b60405180910390fd5b611024610f02565b611063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105a9061433a565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110c091906141e7565b60206040518083038186803b1580156110d857600080fd5b505afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190613cb0565b905060005b8181101561126d57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3085600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c5930876040518363ffffffff1660e01b81526004016111ba929190614299565b60206040518083038186803b1580156111d257600080fd5b505afa1580156111e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120a9190613cb0565b6040518463ffffffff1660e01b81526004016112289392919061422b565b600060405180830381600087803b15801561124257600080fd5b505af1158015611256573d6000803e3d6000fd5b50505050808061126590614abb565b915050611115565b505050565b61127a612aef565b73ffffffffffffffffffffffffffffffffffffffff1661129861198e565b73ffffffffffffffffffffffffffffffffffffffff16146112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e5906144da565b60405180910390fd5b6112f6610f02565b611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132c9061433a565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161139291906141e7565b60206040518083038186803b1580156113aa57600080fd5b505afa1580156113be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e29190613cb0565b14611422576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611419906144fa565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161147f91906141e7565b60206040518083038186803b15801561149757600080fd5b505afa1580156114ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cf9190613cb0565b1461150f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611506906145ba565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161156c91906141e7565b60206040518083038186803b15801561158457600080fd5b505afa158015611598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bc9190613cb0565b146115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f3906144ba565b60405180910390fd5b600061160661198e565b90508073ffffffffffffffffffffffffffffffffffffffff16ff5b611629612aef565b73ffffffffffffffffffffffffffffffffffffffff1661164761198e565b73ffffffffffffffffffffffffffffffffffffffff161461169d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611694906144da565b60405180910390fd5b6116a5610f02565b156116e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116dc9061441a565b60405180910390fd5b6116ed612dc4565b565b6116f7612aef565b73ffffffffffffffffffffffffffffffffffffffff1661171561198e565b73ffffffffffffffffffffffffffffffffffffffff161461176b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611762906144da565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006117b9612aef565b73ffffffffffffffffffffffffffffffffffffffff166117d761198e565b73ffffffffffffffffffffffffffffffffffffffff161461182d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611824906144da565b60405180910390fd5b600060159054906101000a900460ff161561187d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611874906143ba565b60405180910390fd5b6000611887612e67565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19306118fb6118d3612ea8565b6118ed6118de612ebd565b87612ed290919063ffffffff16565b612ee890919063ffffffff16565b6040518363ffffffff1660e01b8152600401611918929190614299565b602060405180830381600087803b15801561193257600080fd5b505af1158015611946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196a9190613c29565b506001600060156101000a81548160ff021916908315150217905550600191505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006119c1610f02565b15611a01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f89061441a565b60405180910390fd5b600060159054906101000a900460ff16611a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a479061455a565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad7906145fa565b60405180910390fd5b60011515611aee84846107e1565b151514611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b27906143da565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401611b80919061463a565b60206040518083038186803b158015611b9857600080fd5b505afa158015611bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd09190613acc565b73ffffffffffffffffffffffffffffffffffffffff1614611c26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1d9061451a565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b8152600401611c76919061463a565b60206040518083038186803b158015611c8e57600080fd5b505afa158015611ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc69190613acc565b73ffffffffffffffffffffffffffffffffffffffff1614611d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d139061431a565b60405180910390fd5b6000611d288484612efe565b905060008111611d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d649061459a565b60405180910390fd5b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611dc991906141e7565b60206040518083038186803b158015611de157600080fd5b505afa158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190613cb0565b1015611e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e519061445a565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166342842e0e3330866040518463ffffffff1660e01b8152600401611e9793929190614262565b600060405180830381600087803b158015611eb157600080fd5b505af1158015611ec5573d6000803e3d6000fd5b50505050611f163382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130ae9092919063ffffffff16565b7fc7e8b1bdbecdc8a549557efb2a2ab715cff51630caead31610000019e61dfa4b843385604051611f4993929190614262565b60405180910390a1600191505092915050565b6000611f66610f02565b15611fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9d9061441a565b60405180910390fd5b600060159054906101000a900460ff16611ff5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fec9061455a565b60405180910390fd5b81600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161205191906141e7565b60206040518083038186803b15801561206957600080fd5b505afa15801561207d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a19190613cb0565b10156120e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d9906145da565b60405180910390fd5b81600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401612140929190614202565b60206040518083038186803b15801561215857600080fd5b505afa15801561216c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121909190613cb0565b10156121d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c89061437a565b60405180910390fd5b60006121dc83613134565b905060008111612221576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122189061459a565b60405180910390fd5b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161227d91906141e7565b60206040518083038186803b15801561229557600080fd5b505afa1580156122a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cd9190613cb0565b101561230e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123059061445a565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b815260040161236b929190614299565b602060405180830381600087803b15801561238557600080fd5b505af1158015612399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bd9190613c29565b5061240b3382600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130ae9092919063ffffffff16565b7f53fee901a59b4d2e659e450f8db17fc345e158fe408d2b39faf66d1f8c4a54fe600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338360405161246093929190614262565b60405180910390a17fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca53382604051612499929190614299565b60405180910390a16001915050919050565b6124b3612aef565b73ffffffffffffffffffffffffffffffffffffffff166124d161198e565b73ffffffffffffffffffffffffffffffffffffffff1614612527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251e906144da565b60405180910390fd5b61252f610f02565b61256e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125659061433a565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b81526004016125c991906141e7565b600060405180830381600087803b1580156125e357600080fd5b505af11580156125f7573d6000803e3d6000fd5b5050505050565b612606612aef565b73ffffffffffffffffffffffffffffffffffffffff1661262461198e565b73ffffffffffffffffffffffffffffffffffffffff161461267a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612671906144da565b60405180910390fd5b612682610f02565b6126c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b89061433a565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016126fc91906141e7565b60206040518083038186803b15801561271457600080fd5b505afa158015612728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274c9190613cb0565b905061277982828573ffffffffffffffffffffffffffffffffffffffff166130ae9092919063ffffffff16565b505050565b612786612aef565b73ffffffffffffffffffffffffffffffffffffffff166127a461198e565b73ffffffffffffffffffffffffffffffffffffffff16146127fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f1906144da565b60405180910390fd5b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161285691906141e7565b60206040518083038186803b15801561286e57600080fd5b505afa158015612882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a69190613cb0565b10156128e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128de9061435a565b60405180910390fd5b6000821161292a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129219061461a565b60405180910390fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663b6b55f25846040518263ffffffff1660e01b8152600401612968919061463a565b602060405180830381600087803b15801561298257600080fd5b505af1158015612996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ba9190613cb0565b507fd483110686f79d1f5932d32add1024998649ddca927700b75bea458b4cb7cde6836040516129ea919061463a565b60405180910390a1505050565b6129ff612aef565b73ffffffffffffffffffffffffffffffffffffffff16612a1d61198e565b73ffffffffffffffffffffffffffffffffffffffff1614612a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6a906144da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ada9061439a565b60405180910390fd5b612aec81612d00565b50565b600033905090565b612aff610f02565b612b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b359061433a565b60405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612b81612aef565b604051612b8e91906141e7565b60405180910390a1565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c0357600080fd5b505afa158015612c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3b9190613cb0565b90506000612c47612e67565b9050612c6e81612c608487612ed290919063ffffffff16565b612ee890919063ffffffff16565b92505050919050565b612cfa846323b872dd60e01b858585604051602401612c9893929190614262565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613213565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612dcc610f02565b15612e0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e039061441a565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e50612aef565b604051612e5d91906141e7565b60405180910390a1565b6000612ea3612e746132da565b612e95612e7f6134bc565b612e8761356e565b6136f290919063ffffffff16565b6136f290919063ffffffff16565b905090565b60006006600a612eb891906147e0565b905090565b60006012600a612ecd91906147e0565b905090565b60008183612ee091906148fe565b905092915050565b60008183612ef6919061475c565b905092915050565b60008083905060008173ffffffffffffffffffffffffffffffffffffffff16638c7a63ae856040518263ffffffff1660e01b8152600401612f3f919061463a565b60a06040518083038186803b158015612f5757600080fd5b505afa158015612f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8f9190613c56565b90506000816040015190506000612fb7836080015184606001516136f290919063ffffffff16565b905060008360000151905060008190506000808273ffffffffffffffffffffffffffffffffffffffff16634d02fe6f8b6040518263ffffffff1660e01b8152600401613003919061463a565b604080518083038186803b15801561301a57600080fd5b505afa15801561302e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130529190613d70565b915091506000829050868210156130785761307682826136f290919063ffffffff16565b505b61309d8161308f888a61370890919063ffffffff16565b6136f290919063ffffffff16565b995050505050505050505092915050565b61312f8363a9059cbb60e01b84846040516024016130cd929190614299565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613213565b505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561319f57600080fd5b505afa1580156131b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d79190613cb0565b905060006131e3612e67565b905061320a826131fc8387612ed290919063ffffffff16565b612ee890919063ffffffff16565b92505050919050565b6000613275826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661371e9092919063ffffffff16565b90506000815111156132d557808060200190518101906132959190613c29565b6132d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132cb9061457a565b60405180910390fd5b5b505050565b600080600090506000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161333e91906141e7565b60206040518083038186803b15801561335657600080fd5b505afa15801561336a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338e9190613cb0565b905060005b8181101561349a57613485613476600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c5930866040518363ffffffff1660e01b8152600401613421929190614299565b60206040518083038186803b15801561343957600080fd5b505afa15801561344d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134719190613cb0565b612efe565b846136f290919063ffffffff16565b9250808061349290614abb565b915050613393565b506134b56134a6612ea8565b83612ed290919063ffffffff16565b9250505090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161351991906141e7565b60206040518083038186803b15801561353157600080fd5b505afa158015613545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135699190613cb0565b905090565b60006136ed6136e861357e613736565b6136da600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663872697296040518163ffffffff1660e01b815260040160206040518083038186803b1580156135e957600080fd5b505afa1580156135fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136219190613cb0565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161367c91906141e7565b60206040518083038186803b15801561369457600080fd5b505afa1580156136a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136cc9190613cb0565b612ed290919063ffffffff16565b612ee890919063ffffffff16565b61374b565b905090565b600081836137009190614706565b905092915050565b600081836137169190614958565b905092915050565b606061372d8484600085613787565b90509392505050565b60006012600a61374691906147e0565b905090565b600061378061377161375b612ea8565b613763613736565b612ee890919063ffffffff16565b83612ee890919063ffffffff16565b9050919050565b6060824710156137cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137c3906143fa565b60405180910390fd5b6137d58561389b565b613814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161380b9061453a565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161383d91906141d0565b60006040518083038185875af1925050503d806000811461387a576040519150601f19603f3d011682016040523d82523d6000602084013e61387f565b606091505b509150915061388f8282866138be565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156138ce5782905061391e565b6000835111156138e15782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161391591906142f8565b60405180910390fd5b9392505050565b6000613938613933846146a3565b61467e565b90508281526020810184848401111561395457613953614b9b565b5b61395f848285614a48565b509392505050565b600081359050613976816151dd565b92915050565b60008151905061398b816151dd565b92915050565b6000813590506139a0816151f4565b92915050565b6000815190506139b58161520b565b92915050565b600082601f8301126139d0576139cf614b91565b5b81356139e0848260208601613925565b91505092915050565b600060a082840312156139ff576139fe614b96565b5b613a0960a061467e565b90506000613a198482850161397c565b6000830152506020613a2d84828501613a8a565b6020830152506040613a4184828501613a8a565b6040830152506060613a5584828501613a8a565b6060830152506080613a6984828501613a8a565b60808301525092915050565b600081359050613a8481615222565b92915050565b600081519050613a9981615222565b92915050565b600060208284031215613ab557613ab4614ba5565b5b6000613ac384828501613967565b91505092915050565b600060208284031215613ae257613ae1614ba5565b5b6000613af08482850161397c565b91505092915050565b600060208284031215613b0f57613b0e614ba5565b5b6000613b1d84828501613991565b91505092915050565b60008060408385031215613b3d57613b3c614ba5565b5b6000613b4b85828601613967565b9250506020613b5c85828601613991565b9150509250929050565b60008060008060808587031215613b8057613b7f614ba5565b5b6000613b8e87828801613967565b9450506020613b9f87828801613967565b9350506040613bb087828801613a75565b925050606085013567ffffffffffffffff811115613bd157613bd0614ba0565b5b613bdd878288016139bb565b91505092959194509250565b60008060408385031215613c0057613bff614ba5565b5b6000613c0e85828601613967565b9250506020613c1f85828601613a75565b9150509250929050565b600060208284031215613c3f57613c3e614ba5565b5b6000613c4d848285016139a6565b91505092915050565b600060a08284031215613c6c57613c6b614ba5565b5b6000613c7a848285016139e9565b91505092915050565b600060208284031215613c9957613c98614ba5565b5b6000613ca784828501613a75565b91505092915050565b600060208284031215613cc657613cc5614ba5565b5b6000613cd484828501613a8a565b91505092915050565b60008060408385031215613cf457613cf3614ba5565b5b6000613d0285828601613a75565b9250506020613d1385828601613967565b9150509250929050565b600080600060608486031215613d3657613d35614ba5565b5b6000613d4486828701613a75565b9350506020613d5586828701613967565b9250506040613d6686828701613a75565b9150509250925092565b60008060408385031215613d8757613d86614ba5565b5b6000613d9585828601613a8a565b9250506020613da685828601613a8a565b9150509250929050565b613db981614a12565b82525050565b613dc88161498c565b82525050565b613dd7816149b0565b82525050565b613de6816149bc565b82525050565b6000613df7826146d4565b613e0181856146ea565b9350613e11818560208601614a57565b80840191505092915050565b6000613e28826146df565b613e3281856146f5565b9350613e42818560208601614a57565b613e4b81614baa565b840191505092915050565b6000613e63602e836146f5565b9150613e6e82614bc8565b604082019050919050565b6000613e866014836146f5565b9150613e9182614c17565b602082019050919050565b6000613ea96021836146f5565b9150613eb482614c40565b604082019050919050565b6000613ecc603a836146f5565b9150613ed782614c8f565b604082019050919050565b6000613eef6026836146f5565b9150613efa82614cde565b604082019050919050565b6000613f12602a836146f5565b9150613f1d82614d2d565b604082019050919050565b6000613f356010836146f5565b9150613f4082614d7c565b602082019050919050565b6000613f586026836146f5565b9150613f6382614da5565b604082019050919050565b6000613f7b6010836146f5565b9150613f8682614df4565b602082019050919050565b6000613f9e603c836146f5565b9150613fa982614e1d565b604082019050919050565b6000613fc1602e836146f5565b9150613fcc82614e6c565b604082019050919050565b6000613fe4603a836146f5565b9150613fef82614ebb565b604082019050919050565b60006140076021836146f5565b915061401282614f0a565b604082019050919050565b600061402a601d836146f5565b915061403582614f59565b602082019050919050565b600061404d6020836146f5565b915061405882614f82565b602082019050919050565b60006140706020836146f5565b915061407b82614fab565b602082019050919050565b6000614093601c836146f5565b915061409e82614fd4565b602082019050919050565b60006140b6601d836146f5565b91506140c182614ffd565b602082019050919050565b60006140d96026836146f5565b91506140e482615026565b604082019050919050565b60006140fc602a836146f5565b915061410782615075565b604082019050919050565b600061411f6035836146f5565b915061412a826150c4565b604082019050919050565b6000614142601e836146f5565b915061414d82615113565b602082019050919050565b60006141656021836146f5565b91506141708261513c565b604082019050919050565b60006141886018836146f5565b91506141938261518b565b602082019050919050565b60006141ab601b836146f5565b91506141b6826151b4565b602082019050919050565b6141ca81614a08565b82525050565b60006141dc8284613dec565b915081905092915050565b60006020820190506141fc6000830184613dbf565b92915050565b60006040820190506142176000830185613dbf565b6142246020830184613dbf565b9392505050565b60006060820190506142406000830186613dbf565b61424d6020830185613db0565b61425a60408301846141c1565b949350505050565b60006060820190506142776000830186613dbf565b6142846020830185613dbf565b61429160408301846141c1565b949350505050565b60006040820190506142ae6000830185613dbf565b6142bb60208301846141c1565b9392505050565b60006020820190506142d76000830184613dce565b92915050565b60006020820190506142f26000830184613ddd565b92915050565b600060208201905081810360008301526143128184613e1d565b905092915050565b6000602082019050818103600083015261433381613e56565b9050919050565b6000602082019050818103600083015261435381613e79565b9050919050565b6000602082019050818103600083015261437381613e9c565b9050919050565b6000602082019050818103600083015261439381613ebf565b9050919050565b600060208201905081810360008301526143b381613ee2565b9050919050565b600060208201905081810360008301526143d381613f05565b9050919050565b600060208201905081810360008301526143f381613f28565b9050919050565b6000602082019050818103600083015261441381613f4b565b9050919050565b6000602082019050818103600083015261443381613f6e565b9050919050565b6000602082019050818103600083015261445381613f91565b9050919050565b6000602082019050818103600083015261447381613fb4565b9050919050565b6000602082019050818103600083015261449381613fd7565b9050919050565b600060208201905081810360008301526144b381613ffa565b9050919050565b600060208201905081810360008301526144d38161401d565b9050919050565b600060208201905081810360008301526144f381614040565b9050919050565b6000602082019050818103600083015261451381614063565b9050919050565b6000602082019050818103600083015261453381614086565b9050919050565b60006020820190508181036000830152614553816140a9565b9050919050565b60006020820190508181036000830152614573816140cc565b9050919050565b60006020820190508181036000830152614593816140ef565b9050919050565b600060208201905081810360008301526145b381614112565b9050919050565b600060208201905081810360008301526145d381614135565b9050919050565b600060208201905081810360008301526145f381614158565b9050919050565b600060208201905081810360008301526146138161417b565b9050919050565b600060208201905081810360008301526146338161419e565b9050919050565b600060208201905061464f60008301846141c1565b92915050565b600060408201905061466a60008301856141c1565b61467760208301846141c1565b9392505050565b6000614688614699565b90506146948282614a8a565b919050565b6000604051905090565b600067ffffffffffffffff8211156146be576146bd614b62565b5b6146c782614baa565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061471182614a08565b915061471c83614a08565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561475157614750614b04565b5b828201905092915050565b600061476782614a08565b915061477283614a08565b92508261478257614781614b33565b5b828204905092915050565b6000808291508390505b60018511156147d7578086048111156147b3576147b2614b04565b5b60018516156147c25780820291505b80810290506147d085614bbb565b9450614797565b94509492505050565b60006147eb82614a08565b91506147f683614a08565b92506148237fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461482b565b905092915050565b60008261483b57600190506148f7565b8161484957600090506148f7565b816001811461485f576002811461486957614898565b60019150506148f7565b60ff84111561487b5761487a614b04565b5b8360020a91508482111561489257614891614b04565b5b506148f7565b5060208310610133831016604e8410600b84101617156148cd5782820a9050838111156148c8576148c7614b04565b5b6148f7565b6148da848484600161478d565b925090508184048111156148f1576148f0614b04565b5b81810290505b9392505050565b600061490982614a08565b915061491483614a08565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561494d5761494c614b04565b5b828202905092915050565b600061496382614a08565b915061496e83614a08565b92508282101561498157614980614b04565b5b828203905092915050565b6000614997826149e8565b9050919050565b60006149a9826149e8565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614a1d82614a24565b9050919050565b6000614a2f82614a36565b9050919050565b6000614a41826149e8565b9050919050565b82818337600083830152505050565b60005b83811015614a75578082015181840152602081019050614a5a565b83811115614a84576000848401525b50505050565b614a9382614baa565b810181811067ffffffffffffffff82111715614ab257614ab1614b62565b5b80604052505050565b6000614ac682614a08565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614af957614af8614b04565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f5573657220686173206e6f7420617070726f76656420746865207661756c742060008201527f666f72207468697320746f6b656e000000000000000000000000000000000000602082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f5661756c742068617320696e737566666963656e7420737461626c6520636f6960008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f5573657220686173206e6f7420617070726f76656420746865207661756c742060008201527f666f722073756666696369656e7420616c6c6f797820636f696e000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5661756c742068617320616c726561647920737461727420616363657074696e60008201527f67206465706f7369747300000000000000000000000000000000000000000000602082015250565b7f4e6f7420612076616c696420706f6f6c00000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f54686520616d6f756e74206f6620616c6c6f79782062726f6e7a6520636f696e60008201527f20746f20676574206973206e6f74206c6172676572207468616e203000000000602082015250565b7f546865207661756c7420646f6573206e6f74206861766520737566666963696560008201527f6e7420737461626c6520636f696e000000000000000000000000000000000000602082015250565b7f5573657220686173206e6f7420617070726f76656420746865207661756c742060008201527f666f722073756666696369656e7420737461626c6520636f696e000000000000602082015250565b7f557365722068617320696e73756666696369656e7420737461626c6520636f6960008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f42616c616e6365206f662047464920636f696e206d7573742062652030000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f42616c616e6365206f6620737461626c6520636f696e206d7573742062652030600082015250565b7f5573657220646f6573206e6f74206f776e207468697320746f6b656e00000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5661756c7420686173206e6f7420737461727420616363657074696e6720646560008201527f706f736974730000000000000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460008201527f206973206e6f74206c6172676572207468616e20300000000000000000000000602082015250565b7f42616c616e6365206f66204669647520636f696e206d75737420626520300000600082015250565b7f557365722068617320696e73756666696369656e7420616c6c6f797820636f6960008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420476f6c6466696e636820506f6f6c20546f6b656e0000000000000000600082015250565b7f4d757374206465706f736974206d6f7265207468616e207a65726f0000000000600082015250565b6151e68161498c565b81146151f157600080fd5b50565b6151fd8161499e565b811461520857600080fd5b50565b615214816149b0565b811461521f57600080fd5b50565b61522b81614a08565b811461523657600080fd5b5056fea2646970667358221220f62cc33efb904d000533b03200920c95f2c792357bc71ed58a4f4cfec064135d64736f6c63430008070033",
  "devdoc": {
    "author": "AlloyX",
    "kind": "dev",
    "methods": {
      "depositAlloyxBronzeTokens(uint256)": {
        "params": {
          "_tokenAmount": "Number of Alloy Tokens"
        }
      },
      "depositNFTToken(address,uint256)": {
        "params": {
          "_tokenAddress": "NFT Address",
          "_tokenID": "NFT ID"
        }
      },
      "depositUSDCCoin(uint256)": {
        "params": {
          "_tokenAmount": "Number of stable coin"
        }
      },
      "isValidPool(address,uint256)": {
        "params": {
          "_tokenAddress": "The backer NFT address",
          "_tokenID": "The backer NFT id"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AlloyX Vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositAlloyxBronzeTokens(uint256)": {
        "notice": "An Alloy token holder can deposit their tokens and redeem them for USDC"
      },
      "depositNFTToken(address,uint256)": {
        "notice": "A Junior token holder can deposit their NFT for stable coin"
      },
      "depositUSDCCoin(uint256)": {
        "notice": "A Liquidity Provider can deposit supported stable coins for Alloy Tokens"
      },
      "isValidPool(address,uint256)": {
        "notice": "Using the PoolTokens interface, check if this is a valid pool"
      },
      "startVaultOperation()": {
        "notice": "Initialize by minting the alloy brown tokens to owner"
      }
    },
    "notice": "Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract uses a pricing oracle to determine the value of the underlying assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2183,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2298,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5497,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "vaultStarted",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5500,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "usdcCoin",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 5503,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "gfiCoin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 5506,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "fiduCoin",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 5509,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "goldFinchPoolToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPoolTokens)6911"
      },
      {
        "astId": 5512,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "alloyxTokenBronze",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AlloyxTokenBronze)4271"
      },
      {
        "astId": 5515,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "alloyTokenSilver",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(AlloyxTokenSilver)4334"
      },
      {
        "astId": 5518,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "seniorPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ISeniorPool)7007"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AlloyxTokenBronze)4271": {
        "encoding": "inplace",
        "label": "contract AlloyxTokenBronze",
        "numberOfBytes": "20"
      },
      "t_contract(AlloyxTokenSilver)4334": {
        "encoding": "inplace",
        "label": "contract AlloyxTokenSilver",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3038": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolTokens)6911": {
        "encoding": "inplace",
        "label": "contract IPoolTokens",
        "numberOfBytes": "20"
      },
      "t_contract(ISeniorPool)7007": {
        "encoding": "inplace",
        "label": "contract ISeniorPool",
        "numberOfBytes": "20"
      }
    }
  }
}
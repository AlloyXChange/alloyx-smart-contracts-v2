{
  "address": "0x9F814130cac53FdCF1eC192652E4ccc792b0240d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alloyxBronzeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fiduCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gfiCoinAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_goldFinchTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seniorPoolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositAlloyx",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "DepositNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositStable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PurchaseJunior",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PurchaseSenior",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "USDCtoAlloyxBronze",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "alloyxBronzeToUSDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alloyxAddress",
          "type": "address"
        }
      ],
      "name": "changeAlloyxBronzeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        }
      ],
      "name": "changePoolTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seniorPool",
          "type": "address"
        }
      ],
      "name": "changeSeniorPoolAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositAlloyxBronzeTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "depositNFTToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "depositUSDCCoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "getJuniorTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "isValidPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_toAddress",
          "type": "address"
        }
      ],
      "name": "migrateAllGoldfinchPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrateERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrateEthers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "migrateGoldfinchPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        }
      ],
      "name": "purchaseJuniorToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "purchaseSeniorTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVaultOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferAlloyxOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2c15b8b2416be16618c10007825895a6fc57faf0ebc64d73c2298703d848637",
  "receipt": {
    "to": null,
    "from": "0xd988EB2777ec4d844ced75f68148A08310bEFc76",
    "contractAddress": "0x9F814130cac53FdCF1eC192652E4ccc792b0240d",
    "transactionIndex": 2,
    "gasUsed": "3322443",
    "logsBloom": "0x
    "blockHash": "0x84d6f53b8e5284d76b13600969e9de24aa03a2324848d99303141ede7c30edd6",
    "transactionHash": "0xa2c15b8b2416be16618c10007825895a6fc57faf0ebc64d73c2298703d848637",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 30330412,
        "transactionHash": "0xa2c15b8b2416be16618c10007825895a6fc57faf0ebc64d73c2298703d848637",
        "address": "0x9F814130cac53FdCF1eC192652E4ccc792b0240d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d988eb2777ec4d844ced75f68148a08310befc76"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x84d6f53b8e5284d76b13600969e9de24aa03a2324848d99303141ede7c30edd6"
      }
    ],
    "blockNumber": 30330412,
    "cumulativeGasUsed": "3389949",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7d05c20CEbFC8C8EB6ecEA396552A70d7fC1FA4f",
    "0xE44eb769116e636665918Ec6EFaE3Dd75CD624E5",
    "0xd5369Cd4A32822400A50dBdB78333F13fd7ae10d",
    "0x9E64CD0D8F0d897Aa810479d483c89549252B001",
    "0x24Dc5813843feec148a6091af47a722A7420891c",
    "0x8EBC3f878761B3039AB9edabe630B7bF5376C538"
  ],
  "numDeployments": 1,
  "solcInputHash": "86fcdda2f277e1792675f47c0313585a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxBronzeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fiduCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gfiCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_goldFinchTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seniorPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositAlloyx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseJunior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseSenior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"USDCtoAlloyxBronze\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"alloyxBronzeToUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxAddress\",\"type\":\"address\"}],\"name\":\"changeAlloyxBronzeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"changePoolTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seniorPool\",\"type\":\"address\"}],\"name\":\"changeSeniorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAlloyxBronzeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"depositNFTToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDCCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getJuniorTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"migrateAllGoldfinchPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateEthers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"migrateGoldfinchPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"purchaseJuniorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"purchaseSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVaultOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAlloyxOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AlloyX\",\"kind\":\"dev\",\"methods\":{\"depositAlloyxBronzeTokens(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of Alloy Tokens\"}},\"depositNFTToken(address,uint256)\":{\"params\":{\"_tokenAddress\":\"NFT Address\",\"_tokenID\":\"NFT ID\"}},\"depositUSDCCoin(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of stable coin\"}},\"getJuniorTokenValue(address,uint256)\":{\"params\":{\"_tokenAddress\":\"The backer NFT address\",\"_tokenID\":\"The backer NFT id\"}},\"isValidPool(address,uint256)\":{\"params\":{\"_tokenAddress\":\"The backer NFT address\",\"_tokenID\":\"The backer NFT id\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AlloyX Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"USDCtoAlloyxBronze(uint256)\":{\"notice\":\"Convert USDC Amount to Alloyx Bronze\"},\"alloyxBronzeToUSDC(uint256)\":{\"notice\":\"Convert Alloyx Bronze to USDC amount\"},\"depositAlloyxBronzeTokens(uint256)\":{\"notice\":\"An Alloy token holder can deposit their tokens and redeem them for USDC\"},\"depositNFTToken(address,uint256)\":{\"notice\":\"A Junior token holder can deposit their NFT for stable coin\"},\"depositUSDCCoin(uint256)\":{\"notice\":\"A Liquidity Provider can deposit supported stable coins for Alloy Tokens\"},\"getJuniorTokenValue(address,uint256)\":{\"notice\":\"Using the Goldfinch contracts, read the principal, redeemed and redeemable values\"},\"isValidPool(address,uint256)\":{\"notice\":\"Using the PoolTokens interface, check if this is a valid pool\"},\"startVaultOperation()\":{\"notice\":\"Initialize by minting the alloy brown tokens to owner\"}},\"notice\":\"Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch and emits AlloyTokens when a liquidity provider deposits supported stable coins.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alloyx/v2.0/AlloyVault.sol\":\"AlloyVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxTokenBronze.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AlloyxTokenBronze is ERC20, Ownable {\\n  constructor() ERC20(\\\"Duralumin\\\", \\\"DURA\\\") {}\\n\\n  function mint(address account, uint256 amount) external onlyOwner returns (bool) {\\n    _mint(account, amount);\\n    return true;\\n  }\\n\\n  function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\n    _burn(account, amount);\\n    return true;\\n  }\\n\\n  function alloyBronze() external returns (bool) {\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xb59203c84b8a0d72d15ecc8a9e665f983db6f32b34f5daeba39855fdc0942363\",\"license\":\"MIT\"},\"contracts/alloyx/v2.0/AlloyVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../AlloyxTokenBronze.sol\\\";\\n\\nimport \\\"../../goldfinch/interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../goldfinch/interfaces/ITranchedPool.sol\\\";\\nimport \\\"../../goldfinch/interfaces/ISeniorPool.sol\\\";\\n\\n/**\\n * @title AlloyX Vault\\n * @notice Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch\\n * and emits AlloyTokens when a liquidity provider deposits supported stable coins.\\n * @author AlloyX\\n */\\ncontract AlloyVault is ERC721Holder, Ownable, Pausable {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  bool private vaultStarted;\\n  IERC20 private usdcCoin;\\n  IERC20 private gfiCoin;\\n  IERC20 private fiduCoin;\\n  IPoolTokens private goldFinchPoolToken;\\n  AlloyxTokenBronze private alloyxTokenBronze;\\n  ISeniorPool private seniorPool;\\n\\n  event DepositStable(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n  event DepositNFT(address _tokenAddress, address _tokenSender, uint256 _tokenID);\\n  event DepositAlloyx(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n  event PurchaseSenior(uint256 amount);\\n  event PurchaseJunior(uint256 amount);\\n  event Mint(address _tokenReceiver, uint256 _tokenAmount);\\n  event Burn(address _tokenReceiver, uint256 _tokenAmount);\\n\\n  constructor(\\n    address _alloyxBronzeAddress,\\n    address _usdcCoinAddress,\\n    address _fiduCoinAddress,\\n    address _gfiCoinAddress,\\n    address _goldFinchTokenAddress,\\n    address _seniorPoolAddress\\n  ) {\\n    alloyxTokenBronze = AlloyxTokenBronze(_alloyxBronzeAddress);\\n    usdcCoin = IERC20(_usdcCoinAddress);\\n    gfiCoin = IERC20(_gfiCoinAddress);\\n    fiduCoin = IERC20(_fiduCoinAddress);\\n    goldFinchPoolToken = IPoolTokens(_goldFinchTokenAddress);\\n    seniorPool = ISeniorPool(_seniorPoolAddress);\\n    vaultStarted = false;\\n  }\\n\\n  /**\\n   * @notice Alloy Brown Token Value in terms of USDC\\n   */\\n  function getAlloyxBronzeTokenBalanceInUSDC() internal view returns (uint256) {\\n    return getFiduBalanceInUSDC().add(getUSDCBalance()).add(getGoldFinchPoolTokenBalanceInUSDC());\\n  }\\n\\n  /**\\n   * @notice Fidu Value in Vault in term of USDC\\n   */\\n  function getFiduBalanceInUSDC() internal view returns (uint256) {\\n    return\\n      fiduToUSDC(\\n        fiduCoin.balanceOf(address(this)).mul(seniorPool.sharePrice()).div(fiduMantissa())\\n      );\\n  }\\n\\n  /**\\n   * @notice USDC Value in Vault\\n   */\\n  function getUSDCBalance() internal view returns (uint256) {\\n    return usdcCoin.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @notice GFI Balance in Vault\\n   */\\n  function getGFIBalance() internal view returns (uint256) {\\n    return gfiCoin.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @notice GoldFinch PoolToken Value in Value in term of USDC\\n   */\\n  function getGoldFinchPoolTokenBalanceInUSDC() internal view returns (uint256) {\\n    uint256 total = 0;\\n    uint256 balance = goldFinchPoolToken.balanceOf(address(this));\\n    for (uint256 i = 0; i < balance; i++) {\\n      total = total.add(\\n        getJuniorTokenValue(\\n          address(goldFinchPoolToken),\\n          goldFinchPoolToken.tokenOfOwnerByIndex(address(this), i)\\n        )\\n      );\\n    }\\n    return total.mul(usdcMantissa());\\n  }\\n\\n  /**\\n   * @notice Convert Alloyx Bronze to USDC amount\\n   */\\n  function alloyxBronzeToUSDC(uint256 amount) public view returns (uint256) {\\n    uint256 alloyBronzeTotalSupply = alloyxTokenBronze.totalSupply();\\n    uint256 totalVaultAlloyxBronzeValueInUSDC = getAlloyxBronzeTokenBalanceInUSDC();\\n    return amount.mul(totalVaultAlloyxBronzeValueInUSDC).div(alloyBronzeTotalSupply);\\n  }\\n\\n  /**\\n   * @notice Convert USDC Amount to Alloyx Bronze\\n   */\\n  function USDCtoAlloyxBronze(uint256 amount) public view returns (uint256) {\\n    uint256 alloyBronzeTotalSupply = alloyxTokenBronze.totalSupply();\\n    uint256 totalVaultAlloyxBronzeValueInUSDC = getAlloyxBronzeTokenBalanceInUSDC();\\n    return amount.mul(alloyBronzeTotalSupply).div(totalVaultAlloyxBronzeValueInUSDC);\\n  }\\n\\n  function fiduToUSDC(uint256 amount) internal pure returns (uint256) {\\n    return amount.div(fiduMantissa().div(usdcMantissa()));\\n  }\\n\\n  function fiduMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(18);\\n  }\\n\\n  function alloyMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(18);\\n  }\\n\\n  function usdcMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(6);\\n  }\\n\\n  function changeAlloyxBronzeAddress(address _alloyxAddress) external onlyOwner {\\n    alloyxTokenBronze = AlloyxTokenBronze(_alloyxAddress);\\n  }\\n\\n  function changeSeniorPoolAddress(address _seniorPool) external onlyOwner {\\n    seniorPool = ISeniorPool(_seniorPool);\\n  }\\n\\n  function changePoolTokenAddress(address _poolToken) external onlyOwner {\\n    goldFinchPoolToken = IPoolTokens(_poolToken);\\n  }\\n\\n  modifier whenVaultStarted() {\\n    require(vaultStarted, \\\"Vault has not start accepting deposits\\\");\\n    _;\\n  }\\n\\n  modifier whenVaultNotStarted() {\\n    require(!vaultStarted, \\\"Vault has already start accepting deposits\\\");\\n    _;\\n  }\\n\\n  function pause() external onlyOwner whenNotPaused {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyOwner whenPaused {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Initialize by minting the alloy brown tokens to owner\\n   */\\n  function startVaultOperation() external onlyOwner whenVaultNotStarted returns (bool) {\\n    uint256 totalBalanceInUSDC = getAlloyxBronzeTokenBalanceInUSDC();\\n    alloyxTokenBronze.mint(\\n      address(this),\\n      totalBalanceInUSDC.mul(alloyMantissa()).div(usdcMantissa())\\n    );\\n    vaultStarted = true;\\n    return true;\\n  }\\n\\n  /**\\n   * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\\n   * @param _tokenAmount Number of Alloy Tokens\\n   */\\n  function depositAlloyxBronzeTokens(uint256 _tokenAmount)\\n    external\\n    whenNotPaused\\n    whenVaultStarted\\n    returns (bool)\\n  {\\n    require(\\n      alloyxTokenBronze.balanceOf(msg.sender) >= _tokenAmount,\\n      \\\"User has insufficient alloyx coin\\\"\\n    );\\n    require(\\n      alloyxTokenBronze.allowance(msg.sender, address(this)) >= _tokenAmount,\\n      \\\"User has not approved the vault for sufficient alloyx coin\\\"\\n    );\\n    uint256 amountToWithdraw = alloyxBronzeToUSDC(_tokenAmount);\\n    require(amountToWithdraw > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n    require(\\n      usdcCoin.balanceOf(address(this)) >= amountToWithdraw,\\n      \\\"The vault does not have sufficient stable coin\\\"\\n    );\\n    alloyxTokenBronze.burn(msg.sender, _tokenAmount);\\n    usdcCoin.safeTransfer(msg.sender, amountToWithdraw);\\n    emit DepositAlloyx(address(alloyxTokenBronze), msg.sender, _tokenAmount);\\n    emit Burn(msg.sender, _tokenAmount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\\n   * @param _tokenAmount Number of stable coin\\n   */\\n  function depositUSDCCoin(uint256 _tokenAmount)\\n    external\\n    whenNotPaused\\n    whenVaultStarted\\n    returns (bool)\\n  {\\n    require(usdcCoin.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient stable coin\\\");\\n    require(\\n      usdcCoin.allowance(msg.sender, address(this)) >= _tokenAmount,\\n      \\\"User has not approved the vault for sufficient stable coin\\\"\\n    );\\n    uint256 amountToMint = USDCtoAlloyxBronze(_tokenAmount);\\n    require(amountToMint > 0, \\\"The amount of alloyx bronze coin to get is not larger than 0\\\");\\n    usdcCoin.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n    alloyxTokenBronze.mint(msg.sender, amountToMint);\\n    emit DepositStable(address(usdcCoin), msg.sender, amountToMint);\\n    emit Mint(msg.sender, amountToMint);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice A Junior token holder can deposit their NFT for stable coin\\n   * @param _tokenAddress NFT Address\\n   * @param _tokenID NFT ID\\n   */\\n  function depositNFTToken(address _tokenAddress, uint256 _tokenID)\\n    external\\n    whenNotPaused\\n    whenVaultStarted\\n    returns (bool)\\n  {\\n    require(_tokenAddress == address(goldFinchPoolToken), \\\"Not Goldfinch Pool Token\\\");\\n    require(isValidPool(_tokenAddress, _tokenID) == true, \\\"Not a valid pool\\\");\\n    require(IERC721(_tokenAddress).ownerOf(_tokenID) == msg.sender, \\\"User does not own this token\\\");\\n    require(\\n      IERC721(_tokenAddress).getApproved(_tokenID) == address(this),\\n      \\\"User has not approved the vault for this token\\\"\\n    );\\n    uint256 purchasePrice = getJuniorTokenValue(_tokenAddress, _tokenID);\\n    require(purchasePrice > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n    require(\\n      usdcCoin.balanceOf(address(this)) >= purchasePrice,\\n      \\\"The vault does not have sufficient stable coin\\\"\\n    );\\n    IERC721(_tokenAddress).safeTransferFrom(msg.sender, address(this), _tokenID);\\n    usdcCoin.safeTransfer(msg.sender, purchasePrice);\\n    emit DepositNFT(_tokenAddress, msg.sender, _tokenID);\\n    return true;\\n  }\\n\\n  function destroy() external onlyOwner whenPaused {\\n    require(usdcCoin.balanceOf(address(this)) == 0, \\\"Balance of stable coin must be 0\\\");\\n    require(fiduCoin.balanceOf(address(this)) == 0, \\\"Balance of Fidu coin must be 0\\\");\\n    require(gfiCoin.balanceOf(address(this)) == 0, \\\"Balance of GFI coin must be 0\\\");\\n\\n    address payable addr = payable(address(owner()));\\n    selfdestruct(addr);\\n  }\\n\\n  /**\\n   * @notice Using the PoolTokens interface, check if this is a valid pool\\n   * @param _tokenAddress The backer NFT address\\n   * @param _tokenID The backer NFT id\\n   */\\n  function isValidPool(address _tokenAddress, uint256 _tokenID) public view returns (bool) {\\n    IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n    address tranchedPool = tokenInfo.pool;\\n    return poolTokenContract.validPool(tranchedPool);\\n  }\\n\\n  /**\\n   * @notice Using the Goldfinch contracts, read the principal, redeemed and redeemable values\\n   * @param _tokenAddress The backer NFT address\\n   * @param _tokenID The backer NFT id\\n   */\\n  function getJuniorTokenValue(address _tokenAddress, uint256 _tokenID)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    // first get the amount redeemed and the principal\\n    IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n    uint256 principalAmount = tokenInfo.principalAmount;\\n    uint256 totalRedeemed = tokenInfo.principalRedeemed.add(tokenInfo.interestRedeemed);\\n\\n    // now get the redeemable values for the given token\\n    address tranchedPoolAddress = tokenInfo.pool;\\n    ITranchedPool tranchedTokenContract = ITranchedPool(tranchedPoolAddress);\\n    (uint256 interestRedeemable, uint256 principalRedeemable) = tranchedTokenContract\\n      .availableToWithdraw(_tokenID);\\n    uint256 totalRedeemable = interestRedeemable;\\n    // only add principal here if there have been drawdowns otherwise it overstates the value\\n    if (principalRedeemable < principalAmount) {\\n      totalRedeemable.add(principalRedeemable);\\n    }\\n    return principalAmount.sub(totalRedeemed).add(totalRedeemable).mul(usdcMantissa());\\n  }\\n\\n  function purchaseJuniorToken(\\n    uint256 amount,\\n    address poolAddress,\\n    uint256 tranche\\n  ) external onlyOwner {\\n    require(usdcCoin.balanceOf(address(this)) >= amount, \\\"Vault has insufficent stable coin\\\");\\n    require(amount > 0, \\\"Must deposit more than zero\\\");\\n    ITranchedPool juniorPool = ITranchedPool(poolAddress);\\n    juniorPool.deposit(amount, tranche);\\n    emit PurchaseJunior(amount);\\n  }\\n\\n  function purchaseSeniorTokens(uint256 amount, address poolAddress) external onlyOwner {\\n    require(usdcCoin.balanceOf(address(this)) >= amount, \\\"Vault has insufficent stable coin\\\");\\n    require(amount > 0, \\\"Must deposit more than zero\\\");\\n    ISeniorPool seniorPoolInterface = ISeniorPool(poolAddress);\\n    seniorPoolInterface.deposit(amount);\\n    emit PurchaseSenior(amount);\\n  }\\n\\n  function migrateGoldfinchPoolTokens(address payable _toAddress, uint256 _tokenId)\\n    public\\n    onlyOwner\\n    whenPaused\\n  {\\n    goldFinchPoolToken.safeTransferFrom(address(this), _toAddress, _tokenId);\\n  }\\n\\n  function getGoldfinchTokenIdsOf(address owner) internal view returns (uint256[] memory) {\\n    uint256 count = goldFinchPoolToken.balanceOf(owner);\\n    uint256[] memory ids = new uint256[](count);\\n    for (uint256 i = 0; i < count; i++) {\\n      ids[i] = goldFinchPoolToken.tokenOfOwnerByIndex(owner, i);\\n    }\\n    return ids;\\n  }\\n\\n  function migrateAllGoldfinchPoolTokens(address payable _toAddress)\\n    external\\n    onlyOwner\\n    whenPaused\\n  {\\n    uint256[] memory tokenIds = getGoldfinchTokenIdsOf(address(this));\\n    for (uint256 i = 0; i < tokenIds.length; i++) {\\n      migrateGoldfinchPoolTokens(_toAddress, tokenIds[i]);\\n    }\\n  }\\n\\n  function migrateERC20(address _tokenAddress, address payable _to) public onlyOwner whenPaused {\\n    uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n    IERC20(_tokenAddress).safeTransfer(_to, balance);\\n  }\\n\\n  function migrateEthers(address payable _to) external onlyOwner whenPaused {\\n    _to.transfer(address(this).balance);\\n  }\\n\\n  function transferAlloyxOwnership(address _to) external onlyOwner whenPaused {\\n    alloyxTokenBronze.transferOwnership(_to);\\n  }\\n}\\n\",\"keccak256\":\"0xccb9e955efcf672d4eb35c326c70bd72cf3ccb28fdef8998a4d6096d11b7e43c\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfea45d04903141890eeb3739f2481a1b3fe94cdfa58457e7d2fe9c962a112725\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPoolTokens is IERC721, IERC721Enumerable {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe672903d9d507aab4254c1f9bc3c581e02c1899217355c94922701b2413352ba\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x3ed9fff9cf9e8e14f2c090e97bbf78dcf65b7e63955c1c0ab5ce02814e8fe421\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts)\\n    external\\n    virtual;\\n}\\n\",\"keccak256\":\"0x3f653ee468dcaef9a5fc81d23a23eb0aa8c2e5669b560d0d2ed4bb46644c9aae\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xb5211aa4a83a69c7ebdb3a4f21fbd432c809c1e1f3406295287f6628bc0e7205\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003a0638038062003a06833981016040819052620000349162000131565b6200003f33620000c4565b60008054600580546001600160a01b03199081166001600160a01b039a8b1617909155600180548216988a16989098179097556002805488169589169590951790945560038054871695881695909517909455600480548616928716929092179091556006805490941694169390931790915561ffff60a01b199091169055620001b2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200012c57600080fd5b919050565b60008060008060008060c087890312156200014b57600080fd5b620001568762000114565b9550620001666020880162000114565b9450620001766040880162000114565b9350620001866060880162000114565b9250620001966080880162000114565b9150620001a660a0880162000114565b90509295509295509295565b61384480620001c26000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806383197ef0116100ee57806392f55abb11610097578063d8ec060811610071578063d8ec06081461039f578063d905e9b4146103b2578063df16694a146103c5578063f2fde38b146103d857600080fd5b806392f55abb14610366578063b338ad1614610379578063bb74c0581461038c57600080fd5b80638d6f4d21116100c85780638d6f4d21146103305780638da5cb5b14610338578063917f69fe1461035357600080fd5b806383197ef01461030d5780638456cb59146103155780638682caf81461031d57600080fd5b8063460408721161015b57806353c98f5a1161013557806353c98f5a146102cd5780635c975abb146102e0578063715018a6146102f257806375af1df8146102fa57600080fd5b80634604087214610286578063472e4446146102995780634f9d02c3146102ba57600080fd5b8063354d3c301161018c578063354d3c30146102485780633bb3b27e1461026b5780633f4ba83a1461027e57600080fd5b806307c0cf3d146101b3578063150b7a02146101c85780631b61eb6714610235575b600080fd5b6101c66101c13660046132c4565b6103eb565b005b6101ff6101d6366004613363565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6101c6610243366004613519565b610467565b61025b6102563660046132fe565b6106a8565b604051901515815260200161022c565b6101c66102793660046132c4565b6107cc565b6101c661089d565b6101c66102943660046132c4565b61093f565b6102ac6102a73660046132fe565b6109b6565b60405190815260200161022c565b6102ac6102c83660046134c2565b610b49565b61025b6102db3660046134c2565b610bfc565b600054600160a01b900460ff1661025b565b6101c6611042565b6101c66103083660046132c4565b611094565b6101c661117f565b6101c661147e565b6101c661032b3660046132c4565b61151b565b61025b611592565b6000546040516001600160a01b03909116815260200161022c565b6101c66103613660046132fe565b611763565b6102ac6103743660046134c2565b61186c565b61025b6103873660046132fe565b611911565b61025b61039a3660046134c2565b611ebb565b6101c66103ad3660046132c4565b6123e2565b6101c66103c036600461332a565b6124f5565b6101c66103d33660046134f4565b61261d565b6101c66103e63660046132c4565b612856565b6000546001600160a01b031633146104385760405162461bcd60e51b815260206004820181905260248201526000805160206137ef83398151915260448201526064015b60405180910390fd5b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104af5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b6001546040516370a0823160e01b815230600482015284916001600160a01b0316906370a082319060240160206040518083038186803b1580156104f257600080fd5b505afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a91906134db565b10156105825760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b606482015260840161042f565b600083116105d25760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f0000000000604482015260640161042f565b6040517fe2bbb158000000000000000000000000000000000000000000000000000000008152600481018490526024810182905282906001600160a01b0382169063e2bbb15890604401602060405180830381600087803b15801561063657600080fd5b505af115801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e91906134db565b506040518481527f7a3794cf7d311106018524dfd41878138e4264f1bee18e53f1c180a1627fa2b89060200160405180910390a150505050565b60405163463d31d760e11b815260048101829052600090839082906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156106ef57600080fd5b505afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190613449565b80516040517fb5ada6d80000000000000000000000000000000000000000000000000000000081526001600160a01b038083166004830152929350909184169063b5ada6d89060240160206040518083038186803b15801561078857600080fd5b505afa15801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c09190613427565b93505050505b92915050565b6000546001600160a01b031633146108145760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff166108645760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610899573d6000803e3d6000fd5b5050565b6000546001600160a01b031633146108e55760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff166109355760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b61093d612926565b565b6000546001600160a01b031633146109875760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60405163463d31d760e11b815260048101829052600090839082906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156109fd57600080fd5b505afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190613449565b90506000816040015190506000610a5d836080015184606001516129c390919063ffffffff16565b83516040517f4d02fe6f0000000000000000000000000000000000000000000000000000000081526004810189905291925090819060009081906001600160a01b03841690634d02fe6f90602401604080518083038186803b158015610ac257600080fd5b505afa158015610ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afa9190613551565b90925090508186821015610b1457610b1281836129c3565b505b610b39610b1f6129d6565b610b3383610b2d8b8b6129e9565b906129c3565b906129f5565b9c9b505050505050505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9a57600080fd5b505afa158015610bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd291906134db565b90506000610bde612a01565b9050610bf482610bee86846129f5565b90612a21565b949350505050565b60008054600160a01b900460ff1615610c4a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161042f565b600054600160a81b900460ff16610cb25760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b606482015260840161042f565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015610cf557600080fd5b505afa158015610d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2d91906134db565b1015610d855760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420737461626c6520636f696044820152603760f91b606482015260840161042f565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610dce57600080fd5b505afa158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0691906134db565b1015610e7a5760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420737461626c6520636f696e000000000000606482015260840161042f565b6000610e858361186c565b905060008111610efd5760405162461bcd60e51b815260206004820152603c60248201527f54686520616d6f756e74206f6620616c6c6f79782062726f6e7a6520636f696e60448201527f20746f20676574206973206e6f74206c6172676572207468616e203000000000606482015260840161042f565b600154610f15906001600160a01b0316333086612a2d565b6005546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906340c10f1990604401602060405180830381600087803b158015610f7a57600080fd5b505af1158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb29190613427565b50600154604080516001600160a01b03909216825233602083015281018290527fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f9060600160405180910390a160408051338152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591015b60405180910390a150600192915050565b6000546001600160a01b0316331461108a5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b61093d6000612ae4565b6000546001600160a01b031633146110dc5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff1661112c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b600061113730612b41565b905060005b815181101561117a576111688383838151811061115b5761115b6137ad565b6020026020010151611763565b806111728161377c565b91505061113c565b505050565b6000546001600160a01b031633146111c75760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff166112175760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561125a57600080fd5b505afa15801561126e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129291906134db565b156112df5760405162461bcd60e51b815260206004820181905260248201527f42616c616e6365206f6620737461626c6520636f696e206d7573742062652030604482015260640161042f565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561132257600080fd5b505afa158015611336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135a91906134db565b156113a75760405162461bcd60e51b815260206004820152601e60248201527f42616c616e6365206f66204669647520636f696e206d75737420626520300000604482015260640161042f565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156113ea57600080fd5b505afa1580156113fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142291906134db565b1561146f5760405162461bcd60e51b815260206004820152601d60248201527f42616c616e6365206f662047464920636f696e206d7573742062652030000000604482015260640161042f565b6000546001600160a01b031680ff5b6000546001600160a01b031633146114c65760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff16156115135760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161042f565b61093d612cd6565b6000546001600160a01b031633146115635760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600080546001600160a01b031633146115db5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a81b900460ff161561165b5760405162461bcd60e51b815260206004820152602a60248201527f5661756c742068617320616c726561647920737461727420616363657074696e60448201527f67206465706f7369747300000000000000000000000000000000000000000000606482015260840161042f565b6000611665612a01565b6005549091506001600160a01b03166340c10f19306116976116856129d6565b610bee611690612d5e565b87906129f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d9190613427565b5050600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b17905550600190565b6000546001600160a01b031633146117ab5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff166117fb5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b60048054604051632142170760e11b815230928101929092526001600160a01b0384811660248401526044830184905216906342842e0e90606401600060405180830381600087803b15801561185057600080fd5b505af1158015611864573d6000803e3d6000fd5b505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118bd57600080fd5b505afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f591906134db565b90506000611901612a01565b9050610bf481610bee86856129f5565b60008054600160a01b900460ff161561195f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161042f565b600054600160a81b900460ff166119c75760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b606482015260840161042f565b6004546001600160a01b03848116911614611a245760405162461bcd60e51b815260206004820152601860248201527f4e6f7420476f6c6466696e636820506f6f6c20546f6b656e0000000000000000604482015260640161042f565b611a2e83836106a8565b1515600114611a7f5760405162461bcd60e51b815260206004820152601060248201527f4e6f7420612076616c696420706f6f6c00000000000000000000000000000000604482015260640161042f565b6040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b158015611ada57600080fd5b505afa158015611aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1291906132e1565b6001600160a01b031614611b685760405162461bcd60e51b815260206004820152601c60248201527f5573657220646f6573206e6f74206f776e207468697320746f6b656e00000000604482015260640161042f565b6040517f081812fc0000000000000000000000000000000000000000000000000000000081526004810183905230906001600160a01b0385169063081812fc9060240160206040518083038186803b158015611bc357600080fd5b505afa158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb91906132e1565b6001600160a01b031614611c775760405162461bcd60e51b815260206004820152602e60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f72207468697320746f6b656e000000000000000000000000000000000000606482015260840161042f565b6000611c8384846109b6565b905060008111611cfb5760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e20300000000000000000000000606482015260840161042f565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015611d3e57600080fd5b505afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7691906134db565b1015611dea5760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e000000000000000000000000000000000000606482015260840161042f565b604051632142170760e11b8152336004820152306024820152604481018490526001600160a01b038516906342842e0e90606401600060405180830381600087803b158015611e3857600080fd5b505af1158015611e4c573d6000803e3d6000fd5b5050600154611e6892506001600160a01b031690503383612d6c565b604080516001600160a01b03861681523360208201529081018490527fc7e8b1bdbecdc8a549557efb2a2ab715cff51630caead31610000019e61dfa4b9060600160405180910390a15060019392505050565b60008054600160a01b900460ff1615611f095760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161042f565b600054600160a81b900460ff16611f715760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b606482015260840161042f565b6005546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec91906134db565b10156120445760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420616c6c6f797820636f696044820152603760f91b606482015260840161042f565b600554604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561208d57600080fd5b505afa1580156120a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c591906134db565b10156121395760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420616c6c6f797820636f696e000000000000606482015260840161042f565b600061214483610b49565b9050600081116121bc5760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e20300000000000000000000000606482015260840161042f565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b1580156121ff57600080fd5b505afa158015612213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223791906134db565b10156122ab5760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e000000000000000000000000000000000000606482015260840161042f565b6005546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b0390911690639dc29fac90604401602060405180830381600087803b15801561231057600080fd5b505af1158015612324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123489190613427565b50600154612360906001600160a01b03163383612d6c565b600554604080516001600160a01b03909216825233602083015281018490527f53fee901a59b4d2e659e450f8db17fc345e158fe408d2b39faf66d1f8c4a54fe9060600160405180910390a160408051338152602081018590527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59101611031565b6000546001600160a01b0316331461242a5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff1661247a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b6005546040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b1580156124da57600080fd5b505af11580156124ee573d6000803e3d6000fd5b5050505050565b6000546001600160a01b0316331461253d5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff1661258d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156125cf57600080fd5b505afa1580156125e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260791906134db565b905061117a6001600160a01b0384168383612d6c565b6000546001600160a01b031633146126655760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b6001546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156126a857600080fd5b505afa1580156126bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e091906134db565b10156127385760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b606482015260840161042f565b600082116127885760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f0000000000604482015260640161042f565b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905281906001600160a01b0382169063b6b55f2590602401602060405180830381600087803b1580156127e557600080fd5b505af11580156127f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281d91906134db565b506040518381527fd483110686f79d1f5932d32add1024998649ddca927700b75bea458b4cb7cde69060200160405180910390a1505050565b6000546001600160a01b0316331461289e5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b6001600160a01b03811661291a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161042f565b61292381612ae4565b50565b600054600160a01b900460ff166129765760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006129cf82846135f5565b9392505050565b60006129e46006600a613672565b905090565b60006129cf8284613739565b60006129cf828461371a565b60006129e4612a0e612db5565b610b2d612a19612f09565b610b2d612f85565b60006129cf828461360d565b6040516001600160a01b0380851660248301528316604482015260648101829052612ade9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526130ac565b50505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600480546040516370a0823160e01b81526001600160a01b038481169382019390935260609260009216906370a082319060240160206040518083038186803b158015612b8d57600080fd5b505afa158015612ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc591906134db565b905060008167ffffffffffffffff811115612be257612be26137c3565b604051908082528060200260200182016040528015612c0b578160200160208202803683370190505b50905060005b82811015612cce5760048054604051632f745c5960e01b81526001600160a01b038881169382019390935260248101849052911690632f745c599060440160206040518083038186803b158015612c6757600080fd5b505afa158015612c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9f91906134db565b828281518110612cb157612cb16137ad565b602090810291909101015280612cc68161377c565b915050612c11565b509392505050565b600054600160a01b900460ff1615612d235760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161042f565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129a63390565b60006129e46012600a613672565b6040516001600160a01b03831660248201526044810182905261117a9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612a7a565b600480546040516370a0823160e01b81523092810192909252600091829182916001600160a01b03909116906370a082319060240160206040518083038186803b158015612e0257600080fd5b505afa158015612e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3a91906134db565b905060005b81811015612eef5760048054604051632f745c5960e01b8152309281019290925260248201839052612edb91612ed4916001600160a01b0316908190632f745c599060440160206040518083038186803b158015612e9c57600080fd5b505afa158015612eb0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a791906134db565b84906129c3565b925080612ee78161377c565b915050612e3f565b50612f02612efb6129d6565b83906129f5565b9250505090565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612f4d57600080fd5b505afa158015612f61573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e491906134db565b60006129e46130a7612f95612d5e565b600654604080517f872697290000000000000000000000000000000000000000000000000000000081529051610bee926001600160a01b0316916387269729916004808301926020929190829003018186803b158015612ff457600080fd5b505afa158015613008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302c91906134db565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561306f57600080fd5b505afa158015613083573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3391906134db565b613191565b6000613101826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131b09092919063ffffffff16565b80519091501561117a578080602001905181019061311f9190613427565b61117a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161042f565b60006107c66131a96131a16129d6565b610bee612d5e565b8390612a21565b6060610bf48484600085856001600160a01b0385163b6132125760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161042f565b600080866001600160a01b0316858760405161322e9190613575565b60006040518083038185875af1925050503d806000811461326b576040519150601f19603f3d011682016040523d82523d6000602084013e613270565b606091505b509150915061328082828661328b565b979650505050505050565b6060831561329a5750816129cf565b8251156132aa5782518084602001fd5b8160405162461bcd60e51b815260040161042f9190613591565b6000602082840312156132d657600080fd5b81356129cf816137d9565b6000602082840312156132f357600080fd5b81516129cf816137d9565b6000806040838503121561331157600080fd5b823561331c816137d9565b946020939093013593505050565b6000806040838503121561333d57600080fd5b8235613348816137d9565b91506020830135613358816137d9565b809150509250929050565b6000806000806080858703121561337957600080fd5b8435613384816137d9565b9350602085810135613395816137d9565b935060408601359250606086013567ffffffffffffffff808211156133b957600080fd5b818801915088601f8301126133cd57600080fd5b8135818111156133df576133df6137c3565b6133f1601f8201601f191685016135c4565b9150808252898482850101111561340757600080fd5b808484018584013760008482840101525080935050505092959194509250565b60006020828403121561343957600080fd5b815180151581146129cf57600080fd5b600060a0828403121561345b57600080fd5b60405160a0810181811067ffffffffffffffff8211171561347e5761347e6137c3565b604052825161348c816137d9565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602082840312156134d457600080fd5b5035919050565b6000602082840312156134ed57600080fd5b5051919050565b6000806040838503121561350757600080fd5b823591506020830135613358816137d9565b60008060006060848603121561352e57600080fd5b833592506020840135613540816137d9565b929592945050506040919091013590565b6000806040838503121561356457600080fd5b505080516020909101519092909150565b60008251613587818460208701613750565b9190910192915050565b60208152600082518060208401526135b0816040850160208701613750565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156135ed576135ed6137c3565b604052919050565b6000821982111561360857613608613797565b500190565b60008261362a57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561366a57816000190482111561365057613650613797565b8085161561365d57918102915b93841c9390800290613634565b509250929050565b60006129cf8383600082613688575060016107c6565b81613695575060006107c6565b81600181146136ab57600281146136b5576136d1565b60019150506107c6565b60ff8411156136c6576136c6613797565b50506001821b6107c6565b5060208310610133831016604e8410600b84101617156136f4575081810a6107c6565b6136fe838361362f565b806000190482111561371257613712613797565b029392505050565b600081600019048311821515161561373457613734613797565b500290565b60008282101561374b5761374b613797565b500390565b60005b8381101561376b578181015183820152602001613753565b83811115612ade5750506000910152565b600060001982141561379057613790613797565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461292357600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ac93e8afbded58dcf0622c4228e29390a08f721806eb53fca54d659e6810bf6a64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c806383197ef0116100ee57806392f55abb11610097578063d8ec060811610071578063d8ec06081461039f578063d905e9b4146103b2578063df16694a146103c5578063f2fde38b146103d857600080fd5b806392f55abb14610366578063b338ad1614610379578063bb74c0581461038c57600080fd5b80638d6f4d21116100c85780638d6f4d21146103305780638da5cb5b14610338578063917f69fe1461035357600080fd5b806383197ef01461030d5780638456cb59146103155780638682caf81461031d57600080fd5b8063460408721161015b57806353c98f5a1161013557806353c98f5a146102cd5780635c975abb146102e0578063715018a6146102f257806375af1df8146102fa57600080fd5b80634604087214610286578063472e4446146102995780634f9d02c3146102ba57600080fd5b8063354d3c301161018c578063354d3c30146102485780633bb3b27e1461026b5780633f4ba83a1461027e57600080fd5b806307c0cf3d146101b3578063150b7a02146101c85780631b61eb6714610235575b600080fd5b6101c66101c13660046132c4565b6103eb565b005b6101ff6101d6366004613363565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6101c6610243366004613519565b610467565b61025b6102563660046132fe565b6106a8565b604051901515815260200161022c565b6101c66102793660046132c4565b6107cc565b6101c661089d565b6101c66102943660046132c4565b61093f565b6102ac6102a73660046132fe565b6109b6565b60405190815260200161022c565b6102ac6102c83660046134c2565b610b49565b61025b6102db3660046134c2565b610bfc565b600054600160a01b900460ff1661025b565b6101c6611042565b6101c66103083660046132c4565b611094565b6101c661117f565b6101c661147e565b6101c661032b3660046132c4565b61151b565b61025b611592565b6000546040516001600160a01b03909116815260200161022c565b6101c66103613660046132fe565b611763565b6102ac6103743660046134c2565b61186c565b61025b6103873660046132fe565b611911565b61025b61039a3660046134c2565b611ebb565b6101c66103ad3660046132c4565b6123e2565b6101c66103c036600461332a565b6124f5565b6101c66103d33660046134f4565b61261d565b6101c66103e63660046132c4565b612856565b6000546001600160a01b031633146104385760405162461bcd60e51b815260206004820181905260248201526000805160206137ef83398151915260448201526064015b60405180910390fd5b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104af5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b6001546040516370a0823160e01b815230600482015284916001600160a01b0316906370a082319060240160206040518083038186803b1580156104f257600080fd5b505afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a91906134db565b10156105825760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b606482015260840161042f565b600083116105d25760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f0000000000604482015260640161042f565b6040517fe2bbb158000000000000000000000000000000000000000000000000000000008152600481018490526024810182905282906001600160a01b0382169063e2bbb15890604401602060405180830381600087803b15801561063657600080fd5b505af115801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e91906134db565b506040518481527f7a3794cf7d311106018524dfd41878138e4264f1bee18e53f1c180a1627fa2b89060200160405180910390a150505050565b60405163463d31d760e11b815260048101829052600090839082906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156106ef57600080fd5b505afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190613449565b80516040517fb5ada6d80000000000000000000000000000000000000000000000000000000081526001600160a01b038083166004830152929350909184169063b5ada6d89060240160206040518083038186803b15801561078857600080fd5b505afa15801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c09190613427565b93505050505b92915050565b6000546001600160a01b031633146108145760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff166108645760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610899573d6000803e3d6000fd5b5050565b6000546001600160a01b031633146108e55760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff166109355760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b61093d612926565b565b6000546001600160a01b031633146109875760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60405163463d31d760e11b815260048101829052600090839082906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156109fd57600080fd5b505afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190613449565b90506000816040015190506000610a5d836080015184606001516129c390919063ffffffff16565b83516040517f4d02fe6f0000000000000000000000000000000000000000000000000000000081526004810189905291925090819060009081906001600160a01b03841690634d02fe6f90602401604080518083038186803b158015610ac257600080fd5b505afa158015610ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afa9190613551565b90925090508186821015610b1457610b1281836129c3565b505b610b39610b1f6129d6565b610b3383610b2d8b8b6129e9565b906129c3565b906129f5565b9c9b505050505050505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9a57600080fd5b505afa158015610bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd291906134db565b90506000610bde612a01565b9050610bf482610bee86846129f5565b90612a21565b949350505050565b60008054600160a01b900460ff1615610c4a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161042f565b600054600160a81b900460ff16610cb25760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b606482015260840161042f565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015610cf557600080fd5b505afa158015610d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2d91906134db565b1015610d855760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420737461626c6520636f696044820152603760f91b606482015260840161042f565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610dce57600080fd5b505afa158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0691906134db565b1015610e7a5760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420737461626c6520636f696e000000000000606482015260840161042f565b6000610e858361186c565b905060008111610efd5760405162461bcd60e51b815260206004820152603c60248201527f54686520616d6f756e74206f6620616c6c6f79782062726f6e7a6520636f696e60448201527f20746f20676574206973206e6f74206c6172676572207468616e203000000000606482015260840161042f565b600154610f15906001600160a01b0316333086612a2d565b6005546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906340c10f1990604401602060405180830381600087803b158015610f7a57600080fd5b505af1158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb29190613427565b50600154604080516001600160a01b03909216825233602083015281018290527fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f9060600160405180910390a160408051338152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591015b60405180910390a150600192915050565b6000546001600160a01b0316331461108a5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b61093d6000612ae4565b6000546001600160a01b031633146110dc5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff1661112c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b600061113730612b41565b905060005b815181101561117a576111688383838151811061115b5761115b6137ad565b6020026020010151611763565b806111728161377c565b91505061113c565b505050565b6000546001600160a01b031633146111c75760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff166112175760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561125a57600080fd5b505afa15801561126e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129291906134db565b156112df5760405162461bcd60e51b815260206004820181905260248201527f42616c616e6365206f6620737461626c6520636f696e206d7573742062652030604482015260640161042f565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561132257600080fd5b505afa158015611336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135a91906134db565b156113a75760405162461bcd60e51b815260206004820152601e60248201527f42616c616e6365206f66204669647520636f696e206d75737420626520300000604482015260640161042f565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156113ea57600080fd5b505afa1580156113fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142291906134db565b1561146f5760405162461bcd60e51b815260206004820152601d60248201527f42616c616e6365206f662047464920636f696e206d7573742062652030000000604482015260640161042f565b6000546001600160a01b031680ff5b6000546001600160a01b031633146114c65760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff16156115135760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161042f565b61093d612cd6565b6000546001600160a01b031633146115635760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600080546001600160a01b031633146115db5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a81b900460ff161561165b5760405162461bcd60e51b815260206004820152602a60248201527f5661756c742068617320616c726561647920737461727420616363657074696e60448201527f67206465706f7369747300000000000000000000000000000000000000000000606482015260840161042f565b6000611665612a01565b6005549091506001600160a01b03166340c10f19306116976116856129d6565b610bee611690612d5e565b87906129f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172d9190613427565b5050600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b17905550600190565b6000546001600160a01b031633146117ab5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff166117fb5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b60048054604051632142170760e11b815230928101929092526001600160a01b0384811660248401526044830184905216906342842e0e90606401600060405180830381600087803b15801561185057600080fd5b505af1158015611864573d6000803e3d6000fd5b505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118bd57600080fd5b505afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f591906134db565b90506000611901612a01565b9050610bf481610bee86856129f5565b60008054600160a01b900460ff161561195f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161042f565b600054600160a81b900460ff166119c75760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b606482015260840161042f565b6004546001600160a01b03848116911614611a245760405162461bcd60e51b815260206004820152601860248201527f4e6f7420476f6c6466696e636820506f6f6c20546f6b656e0000000000000000604482015260640161042f565b611a2e83836106a8565b1515600114611a7f5760405162461bcd60e51b815260206004820152601060248201527f4e6f7420612076616c696420706f6f6c00000000000000000000000000000000604482015260640161042f565b6040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b158015611ada57600080fd5b505afa158015611aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1291906132e1565b6001600160a01b031614611b685760405162461bcd60e51b815260206004820152601c60248201527f5573657220646f6573206e6f74206f776e207468697320746f6b656e00000000604482015260640161042f565b6040517f081812fc0000000000000000000000000000000000000000000000000000000081526004810183905230906001600160a01b0385169063081812fc9060240160206040518083038186803b158015611bc357600080fd5b505afa158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb91906132e1565b6001600160a01b031614611c775760405162461bcd60e51b815260206004820152602e60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f72207468697320746f6b656e000000000000000000000000000000000000606482015260840161042f565b6000611c8384846109b6565b905060008111611cfb5760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e20300000000000000000000000606482015260840161042f565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015611d3e57600080fd5b505afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7691906134db565b1015611dea5760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e000000000000000000000000000000000000606482015260840161042f565b604051632142170760e11b8152336004820152306024820152604481018490526001600160a01b038516906342842e0e90606401600060405180830381600087803b158015611e3857600080fd5b505af1158015611e4c573d6000803e3d6000fd5b5050600154611e6892506001600160a01b031690503383612d6c565b604080516001600160a01b03861681523360208201529081018490527fc7e8b1bdbecdc8a549557efb2a2ab715cff51630caead31610000019e61dfa4b9060600160405180910390a15060019392505050565b60008054600160a01b900460ff1615611f095760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161042f565b600054600160a81b900460ff16611f715760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b606482015260840161042f565b6005546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec91906134db565b10156120445760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420616c6c6f797820636f696044820152603760f91b606482015260840161042f565b600554604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561208d57600080fd5b505afa1580156120a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c591906134db565b10156121395760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420616c6c6f797820636f696e000000000000606482015260840161042f565b600061214483610b49565b9050600081116121bc5760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e20300000000000000000000000606482015260840161042f565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b1580156121ff57600080fd5b505afa158015612213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223791906134db565b10156122ab5760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e000000000000000000000000000000000000606482015260840161042f565b6005546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b0390911690639dc29fac90604401602060405180830381600087803b15801561231057600080fd5b505af1158015612324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123489190613427565b50600154612360906001600160a01b03163383612d6c565b600554604080516001600160a01b03909216825233602083015281018490527f53fee901a59b4d2e659e450f8db17fc345e158fe408d2b39faf66d1f8c4a54fe9060600160405180910390a160408051338152602081018590527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59101611031565b6000546001600160a01b0316331461242a5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff1661247a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b6005546040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b1580156124da57600080fd5b505af11580156124ee573d6000803e3d6000fd5b5050505050565b6000546001600160a01b0316331461253d5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b600054600160a01b900460ff1661258d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156125cf57600080fd5b505afa1580156125e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260791906134db565b905061117a6001600160a01b0384168383612d6c565b6000546001600160a01b031633146126655760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b6001546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156126a857600080fd5b505afa1580156126bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e091906134db565b10156127385760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b606482015260840161042f565b600082116127885760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f0000000000604482015260640161042f565b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905281906001600160a01b0382169063b6b55f2590602401602060405180830381600087803b1580156127e557600080fd5b505af11580156127f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281d91906134db565b506040518381527fd483110686f79d1f5932d32add1024998649ddca927700b75bea458b4cb7cde69060200160405180910390a1505050565b6000546001600160a01b0316331461289e5760405162461bcd60e51b815260206004820181905260248201526000805160206137ef833981519152604482015260640161042f565b6001600160a01b03811661291a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161042f565b61292381612ae4565b50565b600054600160a01b900460ff166129765760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161042f565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60006129cf82846135f5565b9392505050565b60006129e46006600a613672565b905090565b60006129cf8284613739565b60006129cf828461371a565b60006129e4612a0e612db5565b610b2d612a19612f09565b610b2d612f85565b60006129cf828461360d565b6040516001600160a01b0380851660248301528316604482015260648101829052612ade9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526130ac565b50505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600480546040516370a0823160e01b81526001600160a01b038481169382019390935260609260009216906370a082319060240160206040518083038186803b158015612b8d57600080fd5b505afa158015612ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc591906134db565b905060008167ffffffffffffffff811115612be257612be26137c3565b604051908082528060200260200182016040528015612c0b578160200160208202803683370190505b50905060005b82811015612cce5760048054604051632f745c5960e01b81526001600160a01b038881169382019390935260248101849052911690632f745c599060440160206040518083038186803b158015612c6757600080fd5b505afa158015612c7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9f91906134db565b828281518110612cb157612cb16137ad565b602090810291909101015280612cc68161377c565b915050612c11565b509392505050565b600054600160a01b900460ff1615612d235760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161042f565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129a63390565b60006129e46012600a613672565b6040516001600160a01b03831660248201526044810182905261117a9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612a7a565b600480546040516370a0823160e01b81523092810192909252600091829182916001600160a01b03909116906370a082319060240160206040518083038186803b158015612e0257600080fd5b505afa158015612e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3a91906134db565b905060005b81811015612eef5760048054604051632f745c5960e01b8152309281019290925260248201839052612edb91612ed4916001600160a01b0316908190632f745c599060440160206040518083038186803b158015612e9c57600080fd5b505afa158015612eb0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a791906134db565b84906129c3565b925080612ee78161377c565b915050612e3f565b50612f02612efb6129d6565b83906129f5565b9250505090565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612f4d57600080fd5b505afa158015612f61573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e491906134db565b60006129e46130a7612f95612d5e565b600654604080517f872697290000000000000000000000000000000000000000000000000000000081529051610bee926001600160a01b0316916387269729916004808301926020929190829003018186803b158015612ff457600080fd5b505afa158015613008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302c91906134db565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561306f57600080fd5b505afa158015613083573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3391906134db565b613191565b6000613101826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131b09092919063ffffffff16565b80519091501561117a578080602001905181019061311f9190613427565b61117a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161042f565b60006107c66131a96131a16129d6565b610bee612d5e565b8390612a21565b6060610bf48484600085856001600160a01b0385163b6132125760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161042f565b600080866001600160a01b0316858760405161322e9190613575565b60006040518083038185875af1925050503d806000811461326b576040519150601f19603f3d011682016040523d82523d6000602084013e613270565b606091505b509150915061328082828661328b565b979650505050505050565b6060831561329a5750816129cf565b8251156132aa5782518084602001fd5b8160405162461bcd60e51b815260040161042f9190613591565b6000602082840312156132d657600080fd5b81356129cf816137d9565b6000602082840312156132f357600080fd5b81516129cf816137d9565b6000806040838503121561331157600080fd5b823561331c816137d9565b946020939093013593505050565b6000806040838503121561333d57600080fd5b8235613348816137d9565b91506020830135613358816137d9565b809150509250929050565b6000806000806080858703121561337957600080fd5b8435613384816137d9565b9350602085810135613395816137d9565b935060408601359250606086013567ffffffffffffffff808211156133b957600080fd5b818801915088601f8301126133cd57600080fd5b8135818111156133df576133df6137c3565b6133f1601f8201601f191685016135c4565b9150808252898482850101111561340757600080fd5b808484018584013760008482840101525080935050505092959194509250565b60006020828403121561343957600080fd5b815180151581146129cf57600080fd5b600060a0828403121561345b57600080fd5b60405160a0810181811067ffffffffffffffff8211171561347e5761347e6137c3565b604052825161348c816137d9565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602082840312156134d457600080fd5b5035919050565b6000602082840312156134ed57600080fd5b5051919050565b6000806040838503121561350757600080fd5b823591506020830135613358816137d9565b60008060006060848603121561352e57600080fd5b833592506020840135613540816137d9565b929592945050506040919091013590565b6000806040838503121561356457600080fd5b505080516020909101519092909150565b60008251613587818460208701613750565b9190910192915050565b60208152600082518060208401526135b0816040850160208701613750565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156135ed576135ed6137c3565b604052919050565b6000821982111561360857613608613797565b500190565b60008261362a57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561366a57816000190482111561365057613650613797565b8085161561365d57918102915b93841c9390800290613634565b509250929050565b60006129cf8383600082613688575060016107c6565b81613695575060006107c6565b81600181146136ab57600281146136b5576136d1565b60019150506107c6565b60ff8411156136c6576136c6613797565b50506001821b6107c6565b5060208310610133831016604e8410600b84101617156136f4575081810a6107c6565b6136fe838361362f565b806000190482111561371257613712613797565b029392505050565b600081600019048311821515161561373457613734613797565b500290565b60008282101561374b5761374b613797565b500390565b60005b8381101561376b578181015183820152602001613753565b83811115612ade5750506000910152565b600060001982141561379057613790613797565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461292357600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ac93e8afbded58dcf0622c4228e29390a08f721806eb53fca54d659e6810bf6a64736f6c63430008070033",
  "devdoc": {
    "author": "AlloyX",
    "kind": "dev",
    "methods": {
      "depositAlloyxBronzeTokens(uint256)": {
        "params": {
          "_tokenAmount": "Number of Alloy Tokens"
        }
      },
      "depositNFTToken(address,uint256)": {
        "params": {
          "_tokenAddress": "NFT Address",
          "_tokenID": "NFT ID"
        }
      },
      "depositUSDCCoin(uint256)": {
        "params": {
          "_tokenAmount": "Number of stable coin"
        }
      },
      "getJuniorTokenValue(address,uint256)": {
        "params": {
          "_tokenAddress": "The backer NFT address",
          "_tokenID": "The backer NFT id"
        }
      },
      "isValidPool(address,uint256)": {
        "params": {
          "_tokenAddress": "The backer NFT address",
          "_tokenID": "The backer NFT id"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AlloyX Vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "USDCtoAlloyxBronze(uint256)": {
        "notice": "Convert USDC Amount to Alloyx Bronze"
      },
      "alloyxBronzeToUSDC(uint256)": {
        "notice": "Convert Alloyx Bronze to USDC amount"
      },
      "depositAlloyxBronzeTokens(uint256)": {
        "notice": "An Alloy token holder can deposit their tokens and redeem them for USDC"
      },
      "depositNFTToken(address,uint256)": {
        "notice": "A Junior token holder can deposit their NFT for stable coin"
      },
      "depositUSDCCoin(uint256)": {
        "notice": "A Liquidity Provider can deposit supported stable coins for Alloy Tokens"
      },
      "getJuniorTokenValue(address,uint256)": {
        "notice": "Using the Goldfinch contracts, read the principal, redeemed and redeemable values"
      },
      "isValidPool(address,uint256)": {
        "notice": "Using the PoolTokens interface, check if this is a valid pool"
      },
      "startVaultOperation()": {
        "notice": "Initialize by minting the alloy brown tokens to owner"
      }
    },
    "notice": "Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch and emits AlloyTokens when a liquidity provider deposits supported stable coins.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2183,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2298,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6963,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "vaultStarted",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6966,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "usdcCoin",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 6969,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "gfiCoin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 6972,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "fiduCoin",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3038"
      },
      {
        "astId": 6975,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "goldFinchPoolToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPoolTokens)8442"
      },
      {
        "astId": 6978,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "alloyxTokenBronze",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AlloyxTokenBronze)5729"
      },
      {
        "astId": 6981,
        "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
        "label": "seniorPool",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ISeniorPool)8538"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AlloyxTokenBronze)5729": {
        "encoding": "inplace",
        "label": "contract AlloyxTokenBronze",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3038": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolTokens)8442": {
        "encoding": "inplace",
        "label": "contract IPoolTokens",
        "numberOfBytes": "20"
      },
      "t_contract(ISeniorPool)8538": {
        "encoding": "inplace",
        "label": "contract ISeniorPool",
        "numberOfBytes": "20"
      }
    }
  }
}
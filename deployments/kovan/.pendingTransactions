{
  "0xb38e9aca41898242872b7cb1cc0f61ec0a815e3918c66a99379dc85fca41d5ea": {
    "name": "AlloyVault",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "AlloyVault",
      "sourceName": "contracts/alloyx/v2.0/AlloyVault.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_alloyxBronzeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_alloyxSilverAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_usdcCoinAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_fiduCoinAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_gfiCoinAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_goldFinchTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_seniorPoolAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_tokenReceiver",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_tokenAmount",
              "type": "uint256"
            }
          ],
          "name": "Burn",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_tokenAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "_tokenSender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_tokenAmount",
              "type": "uint256"
            }
          ],
          "name": "DepositAlloyx",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_tokenAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "_tokenSender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256"
            }
          ],
          "name": "DepositNFT",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_tokenAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "_tokenSender",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_tokenAmount",
              "type": "uint256"
            }
          ],
          "name": "DepositStable",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "_tokenReceiver",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_tokenAmount",
              "type": "uint256"
            }
          ],
          "name": "Mint",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "PurchaseJunior",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "PurchaseSenior",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_alloyxAddress",
              "type": "address"
            }
          ],
          "name": "changeAlloyxBronzeAddress",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_alloyxAddress",
              "type": "address"
            }
          ],
          "name": "changeAlloyxSilverAddress",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_poolToken",
              "type": "address"
            }
          ],
          "name": "changePoolTokenAddress",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_seniorPool",
              "type": "address"
            }
          ],
          "name": "changeSeniorPoolAddress",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenAmount",
              "type": "uint256"
            }
          ],
          "name": "depositAlloyxBronzeTokens",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256"
            }
          ],
          "name": "depositNFTToken",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenAmount",
              "type": "uint256"
            }
          ],
          "name": "depositUSDCCoin",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "destroy",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenID",
              "type": "uint256"
            }
          ],
          "name": "isValidPool",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "_to",
              "type": "address"
            }
          ],
          "name": "migrateERC20",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address payable",
              "name": "_toAddress",
              "type": "address"
            }
          ],
          "name": "migrateGoldfinchPoolTokens",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "onERC721Received",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tranche",
              "type": "uint256"
            }
          ],
          "name": "purchaseJuniorToken",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "name": "purchaseSeniorTokens",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "startVaultOperation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            }
          ],
          "name": "transferAlloyxOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "unpause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040523480156200001157600080fd5b50604051620037e0380380620037e083398101604081905262000034916200013d565b6200003f33620000d0565b60008054600580546001600160a01b03199081166001600160a01b039b8c1617909155600680548216998b1699909917909855600180548916978a1697909717909655600280548816948916949094179093556003805487169488169490941790935560048054861691871691909117905560078054909416919094161790915561ffff60a01b19169055620001d2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013857600080fd5b919050565b600080600080600080600060e0888a0312156200015957600080fd5b620001648862000120565b9650620001746020890162000120565b9550620001846040890162000120565b9450620001946060890162000120565b9350620001a46080890162000120565b9250620001b460a0890162000120565b9150620001c460c0890162000120565b905092959891949750929550565b6135fe80620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806383197ef0116100d8578063b338ad161161008c578063d905e9b411610066578063d905e9b414610314578063df16694a14610327578063f2fde38b1461033a57600080fd5b8063b338ad16146102db578063bb74c058146102ee578063d8ec06081461030157600080fd5b80638682caf8116100bd5780638682caf8146102a55780638d6f4d21146102b85780638da5cb5b146102c057600080fd5b806383197ef0146102955780638456cb591461029d57600080fd5b80633f4ba83a1161013a5780635c975abb116101145780635c975abb14610268578063715018a61461027a5780637c9054571461028257600080fd5b80633f4ba83a1461023a578063460408721461024257806353c98f5a1461025557600080fd5b80631a97749d1161016b5780631a97749d146101f15780631b61eb6714610204578063354d3c301461021757600080fd5b806307c0cf3d14610187578063150b7a021461019c575b600080fd5b61019a610195366004613094565b61034d565b005b6101d36101aa366004613107565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61019a6101ff366004613094565b6103bc565b61019a6102123660046132e9565b610426565b61022a6102253660046131cb565b610667565b60405190151581526020016101e8565b61019a61078b565b61019a610250366004613094565b61082d565b61022a610263366004613292565b610897565b600054600160a01b900460ff1661022a565b61019a610cdd565b61019a610290366004613094565b610d2f565b61019a610f62565b61019a611261565b61019a6102b3366004613094565b6112fe565b61022a611368565b6000546040516001600160a01b0390911681526020016101e8565b61022a6102e93660046131cb565b611527565b61022a6102fc366004613292565b611aea565b61019a61030f366004613094565b612011565b61019a6103223660046130ce565b612124565b61019a6103353660046132c4565b61224c565b61019a610348366004613094565b612485565b6000546001600160a01b0316331461039a5760405162461bcd60e51b815260206004820181905260248201526000805160206135a983398151915260448201526064015b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104045760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461046e5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b6001546040516370a0823160e01b815230600482015284916001600160a01b0316906370a082319060240160206040518083038186803b1580156104b157600080fd5b505afa1580156104c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e991906132ab565b10156105415760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b6064820152608401610391565b600083116105915760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f00000000006044820152606401610391565b6040517fe2bbb158000000000000000000000000000000000000000000000000000000008152600481018490526024810182905282906001600160a01b0382169063e2bbb15890604401602060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d91906132ab565b506040518481527f7a3794cf7d311106018524dfd41878138e4264f1bee18e53f1c180a1627fa2b89060200160405180910390a150505050565b60405163463d31d760e11b815260048101829052600090839082906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156106ae57600080fd5b505afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190613219565b80516040517fb5ada6d80000000000000000000000000000000000000000000000000000000081526001600160a01b038083166004830152929350909184169063b5ada6d89060240160206040518083038186803b15801561074757600080fd5b505afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f91906131f7565b93505050505b92915050565b6000546001600160a01b031633146107d35760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff166108235760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b61082b612555565b565b6000546001600160a01b031633146108755760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60008054600160a01b900460ff16156108e55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b600054600160a81b900460ff1661094d5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b6064820152608401610391565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561099057600080fd5b505afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906132ab565b1015610a205760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420737461626c6520636f696044820152603760f91b6064820152608401610391565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610a6957600080fd5b505afa158015610a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa191906132ab565b1015610b155760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420737461626c6520636f696e0000000000006064820152608401610391565b6000610b20836125f2565b905060008111610b985760405162461bcd60e51b815260206004820152603c60248201527f54686520616d6f756e74206f6620616c6c6f79782062726f6e7a6520636f696e60448201527f20746f20676574206973206e6f74206c6172676572207468616e2030000000006064820152608401610391565b600154610bb0906001600160a01b031633308661269f565b6005546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906340c10f1990604401602060405180830381600087803b158015610c1557600080fd5b505af1158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d91906131f7565b50600154604080516001600160a01b03909216825233602083015281018290527fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f9060600160405180910390a160408051338152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591015b60405180910390a150600192915050565b6000546001600160a01b03163314610d255760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b61082b600061273e565b6000546001600160a01b03163314610d775760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff16610dc75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610e1057600080fd5b505afa158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4891906132ab565b905060005b81811015610f5d5760048054604051632f745c5960e01b815230928101839052602481018490526001600160a01b03909116916342842e0e9186908490632f745c599060440160206040518083038186803b158015610eab57600080fd5b505afa158015610ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee391906132ab565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610f3257600080fd5b505af1158015610f46573d6000803e3d6000fd5b505050508080610f559061354c565b915050610e4d565b505050565b6000546001600160a01b03163314610faa5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff16610ffa5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561103d57600080fd5b505afa158015611051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107591906132ab565b156110c25760405162461bcd60e51b815260206004820181905260248201527f42616c616e6365206f6620737461626c6520636f696e206d75737420626520306044820152606401610391565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561110557600080fd5b505afa158015611119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113d91906132ab565b1561118a5760405162461bcd60e51b815260206004820152601e60248201527f42616c616e6365206f66204669647520636f696e206d757374206265203000006044820152606401610391565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156111cd57600080fd5b505afa1580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120591906132ab565b156112525760405162461bcd60e51b815260206004820152601d60248201527f42616c616e6365206f662047464920636f696e206d75737420626520300000006044820152606401610391565b6000546001600160a01b031680ff5b6000546001600160a01b031633146112a95760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff16156112f65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b61082b61278e565b6000546001600160a01b031633146113465760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b031633146113b15760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a81b900460ff16156114315760405162461bcd60e51b815260206004820152602a60248201527f5661756c742068617320616c726561647920737461727420616363657074696e60448201527f67206465706f73697473000000000000000000000000000000000000000000006064820152608401610391565b600061143b612816565b6005549091506001600160a01b03166340c10f193061147361145b612841565b61146d61146661284f565b879061285d565b90612870565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156114b957600080fd5b505af11580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f191906131f7565b5050600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b17905550600190565b60008054600160a01b900460ff16156115755760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b600054600160a81b900460ff166115dd5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b6064820152608401610391565b6004546001600160a01b0384811691161461163a5760405162461bcd60e51b815260206004820152601860248201527f4e6f7420476f6c6466696e636820506f6f6c20546f6b656e00000000000000006044820152606401610391565b6116448383610667565b15156001146116955760405162461bcd60e51b815260206004820152601060248201527f4e6f7420612076616c696420706f6f6c000000000000000000000000000000006044820152606401610391565b6040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b1580156116f057600080fd5b505afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172891906130b1565b6001600160a01b03161461177e5760405162461bcd60e51b815260206004820152601c60248201527f5573657220646f6573206e6f74206f776e207468697320746f6b656e000000006044820152606401610391565b6040517f081812fc0000000000000000000000000000000000000000000000000000000081526004810183905230906001600160a01b0385169063081812fc9060240160206040518083038186803b1580156117d957600080fd5b505afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181191906130b1565b6001600160a01b03161461188d5760405162461bcd60e51b815260206004820152602e60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f72207468697320746f6b656e0000000000000000000000000000000000006064820152608401610391565b6000611899848461287c565b9050600081116119115760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e203000000000000000000000006064820152608401610391565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561195457600080fd5b505afa158015611968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c91906132ab565b1015611a005760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e0000000000000000000000000000000000006064820152608401610391565b6040517f42842e0e000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001600160a01b038516906342842e0e90606401600060405180830381600087803b158015611a6757600080fd5b505af1158015611a7b573d6000803e3d6000fd5b5050600154611a9792506001600160a01b0316905033836129f8565b604080516001600160a01b03861681523360208201529081018490527fc7e8b1bdbecdc8a549557efb2a2ab715cff51630caead31610000019e61dfa4b9060600160405180910390a15060019392505050565b60008054600160a01b900460ff1615611b385760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b600054600160a81b900460ff16611ba05760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b6064820152608401610391565b6005546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015611be357600080fd5b505afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b91906132ab565b1015611c735760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420616c6c6f797820636f696044820152603760f91b6064820152608401610391565b600554604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015611cbc57600080fd5b505afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf491906132ab565b1015611d685760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420616c6c6f797820636f696e0000000000006064820152608401610391565b6000611d7383612a41565b905060008111611deb5760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e203000000000000000000000006064820152608401610391565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015611e2e57600080fd5b505afa158015611e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6691906132ab565b1015611eda5760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e0000000000000000000000000000000000006064820152608401610391565b6005546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b0390911690639dc29fac90604401602060405180830381600087803b158015611f3f57600080fd5b505af1158015611f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7791906131f7565b50600154611f8f906001600160a01b031633836129f8565b600554604080516001600160a01b03909216825233602083015281018290527f53fee901a59b4d2e659e450f8db17fc345e158fe408d2b39faf66d1f8c4a54fe9060600160405180910390a160408051338152602081018390527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59101610ccc565b6000546001600160a01b031633146120595760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff166120a95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6005546040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b15801561210957600080fd5b505af115801561211d573d6000803e3d6000fd5b5050505050565b6000546001600160a01b0316331461216c5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff166121bc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156121fe57600080fd5b505afa158015612212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223691906132ab565b9050610f5d6001600160a01b03841683836129f8565b6000546001600160a01b031633146122945760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b6001546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156122d757600080fd5b505afa1580156122eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230f91906132ab565b10156123675760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b6064820152608401610391565b600082116123b75760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f00000000006044820152606401610391565b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905281906001600160a01b0382169063b6b55f2590602401602060405180830381600087803b15801561241457600080fd5b505af1158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c91906132ab565b506040518381527fd483110686f79d1f5932d32add1024998649ddca927700b75bea458b4cb7cde69060200160405180910390a1505050565b6000546001600160a01b031633146124cd5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b6001600160a01b0381166125495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610391565b6125528161273e565b50565b600054600160a01b900460ff166125a55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561264357600080fd5b505afa158015612657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267b91906132ab565b90506000612687612816565b90506126978161146d868561285d565b949350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526127389085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612ae6565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff16156127db5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125d53390565b600061283c612823612bcb565b61283661282e612d24565b612836612da0565b90612ecd565b905090565b600061283c6006600a613442565b600061283c6012600a613442565b600061286982846134ea565b9392505050565b600061286982846133dd565b60405163463d31d760e11b815260048101829052600090839082906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156128c357600080fd5b505afa1580156128d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fb9190613219565b9050600081604001519050600061292383608001518460600151612ecd90919063ffffffff16565b83516040517f4d02fe6f0000000000000000000000000000000000000000000000000000000081526004810189905291925090819060009081906001600160a01b03841690634d02fe6f90602401604080518083038186803b15801561298857600080fd5b505afa15801561299c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c09190613321565b909250905081868210156129da576129d88183612ecd565b505b6129e8816128368989612ed9565b9c9b505050505050505050505050565b6040516001600160a01b038316602482015260448101829052610f5d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016126ec565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a9257600080fd5b505afa158015612aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aca91906132ab565b90506000612ad6612816565b90506126978261146d868461285d565b6000612b3b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ee59092919063ffffffff16565b805190915015610f5d5780806020019051810190612b5991906131f7565b610f5d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610391565b600480546040516370a0823160e01b81523092810192909252600091829182916001600160a01b03909116906370a082319060240160206040518083038186803b158015612c1857600080fd5b505afa158015612c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5091906132ab565b905060005b81811015612d0a5760048054604051632f745c5960e01b8152309281019290925260248201839052612cf691612cef916001600160a01b0316908190632f745c599060440160206040518083038186803b158015612cb257600080fd5b505afa158015612cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cea91906132ab565b61287c565b8490612ecd565b925080612d028161354c565b915050612c55565b50612d1d612d16612841565b839061285d565b9250505090565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612d6857600080fd5b505afa158015612d7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283c91906132ab565b600061283c612ec8612db061284f565b600754604080517f87269729000000000000000000000000000000000000000000000000000000008152905161146d926001600160a01b0316916387269729916004808301926020929190829003018186803b158015612e0f57600080fd5b505afa158015612e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4791906132ab565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612e8a57600080fd5b505afa158015612e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec291906132ab565b9061285d565b612ef4565b600061286982846133c5565b60006128698284613509565b60606126978484600085612f13565b6000610785612f0c612f04612841565b61146d61284f565b8390612870565b606082471015612f8b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610391565b6001600160a01b0385163b612fe25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610391565b600080866001600160a01b03168587604051612ffe9190613345565b60006040518083038185875af1925050503d806000811461303b576040519150601f19603f3d011682016040523d82523d6000602084013e613040565b606091505b509150915061305082828661305b565b979650505050505050565b6060831561306a575081612869565b82511561307a5782518084602001fd5b8160405162461bcd60e51b81526004016103919190613361565b6000602082840312156130a657600080fd5b813561286981613593565b6000602082840312156130c357600080fd5b815161286981613593565b600080604083850312156130e157600080fd5b82356130ec81613593565b915060208301356130fc81613593565b809150509250929050565b6000806000806080858703121561311d57600080fd5b843561312881613593565b935060208581013561313981613593565b935060408601359250606086013567ffffffffffffffff8082111561315d57600080fd5b818801915088601f83011261317157600080fd5b8135818111156131835761318361357d565b613195601f8201601f19168501613394565b915080825289848285010111156131ab57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080604083850312156131de57600080fd5b82356131e981613593565b946020939093013593505050565b60006020828403121561320957600080fd5b8151801515811461286957600080fd5b600060a0828403121561322b57600080fd5b60405160a0810181811067ffffffffffffffff8211171561324e5761324e61357d565b604052825161325c81613593565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602082840312156132a457600080fd5b5035919050565b6000602082840312156132bd57600080fd5b5051919050565b600080604083850312156132d757600080fd5b8235915060208301356130fc81613593565b6000806000606084860312156132fe57600080fd5b83359250602084013561331081613593565b929592945050506040919091013590565b6000806040838503121561333457600080fd5b505080516020909101519092909150565b60008251613357818460208701613520565b9190910192915050565b6020815260008251806020840152613380816040850160208701613520565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156133bd576133bd61357d565b604052919050565b600082198211156133d8576133d8613567565b500190565b6000826133fa57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561343a57816000190482111561342057613420613567565b8085161561342d57918102915b93841c9390800290613404565b509250929050565b6000612869838360008261345857506001610785565b8161346557506000610785565b816001811461347b5760028114613485576134a1565b6001915050610785565b60ff84111561349657613496613567565b50506001821b610785565b5060208310610133831016604e8410600b84101617156134c4575081810a610785565b6134ce83836133ff565b80600019048211156134e2576134e2613567565b029392505050565b600081600019048311821515161561350457613504613567565b500290565b60008282101561351b5761351b613567565b500390565b60005b8381101561353b578181015183820152602001613523565b838111156127385750506000910152565b600060001982141561356057613560613567565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461255257600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ec017916fcb44d798d2a7a37a6b034c4a9b781fbfaf18e51e862e787ef76fc1764736f6c63430008070033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c806383197ef0116100d8578063b338ad161161008c578063d905e9b411610066578063d905e9b414610314578063df16694a14610327578063f2fde38b1461033a57600080fd5b8063b338ad16146102db578063bb74c058146102ee578063d8ec06081461030157600080fd5b80638682caf8116100bd5780638682caf8146102a55780638d6f4d21146102b85780638da5cb5b146102c057600080fd5b806383197ef0146102955780638456cb591461029d57600080fd5b80633f4ba83a1161013a5780635c975abb116101145780635c975abb14610268578063715018a61461027a5780637c9054571461028257600080fd5b80633f4ba83a1461023a578063460408721461024257806353c98f5a1461025557600080fd5b80631a97749d1161016b5780631a97749d146101f15780631b61eb6714610204578063354d3c301461021757600080fd5b806307c0cf3d14610187578063150b7a021461019c575b600080fd5b61019a610195366004613094565b61034d565b005b6101d36101aa366004613107565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61019a6101ff366004613094565b6103bc565b61019a6102123660046132e9565b610426565b61022a6102253660046131cb565b610667565b60405190151581526020016101e8565b61019a61078b565b61019a610250366004613094565b61082d565b61022a610263366004613292565b610897565b600054600160a01b900460ff1661022a565b61019a610cdd565b61019a610290366004613094565b610d2f565b61019a610f62565b61019a611261565b61019a6102b3366004613094565b6112fe565b61022a611368565b6000546040516001600160a01b0390911681526020016101e8565b61022a6102e93660046131cb565b611527565b61022a6102fc366004613292565b611aea565b61019a61030f366004613094565b612011565b61019a6103223660046130ce565b612124565b61019a6103353660046132c4565b61224c565b61019a610348366004613094565b612485565b6000546001600160a01b0316331461039a5760405162461bcd60e51b815260206004820181905260248201526000805160206135a983398151915260448201526064015b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104045760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461046e5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b6001546040516370a0823160e01b815230600482015284916001600160a01b0316906370a082319060240160206040518083038186803b1580156104b157600080fd5b505afa1580156104c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e991906132ab565b10156105415760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b6064820152608401610391565b600083116105915760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f00000000006044820152606401610391565b6040517fe2bbb158000000000000000000000000000000000000000000000000000000008152600481018490526024810182905282906001600160a01b0382169063e2bbb15890604401602060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d91906132ab565b506040518481527f7a3794cf7d311106018524dfd41878138e4264f1bee18e53f1c180a1627fa2b89060200160405180910390a150505050565b60405163463d31d760e11b815260048101829052600090839082906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156106ae57600080fd5b505afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190613219565b80516040517fb5ada6d80000000000000000000000000000000000000000000000000000000081526001600160a01b038083166004830152929350909184169063b5ada6d89060240160206040518083038186803b15801561074757600080fd5b505afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f91906131f7565b93505050505b92915050565b6000546001600160a01b031633146107d35760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff166108235760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b61082b612555565b565b6000546001600160a01b031633146108755760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60008054600160a01b900460ff16156108e55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b600054600160a81b900460ff1661094d5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b6064820152608401610391565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561099057600080fd5b505afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906132ab565b1015610a205760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420737461626c6520636f696044820152603760f91b6064820152608401610391565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610a6957600080fd5b505afa158015610a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa191906132ab565b1015610b155760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420737461626c6520636f696e0000000000006064820152608401610391565b6000610b20836125f2565b905060008111610b985760405162461bcd60e51b815260206004820152603c60248201527f54686520616d6f756e74206f6620616c6c6f79782062726f6e7a6520636f696e60448201527f20746f20676574206973206e6f74206c6172676572207468616e2030000000006064820152608401610391565b600154610bb0906001600160a01b031633308661269f565b6005546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906340c10f1990604401602060405180830381600087803b158015610c1557600080fd5b505af1158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d91906131f7565b50600154604080516001600160a01b03909216825233602083015281018290527fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f9060600160405180910390a160408051338152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591015b60405180910390a150600192915050565b6000546001600160a01b03163314610d255760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b61082b600061273e565b6000546001600160a01b03163314610d775760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff16610dc75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610e1057600080fd5b505afa158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4891906132ab565b905060005b81811015610f5d5760048054604051632f745c5960e01b815230928101839052602481018490526001600160a01b03909116916342842e0e9186908490632f745c599060440160206040518083038186803b158015610eab57600080fd5b505afa158015610ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee391906132ab565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610f3257600080fd5b505af1158015610f46573d6000803e3d6000fd5b505050508080610f559061354c565b915050610e4d565b505050565b6000546001600160a01b03163314610faa5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff16610ffa5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561103d57600080fd5b505afa158015611051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107591906132ab565b156110c25760405162461bcd60e51b815260206004820181905260248201527f42616c616e6365206f6620737461626c6520636f696e206d75737420626520306044820152606401610391565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561110557600080fd5b505afa158015611119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113d91906132ab565b1561118a5760405162461bcd60e51b815260206004820152601e60248201527f42616c616e6365206f66204669647520636f696e206d757374206265203000006044820152606401610391565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156111cd57600080fd5b505afa1580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120591906132ab565b156112525760405162461bcd60e51b815260206004820152601d60248201527f42616c616e6365206f662047464920636f696e206d75737420626520300000006044820152606401610391565b6000546001600160a01b031680ff5b6000546001600160a01b031633146112a95760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff16156112f65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b61082b61278e565b6000546001600160a01b031633146113465760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b031633146113b15760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a81b900460ff16156114315760405162461bcd60e51b815260206004820152602a60248201527f5661756c742068617320616c726561647920737461727420616363657074696e60448201527f67206465706f73697473000000000000000000000000000000000000000000006064820152608401610391565b600061143b612816565b6005549091506001600160a01b03166340c10f193061147361145b612841565b61146d61146661284f565b879061285d565b90612870565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156114b957600080fd5b505af11580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f191906131f7565b5050600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b17905550600190565b60008054600160a01b900460ff16156115755760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b600054600160a81b900460ff166115dd5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b6064820152608401610391565b6004546001600160a01b0384811691161461163a5760405162461bcd60e51b815260206004820152601860248201527f4e6f7420476f6c6466696e636820506f6f6c20546f6b656e00000000000000006044820152606401610391565b6116448383610667565b15156001146116955760405162461bcd60e51b815260206004820152601060248201527f4e6f7420612076616c696420706f6f6c000000000000000000000000000000006044820152606401610391565b6040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b1580156116f057600080fd5b505afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172891906130b1565b6001600160a01b03161461177e5760405162461bcd60e51b815260206004820152601c60248201527f5573657220646f6573206e6f74206f776e207468697320746f6b656e000000006044820152606401610391565b6040517f081812fc0000000000000000000000000000000000000000000000000000000081526004810183905230906001600160a01b0385169063081812fc9060240160206040518083038186803b1580156117d957600080fd5b505afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181191906130b1565b6001600160a01b03161461188d5760405162461bcd60e51b815260206004820152602e60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f72207468697320746f6b656e0000000000000000000000000000000000006064820152608401610391565b6000611899848461287c565b9050600081116119115760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e203000000000000000000000006064820152608401610391565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561195457600080fd5b505afa158015611968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c91906132ab565b1015611a005760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e0000000000000000000000000000000000006064820152608401610391565b6040517f42842e0e000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001600160a01b038516906342842e0e90606401600060405180830381600087803b158015611a6757600080fd5b505af1158015611a7b573d6000803e3d6000fd5b5050600154611a9792506001600160a01b0316905033836129f8565b604080516001600160a01b03861681523360208201529081018490527fc7e8b1bdbecdc8a549557efb2a2ab715cff51630caead31610000019e61dfa4b9060600160405180910390a15060019392505050565b60008054600160a01b900460ff1615611b385760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b600054600160a81b900460ff16611ba05760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b6064820152608401610391565b6005546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015611be357600080fd5b505afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b91906132ab565b1015611c735760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420616c6c6f797820636f696044820152603760f91b6064820152608401610391565b600554604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015611cbc57600080fd5b505afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf491906132ab565b1015611d685760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420616c6c6f797820636f696e0000000000006064820152608401610391565b6000611d7383612a41565b905060008111611deb5760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e203000000000000000000000006064820152608401610391565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015611e2e57600080fd5b505afa158015611e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6691906132ab565b1015611eda5760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e0000000000000000000000000000000000006064820152608401610391565b6005546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b0390911690639dc29fac90604401602060405180830381600087803b158015611f3f57600080fd5b505af1158015611f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7791906131f7565b50600154611f8f906001600160a01b031633836129f8565b600554604080516001600160a01b03909216825233602083015281018290527f53fee901a59b4d2e659e450f8db17fc345e158fe408d2b39faf66d1f8c4a54fe9060600160405180910390a160408051338152602081018390527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59101610ccc565b6000546001600160a01b031633146120595760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff166120a95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6005546040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b15801561210957600080fd5b505af115801561211d573d6000803e3d6000fd5b5050505050565b6000546001600160a01b0316331461216c5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff166121bc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156121fe57600080fd5b505afa158015612212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223691906132ab565b9050610f5d6001600160a01b03841683836129f8565b6000546001600160a01b031633146122945760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b6001546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156122d757600080fd5b505afa1580156122eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230f91906132ab565b10156123675760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b6064820152608401610391565b600082116123b75760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f00000000006044820152606401610391565b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905281906001600160a01b0382169063b6b55f2590602401602060405180830381600087803b15801561241457600080fd5b505af1158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c91906132ab565b506040518381527fd483110686f79d1f5932d32add1024998649ddca927700b75bea458b4cb7cde69060200160405180910390a1505050565b6000546001600160a01b031633146124cd5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b6001600160a01b0381166125495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610391565b6125528161273e565b50565b600054600160a01b900460ff166125a55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561264357600080fd5b505afa158015612657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267b91906132ab565b90506000612687612816565b90506126978161146d868561285d565b949350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526127389085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612ae6565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff16156127db5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125d53390565b600061283c612823612bcb565b61283661282e612d24565b612836612da0565b90612ecd565b905090565b600061283c6006600a613442565b600061283c6012600a613442565b600061286982846134ea565b9392505050565b600061286982846133dd565b60405163463d31d760e11b815260048101829052600090839082906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156128c357600080fd5b505afa1580156128d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fb9190613219565b9050600081604001519050600061292383608001518460600151612ecd90919063ffffffff16565b83516040517f4d02fe6f0000000000000000000000000000000000000000000000000000000081526004810189905291925090819060009081906001600160a01b03841690634d02fe6f90602401604080518083038186803b15801561298857600080fd5b505afa15801561299c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c09190613321565b909250905081868210156129da576129d88183612ecd565b505b6129e8816128368989612ed9565b9c9b505050505050505050505050565b6040516001600160a01b038316602482015260448101829052610f5d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016126ec565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a9257600080fd5b505afa158015612aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aca91906132ab565b90506000612ad6612816565b90506126978261146d868461285d565b6000612b3b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ee59092919063ffffffff16565b805190915015610f5d5780806020019051810190612b5991906131f7565b610f5d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610391565b600480546040516370a0823160e01b81523092810192909252600091829182916001600160a01b03909116906370a082319060240160206040518083038186803b158015612c1857600080fd5b505afa158015612c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5091906132ab565b905060005b81811015612d0a5760048054604051632f745c5960e01b8152309281019290925260248201839052612cf691612cef916001600160a01b0316908190632f745c599060440160206040518083038186803b158015612cb257600080fd5b505afa158015612cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cea91906132ab565b61287c565b8490612ecd565b925080612d028161354c565b915050612c55565b50612d1d612d16612841565b839061285d565b9250505090565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612d6857600080fd5b505afa158015612d7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283c91906132ab565b600061283c612ec8612db061284f565b600754604080517f87269729000000000000000000000000000000000000000000000000000000008152905161146d926001600160a01b0316916387269729916004808301926020929190829003018186803b158015612e0f57600080fd5b505afa158015612e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4791906132ab565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612e8a57600080fd5b505afa158015612e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec291906132ab565b9061285d565b612ef4565b600061286982846133c5565b60006128698284613509565b60606126978484600085612f13565b6000610785612f0c612f04612841565b61146d61284f565b8390612870565b606082471015612f8b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610391565b6001600160a01b0385163b612fe25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610391565b600080866001600160a01b03168587604051612ffe9190613345565b60006040518083038185875af1925050503d806000811461303b576040519150601f19603f3d011682016040523d82523d6000602084013e613040565b606091505b509150915061305082828661305b565b979650505050505050565b6060831561306a575081612869565b82511561307a5782518084602001fd5b8160405162461bcd60e51b81526004016103919190613361565b6000602082840312156130a657600080fd5b813561286981613593565b6000602082840312156130c357600080fd5b815161286981613593565b600080604083850312156130e157600080fd5b82356130ec81613593565b915060208301356130fc81613593565b809150509250929050565b6000806000806080858703121561311d57600080fd5b843561312881613593565b935060208581013561313981613593565b935060408601359250606086013567ffffffffffffffff8082111561315d57600080fd5b818801915088601f83011261317157600080fd5b8135818111156131835761318361357d565b613195601f8201601f19168501613394565b915080825289848285010111156131ab57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080604083850312156131de57600080fd5b82356131e981613593565b946020939093013593505050565b60006020828403121561320957600080fd5b8151801515811461286957600080fd5b600060a0828403121561322b57600080fd5b60405160a0810181811067ffffffffffffffff8211171561324e5761324e61357d565b604052825161325c81613593565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602082840312156132a457600080fd5b5035919050565b6000602082840312156132bd57600080fd5b5051919050565b600080604083850312156132d757600080fd5b8235915060208301356130fc81613593565b6000806000606084860312156132fe57600080fd5b83359250602084013561331081613593565b929592945050506040919091013590565b6000806040838503121561333457600080fd5b505080516020909101519092909150565b60008251613357818460208701613520565b9190910192915050565b6020815260008251806020840152613380816040850160208701613520565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156133bd576133bd61357d565b604052919050565b600082198211156133d8576133d8613567565b500190565b6000826133fa57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561343a57816000190482111561342057613420613567565b8085161561342d57918102915b93841c9390800290613404565b509250929050565b6000612869838360008261345857506001610785565b8161346557506000610785565b816001811461347b5760028114613485576134a1565b6001915050610785565b60ff84111561349657613496613567565b50506001821b610785565b5060208310610133831016604e8410600b84101617156134c4575081810a610785565b6134ce83836133ff565b80600019048211156134e2576134e2613567565b029392505050565b600081600019048311821515161561350457613504613567565b500290565b60008282101561351b5761351b613567565b500390565b60005b8381101561353b578181015183820152602001613523565b838111156127385750506000910152565b600060001982141561356057613560613567565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461255257600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ec017916fcb44d798d2a7a37a6b034c4a9b781fbfaf18e51e862e787ef76fc1764736f6c63430008070033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "author": "AlloyX",
        "kind": "dev",
        "methods": {
          "depositAlloyxBronzeTokens(uint256)": {
            "params": {
              "_tokenAmount": "Number of Alloy Tokens"
            }
          },
          "depositNFTToken(address,uint256)": {
            "params": {
              "_tokenAddress": "NFT Address",
              "_tokenID": "NFT ID"
            }
          },
          "depositUSDCCoin(uint256)": {
            "params": {
              "_tokenAmount": "Number of stable coin"
            }
          },
          "isValidPool(address,uint256)": {
            "params": {
              "_tokenAddress": "The backer NFT address",
              "_tokenID": "The backer NFT id"
            }
          },
          "onERC721Received(address,address,uint256,bytes)": {
            "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "title": "AlloyX Vault",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_2199": {
              "entryPoint": null,
              "id": 2199,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_2307": {
              "entryPoint": null,
              "id": 2307,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_7084": {
              "entryPoint": null,
              "id": 7084,
              "parameterSlots": 7,
              "returnSlots": 0
            },
            "@_msgSender_5017": {
              "entryPoint": null,
              "id": 5017,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_transferOwnership_2279": {
              "entryPoint": 208,
              "id": 2279,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_address_fromMemory": {
              "entryPoint": 288,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_address_fromMemory": {
              "entryPoint": 317,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 7
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:920:46",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:46",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "74:117:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "84:22:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "99:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "93:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "93:13:46"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "84:5:46"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "169:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "178:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "181:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "171:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "171:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "171:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "128:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "139:5:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "154:3:46",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "159:1:46",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "150:3:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "150:11:46"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "163:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "146:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "146:19:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "135:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "135:31:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "125:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "125:42:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "118:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "118:50:46"
                          },
                          "nodeType": "YulIf",
                          "src": "115:70:46"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "53:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "64:5:46",
                        "type": ""
                      }
                    ],
                    "src": "14:177:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "379:539:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "426:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "435:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "438:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "428:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "428:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "428:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "400:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "409:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "396:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "396:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "421:3:46",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "392:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "392:33:46"
                          },
                          "nodeType": "YulIf",
                          "src": "389:53:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "451:50:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "491:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "461:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "461:40:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "451:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "510:59:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "554:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "565:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "550:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "550:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "520:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "520:49:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "510:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "578:59:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "622:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "633:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "618:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "618:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "588:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "588:49:46"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "578:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "646:59:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "690:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "701:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "686:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "686:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "656:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "656:49:46"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "646:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "714:60:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "758:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "769:3:46",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "754:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "754:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "724:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "724:50:46"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "714:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "783:60:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "827:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "838:3:46",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "823:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "823:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "793:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "793:50:46"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "783:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "852:60:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "896:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "907:3:46",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "892:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "892:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "862:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "862:50:46"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "852:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "297:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "308:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "320:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "328:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "336:6:46",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "344:6:46",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "352:6:46",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "360:6:46",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "368:6:46",
                        "type": ""
                      }
                    ],
                    "src": "196:722:46"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_address_fromMemory(add(headStart, 96))\n        value4 := abi_decode_address_fromMemory(add(headStart, 128))\n        value5 := abi_decode_address_fromMemory(add(headStart, 160))\n        value6 := abi_decode_address_fromMemory(add(headStart, 192))\n    }\n}",
              "id": 46,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x37E0 CODESIZE SUB DUP1 PUSH3 0x37E0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x13D JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0xD0 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP12 DUP13 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD DUP3 AND SWAP10 DUP12 AND SWAP10 SWAP1 SWAP10 OR SWAP1 SWAP9 SSTORE PUSH1 0x1 DUP1 SLOAD DUP10 AND SWAP8 DUP11 AND SWAP8 SWAP1 SWAP8 OR SWAP1 SWAP7 SSTORE PUSH1 0x2 DUP1 SLOAD DUP9 AND SWAP5 DUP10 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE PUSH1 0x3 DUP1 SLOAD DUP8 AND SWAP5 DUP9 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE PUSH1 0x4 DUP1 SLOAD DUP7 AND SWAP2 DUP8 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x7 DUP1 SLOAD SWAP1 SWAP5 AND SWAP2 SWAP1 SWAP5 AND OR SWAP1 SWAP2 SSTORE PUSH2 0xFFFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0x159 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x164 DUP9 PUSH3 0x120 JUMP JUMPDEST SWAP7 POP PUSH3 0x174 PUSH1 0x20 DUP10 ADD PUSH3 0x120 JUMP JUMPDEST SWAP6 POP PUSH3 0x184 PUSH1 0x40 DUP10 ADD PUSH3 0x120 JUMP JUMPDEST SWAP5 POP PUSH3 0x194 PUSH1 0x60 DUP10 ADD PUSH3 0x120 JUMP JUMPDEST SWAP4 POP PUSH3 0x1A4 PUSH1 0x80 DUP10 ADD PUSH3 0x120 JUMP JUMPDEST SWAP3 POP PUSH3 0x1B4 PUSH1 0xA0 DUP10 ADD PUSH3 0x120 JUMP JUMPDEST SWAP2 POP PUSH3 0x1C4 PUSH1 0xC0 DUP10 ADD PUSH3 0x120 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH2 0x35FE DUP1 PUSH3 0x1E2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x182 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x83197EF0 GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xB338AD16 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD905E9B4 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD905E9B4 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xDF16694A EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x33A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB338AD16 EQ PUSH2 0x2DB JUMPI DUP1 PUSH4 0xBB74C058 EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0xD8EC0608 EQ PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8682CAF8 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x8682CAF8 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x8D6F4D21 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x83197EF0 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x29D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x7C905457 EQ PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x46040872 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x53C98F5A EQ PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1A97749D GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x1A97749D EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x1B61EB67 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x354D3C30 EQ PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7C0CF3D EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x19C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D3 PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0x3107 JUMP JUMPDEST PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19A PUSH2 0x1FF CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x3BC JUMP JUMPDEST PUSH2 0x19A PUSH2 0x212 CALLDATASIZE PUSH1 0x4 PUSH2 0x32E9 JUMP JUMPDEST PUSH2 0x426 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x225 CALLDATASIZE PUSH1 0x4 PUSH2 0x31CB JUMP JUMPDEST PUSH2 0x667 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x78B JUMP JUMPDEST PUSH2 0x19A PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x82D JUMP JUMPDEST PUSH2 0x22A PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x3292 JUMP JUMPDEST PUSH2 0x897 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22A JUMP JUMPDEST PUSH2 0x19A PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x19A PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0xD2F JUMP JUMPDEST PUSH2 0x19A PUSH2 0xF62 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x1261 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x12FE JUMP JUMPDEST PUSH2 0x22A PUSH2 0x1368 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x31CB JUMP JUMPDEST PUSH2 0x1527 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x2FC CALLDATASIZE PUSH1 0x4 PUSH2 0x3292 JUMP JUMPDEST PUSH2 0x1AEA JUMP JUMPDEST PUSH2 0x19A PUSH2 0x30F CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x2011 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x322 CALLDATASIZE PUSH1 0x4 PUSH2 0x30CE JUMP JUMPDEST PUSH2 0x2124 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0x32C4 JUMP JUMPDEST PUSH2 0x224C JUMP JUMPDEST PUSH2 0x19A PUSH2 0x348 CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x2485 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x39A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x404 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x46E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP5 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E9 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x541 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C742068617320696E737566666963656E7420737461626C6520636F69 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x591 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206465706F736974206D6F7265207468616E207A65726F0000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE2BBB15800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xE2BBB158 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x609 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x62D SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE PUSH32 0x7A3794CF7D311106018524DFD41878138E4264F1BEE18E53F1C180A1627FA2B8 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x463D31D7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8C7A63AE SWAP1 PUSH1 0x24 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E6 SWAP2 SWAP1 PUSH2 0x3219 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 MLOAD PUSH32 0xB5ADA6D800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP3 SWAP4 POP SWAP1 SWAP2 DUP5 AND SWAP1 PUSH4 0xB5ADA6D8 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x75B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77F SWAP2 SWAP1 PUSH2 0x31F7 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x823 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x82B PUSH2 0x2555 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x875 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x94D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C7420686173206E6F7420737461727420616363657074696E67206465 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x706F73697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x990 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9C8 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0xA20 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x557365722068617320696E73756666696369656E7420737461626C6520636F69 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA7D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAA1 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0xB15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220686173206E6F7420617070726F76656420746865207661756C7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x666F722073756666696369656E7420737461626C6520636F696E000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB20 DUP4 PUSH2 0x25F2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0xB98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520616D6F756E74206F6620616C6C6F79782062726F6E7A6520636F696E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20746F20676574206973206E6F74206C6172676572207468616E203000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xBB0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP7 PUSH2 0x269F JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC29 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC4D SWAP2 SWAP1 PUSH2 0x31F7 JUMP JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE CALLER PUSH1 0x20 DUP4 ADD MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0xA4F358C78F73B2049A06E0436C6728292334862A6FC2114F2DE13F9CFF58491F SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD25 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x82B PUSH1 0x0 PUSH2 0x273E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDC7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE48 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF5D JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2F745C59 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x42842E0E SWAP2 DUP7 SWAP1 DUP5 SWAP1 PUSH4 0x2F745C59 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEBF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEE3 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF46 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0xF55 SWAP1 PUSH2 0x354C JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE4D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xFFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x103D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1051 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1075 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST ISZERO PUSH2 0x10C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E6365206F6620737461626C6520636F696E206D7573742062652030 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1119 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x113D SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST ISZERO PUSH2 0x118A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E6365206F66204669647520636F696E206D75737420626520300000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1205 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST ISZERO PUSH2 0x1252 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E6365206F662047464920636F696E206D7573742062652030000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 SELFDESTRUCT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x12A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x12F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x82B PUSH2 0x278E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1346 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x13B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1431 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C742068617320616C726561647920737461727420616363657074696E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x67206465706F7369747300000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x143B PUSH2 0x2816 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 ADDRESS PUSH2 0x1473 PUSH2 0x145B PUSH2 0x2841 JUMP JUMPDEST PUSH2 0x146D PUSH2 0x1466 PUSH2 0x284F JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x285D JUMP JUMPDEST SWAP1 PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14F1 SWAP2 SWAP1 PUSH2 0x31F7 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xA8 SHL OR SWAP1 SSTORE POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1575 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x15DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C7420686173206E6F7420737461727420616363657074696E67206465 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x706F73697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0x163A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420476F6C6466696E636820506F6F6C20546F6B656E0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x1644 DUP4 DUP4 PUSH2 0x667 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x1695 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420612076616C696420706F6F6C00000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1704 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1728 SWAP2 SWAP1 PUSH2 0x30B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x177E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220646F6573206E6F74206F776E207468697320746F6B656E00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x81812FC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE ADDRESS SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x81812FC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1811 SWAP2 SWAP1 PUSH2 0x30B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x188D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220686173206E6F7420617070726F76656420746865207661756C7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x666F72207468697320746F6B656E000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1899 DUP5 DUP5 PUSH2 0x287C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x1911 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520616D6F756E74206F6620737461626C6520636F696E20746F20676574 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206973206E6F74206C6172676572207468616E20300000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1954 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1968 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x198C SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x1A00 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546865207661756C7420646F6573206E6F742068617665207375666669636965 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E7420737461626C6520636F696E000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x42842E0E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x42842E0E SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH2 0x1A97 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP CALLER DUP4 PUSH2 0x29F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0xC7E8B1BDBECDC8A549557EFB2A2AB715CFF51630CAEAD31610000019E61DFA4B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1B38 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1BA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C7420686173206E6F7420737461727420616363657074696E67206465 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x706F73697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C1B SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x1C73 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x557365722068617320696E73756666696369656E7420616C6C6F797820636F69 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CD0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CF4 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x1D68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220686173206E6F7420617070726F76656420746865207661756C7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x666F722073756666696369656E7420616C6C6F797820636F696E000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D73 DUP4 PUSH2 0x2A41 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x1DEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520616D6F756E74206F6620737461626C6520636F696E20746F20676574 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206973206E6F74206C6172676572207468616E20300000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E66 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x1EDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546865207661756C7420646F6573206E6F742068617665207375666669636965 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E7420737461626C6520636F696E000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x9DC29FAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9DC29FAC SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F53 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F77 SWAP2 SWAP1 PUSH2 0x31F7 JUMP JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1F8F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP4 PUSH2 0x29F8 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE CALLER PUSH1 0x20 DUP4 ADD MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x53FEE901A59B4D2E659E450F8DB17FC345E158FE408D2B39FAF66D1F8C4A54FE SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xCC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5 SWAP2 ADD PUSH2 0xCCC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2059 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH32 0xF2FDE38B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xF2FDE38B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x211D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x216C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x21BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2212 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2236 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 POP PUSH2 0xF5D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 DUP4 PUSH2 0x29F8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2294 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22EB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x230F SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x2367 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C742068617320696E737566666963656E7420737461626C6520636F69 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x23B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206465706F736974206D6F7265207468616E207A65726F0000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB6B55F2500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xB6B55F25 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2428 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x244C SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH32 0xD483110686F79D1F5932D32ADD1024998649DDCA927700B75BEA458B4CB7CDE6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x24CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2549 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x2552 DUP2 PUSH2 0x273E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x25A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2657 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x267B SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2687 PUSH2 0x2816 JUMP JUMPDEST SWAP1 POP PUSH2 0x2697 DUP2 PUSH2 0x146D DUP7 DUP6 PUSH2 0x285D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x2738 SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x2AE6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x27DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x25D5 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x283C PUSH2 0x2823 PUSH2 0x2BCB JUMP JUMPDEST PUSH2 0x2836 PUSH2 0x282E PUSH2 0x2D24 JUMP JUMPDEST PUSH2 0x2836 PUSH2 0x2DA0 JUMP JUMPDEST SWAP1 PUSH2 0x2ECD JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x283C PUSH1 0x6 PUSH1 0xA PUSH2 0x3442 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x283C PUSH1 0x12 PUSH1 0xA PUSH2 0x3442 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2869 DUP3 DUP5 PUSH2 0x34EA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2869 DUP3 DUP5 PUSH2 0x33DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x463D31D7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8C7A63AE SWAP1 PUSH1 0x24 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x28FB SWAP2 SWAP1 PUSH2 0x3219 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x2923 DUP4 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x2ECD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 MLOAD PUSH32 0x4D02FE6F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE SWAP2 SWAP3 POP SWAP1 DUP2 SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x4D02FE6F SWAP1 PUSH1 0x24 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2988 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x299C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x29C0 SWAP2 SWAP1 PUSH2 0x3321 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP7 DUP3 LT ISZERO PUSH2 0x29DA JUMPI PUSH2 0x29D8 DUP2 DUP4 PUSH2 0x2ECD JUMP JUMPDEST POP JUMPDEST PUSH2 0x29E8 DUP2 PUSH2 0x2836 DUP10 DUP10 PUSH2 0x2ED9 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xF5D SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD PUSH2 0x26EC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2ACA SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2AD6 PUSH2 0x2816 JUMP JUMPDEST SWAP1 POP PUSH2 0x2697 DUP3 PUSH2 0x146D DUP7 DUP5 PUSH2 0x285D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3B DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2EE5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xF5D JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2B59 SWAP2 SWAP1 PUSH2 0x31F7 JUMP JUMPDEST PUSH2 0xF5D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C2C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C50 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2D0A JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2F745C59 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x2CF6 SWAP2 PUSH2 0x2CEF SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 SWAP1 PUSH4 0x2F745C59 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CEA SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST PUSH2 0x287C JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x2ECD JUMP JUMPDEST SWAP3 POP DUP1 PUSH2 0x2D02 DUP2 PUSH2 0x354C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2C55 JUMP JUMPDEST POP PUSH2 0x2D1D PUSH2 0x2D16 PUSH2 0x2841 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x285D JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D7C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x283C SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x283C PUSH2 0x2EC8 PUSH2 0x2DB0 PUSH2 0x284F JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8726972900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH2 0x146D SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x87269729 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E23 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E47 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E9E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EC2 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 PUSH2 0x285D JUMP JUMPDEST PUSH2 0x2EF4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2869 DUP3 DUP5 PUSH2 0x33C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2869 DUP3 DUP5 PUSH2 0x3509 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2697 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2F13 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x785 PUSH2 0x2F0C PUSH2 0x2F04 PUSH2 0x2841 JUMP JUMPDEST PUSH2 0x146D PUSH2 0x284F JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2F8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x2FE2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2FFE SWAP2 SWAP1 PUSH2 0x3345 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x303B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3040 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3050 DUP3 DUP3 DUP7 PUSH2 0x305B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x306A JUMPI POP DUP2 PUSH2 0x2869 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x307A JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x3361 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2869 DUP2 PUSH2 0x3593 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2869 DUP2 PUSH2 0x3593 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x30EC DUP2 PUSH2 0x3593 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x30FC DUP2 PUSH2 0x3593 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x311D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3128 DUP2 PUSH2 0x3593 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 DUP2 ADD CALLDATALOAD PUSH2 0x3139 DUP2 PUSH2 0x3593 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x315D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3183 JUMPI PUSH2 0x3183 PUSH2 0x357D JUMP JUMPDEST PUSH2 0x3195 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP6 ADD PUSH2 0x3394 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP10 DUP5 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x31AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 ADD DUP6 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP5 DUP3 DUP5 ADD ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x31DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x31E9 DUP2 PUSH2 0x3593 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2869 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x322B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x324E JUMPI PUSH2 0x324E PUSH2 0x357D JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD PUSH2 0x325C DUP2 PUSH2 0x3593 JUMP JUMPDEST DUP1 DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x30FC DUP2 PUSH2 0x3593 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x32FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3310 DUP2 PUSH2 0x3593 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3357 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3520 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3380 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3520 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x33BD JUMPI PUSH2 0x33BD PUSH2 0x357D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x33D8 JUMPI PUSH2 0x33D8 PUSH2 0x3567 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x33FA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x343A JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x3420 JUMPI PUSH2 0x3420 PUSH2 0x3567 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x342D JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x3404 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2869 DUP4 DUP4 PUSH1 0x0 DUP3 PUSH2 0x3458 JUMPI POP PUSH1 0x1 PUSH2 0x785 JUMP JUMPDEST DUP2 PUSH2 0x3465 JUMPI POP PUSH1 0x0 PUSH2 0x785 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x347B JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x3485 JUMPI PUSH2 0x34A1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x785 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x3496 JUMPI PUSH2 0x3496 PUSH2 0x3567 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x785 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x34C4 JUMPI POP DUP2 DUP2 EXP PUSH2 0x785 JUMP JUMPDEST PUSH2 0x34CE DUP4 DUP4 PUSH2 0x33FF JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x34E2 JUMPI PUSH2 0x34E2 PUSH2 0x3567 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3504 JUMPI PUSH2 0x3504 PUSH2 0x3567 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x351B JUMPI PUSH2 0x351B PUSH2 0x3567 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x353B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3523 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2738 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3560 JUMPI PUSH2 0x3560 PUSH2 0x3567 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2552 JUMPI PUSH1 0x0 DUP1 REVERT INVALID 0x4F PUSH24 0x6E61626C653A2063616C6C6572206973206E6F7420746865 KECCAK256 PUSH16 0x776E6572A2646970667358221220EC01 PUSH26 0x16FCB44D798D2A7A37A6B034C4A9B781FBFAF18E51E862E787EF PUSH23 0xFC1764736F6C6343000807003300000000000000000000 ",
          "sourceMap": "1072:12915:37:-:0;;;1971:698;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;921:32:11;719:10:25;921:18:11;:32::i;:::-;991:5:12;981:15;;2252:17:37;:59;;-1:-1:-1;;;;;;2252:59:37;;;-1:-1:-1;;;;;2252:59:37;;;;;;;2321:16;:58;;;;;;;;;;;;;;-1:-1:-1;2389:35:37;;;;;;;;;;;;;;2434:7;:33;;;;;;;;;;;;;;-1:-1:-1;2477:35:37;;;;;;;;;;;;;;-1:-1:-1;2522:56:37;;;;;;;;;;;;;2588:10;:44;;;;;;;;;;;;;-1:-1:-1;;;;2642:20:37;;;1072:12915;;2270:187:11;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:11;;;-1:-1:-1;;;;;;2378:17:11;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;14:177:46:-;93:13;;-1:-1:-1;;;;;135:31:46;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:722::-;320:6;328;336;344;352;360;368;421:3;409:9;400:7;396:23;392:33;389:53;;;438:1;435;428:12;389:53;461:40;491:9;461:40;:::i;:::-;451:50;;520:49;565:2;554:9;550:18;520:49;:::i;:::-;510:59;;588:49;633:2;622:9;618:18;588:49;:::i;:::-;578:59;;656:49;701:2;690:9;686:18;656:49;:::i;:::-;646:59;;724:50;769:3;758:9;754:19;724:50;:::i;:::-;714:60;;793:50;838:3;827:9;823:19;793:50;:::i;:::-;783:60;;862:50;907:3;896:9;892:19;862:50;:::i;:::-;852:60;;196:722;;;;;;;;;;:::o;:::-;1072:12915:37;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@USDCtoAlloyxBronze_7273": {
              "entryPoint": 9714,
              "id": 7273,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_callOptionalReturn_3286": {
              "entryPoint": 10982,
              "id": 3286,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_5017": {
              "entryPoint": null,
              "id": 5017,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_pause_2355": {
              "entryPoint": 10126,
              "id": 2355,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_transferOwnership_2279": {
              "entryPoint": 10046,
              "id": 2279,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_unpause_2371": {
              "entryPoint": 9557,
              "id": 2371,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@add_5530": {
              "entryPoint": 11981,
              "id": 5530,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@alloyMantissa_7323": {
              "entryPoint": 10319,
              "id": 7323,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@alloyxBronzeToUSDC_7245": {
              "entryPoint": 10817,
              "id": 7245,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@changeAlloyxBronzeAddress_7353": {
              "entryPoint": 845,
              "id": 7353,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@changeAlloyxSilverAddress_7367": {
              "entryPoint": 956,
              "id": 7367,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@changePoolTokenAddress_7395": {
              "entryPoint": 2093,
              "id": 7395,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@changeSeniorPoolAddress_7381": {
              "entryPoint": 4862,
              "id": 7381,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@depositAlloyxBronzeTokens_7575": {
              "entryPoint": 6890,
              "id": 7575,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@depositNFTToken_7785": {
              "entryPoint": 5415,
              "id": 7785,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@depositUSDCCoin_7665": {
              "entryPoint": 2199,
              "id": 7665,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@destroy_7847": {
              "entryPoint": 3938,
              "id": 7847,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@div_5575": {
              "entryPoint": 10352,
              "id": 5575,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@fiduMantissa_7307": {
              "entryPoint": null,
              "id": 7307,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@fiduToUSDC_7291": {
              "entryPoint": 12020,
              "id": 7291,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@functionCallWithValue_4869": {
              "entryPoint": 12051,
              "id": 4869,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@functionCall_4799": {
              "entryPoint": 12005,
              "id": 4799,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@getAlloyxBronzeTokenBalanceInUSDC_7102": {
              "entryPoint": 10262,
              "id": 7102,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getFiduBalanceInUSDC_7128": {
              "entryPoint": 11680,
              "id": 7128,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getGoldFinchPoolTokenBalanceInUSDC_7217": {
              "entryPoint": 11211,
              "id": 7217,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getJuniorTokenValue_7971": {
              "entryPoint": 10364,
              "id": 7971,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getUSDCBalance_7143": {
              "entryPoint": 11556,
              "id": 7143,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@isContract_4728": {
              "entryPoint": null,
              "id": 4728,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isValidPool_7885": {
              "entryPoint": 1639,
              "id": 7885,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@migrateERC20_8150": {
              "entryPoint": 8484,
              "id": 8150,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@migrateGoldfinchPoolTokens_8118": {
              "entryPoint": 3375,
              "id": 8118,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@mul_5560": {
              "entryPoint": 10333,
              "id": 5560,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@onERC721Received_4709": {
              "entryPoint": null,
              "id": 4709,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@owner_2208": {
              "entryPoint": null,
              "id": 2208,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@pause_7425": {
              "entryPoint": 4705,
              "id": 7425,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@paused_2316": {
              "entryPoint": null,
              "id": 2316,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@purchaseJuniorToken_8021": {
              "entryPoint": 1062,
              "id": 8021,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@purchaseSeniorTokens_8068": {
              "entryPoint": 8780,
              "id": 8068,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@renounceOwnership_2236": {
              "entryPoint": 3293,
              "id": 2236,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@safeTransferFrom_3120": {
              "entryPoint": 9887,
              "id": 3120,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@safeTransfer_3094": {
              "entryPoint": 10744,
              "id": 3094,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@startVaultOperation_7476": {
              "entryPoint": 4968,
              "id": 7476,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@sub_5545": {
              "entryPoint": 11993,
              "id": 5545,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@transferAlloyxOwnership_8166": {
              "entryPoint": 8209,
              "id": 8166,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@transferOwnership_2259": {
              "entryPoint": 9349,
              "id": 2259,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@unpause_7436": {
              "entryPoint": 1931,
              "id": 7436,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@usdcMantissa_7339": {
              "entryPoint": 10305,
              "id": 7339,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@verifyCallResult_5004": {
              "entryPoint": 12379,
              "id": 5004,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 12436,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 12465,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_payable": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address_payable": {
              "entryPoint": 12494,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
              "entryPoint": 12551,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 12747,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 12791,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_struct$_TokenInfo_$8310_memory_ptr_fromMemory": {
              "entryPoint": 12825,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 12946,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 12971,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_address": {
              "entryPoint": 12996,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_addresst_uint256": {
              "entryPoint": 13033,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_uint256t_uint256_fromMemory": {
              "entryPoint": 13089,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 13125,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_payable_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 13153,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0a690ed0a05025b55678f73399dcb5f9ab73b9c2a59533d3fe359d09bb52754f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0db97168c6b68d33c72cd2f11fd5607c2962829a8420d56cf3f04fe433820f2f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_18940d812f14811126059b93185975b3a51076d01df3e843e4ed1ca5cc966ac2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2eacd7aa75d7ff1e51ba47431b9f92d51085818b87b41cf3b65e865af0e70d67__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_30a0498bcfd70002e5159989860b9655841ad033419b4ac45713eed24a0daf6e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_690d29e3faa62cdeb1c53143670ac6e3d5396805d8be448e33206a8660b4705f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_74d23082a86ca02b47e16795727cbea162470cddbf2c0e3b3e24c876f918b3d5__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_80e35ec8f1176efcd2df282453d9de0fde96290b91a0ac4e2e8a3c144cb5e1f0__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8ad79d838e5af7e391a6db369795b32978a7336f7c2d84610e0de9ebdb3ce20e__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8d33f711b7435d75c8d13eba19978c4231cf86ca47b338ed5efb8add5a9e6195__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a338f366ccfd1d90ec553c6bc1a647f4b387acfd7e4256c604bbec6102e2daee__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b715d90db895266942272da173be521f759dbcc94211d118665a6773dd5bb897__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cec611b21abceff0c2d2bb8ea620185849561d55211832f1c16a478e45cb1cd6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e6c82086522714658f09f064738a3240a2fed0b620a746c615e152c3ecb6efa9__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e845e96df379c65ae5e6d3855b36a4abe206ca1c1da6abfbf8cf6c88a936f5c1__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_f74c33f9d9b4c74c8bf0bdeed37f4ff65ed95c2b766e5bf8bc3105d90a44646f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_fe6c2762d200329a241f8fda745165dcfb8e94c1e299126e68e03fcc7611e5f9__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_ffd7b40f737e185748e73c27db83bc35cea252c9ff1b32838a89ea0c4d6fff07__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 13204,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 13253,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 13277,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_helper": {
              "entryPoint": 13311,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "checked_exp_t_uint256_t_uint256": {
              "entryPoint": 13378,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_unsigned": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 13546,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 13577,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 13600,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "increment_t_uint256": {
              "entryPoint": 13644,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 13671,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 13693,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 13715,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:21204:46",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:46",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "84:177:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "130:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "139:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "142:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "132:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "132:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "132:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "105:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "114:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "101:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "101:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "126:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "97:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "97:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "94:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "155:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "181:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "168:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "168:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "159:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "225:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "200:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "200:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "200:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "240:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "250:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "240:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "50:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "61:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "73:6:46",
                        "type": ""
                      }
                    ],
                    "src": "14:247:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "347:170:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "393:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "402:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "405:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "395:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "395:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "395:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "368:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "377:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "364:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "364:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "389:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "360:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "360:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "357:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "418:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "437:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "431:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "431:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "422:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "481:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "456:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "456:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "456:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "496:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "506:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "496:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "313:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "324:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "336:6:46",
                        "type": ""
                      }
                    ],
                    "src": "266:251:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "600:177:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "646:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "655:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "658:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "648:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "648:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "648:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "621:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "630:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "617:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "617:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "642:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "613:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "613:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "610:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "671:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "697:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "684:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "684:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "675:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "741:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "716:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "716:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "716:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "756:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "766:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "756:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_payable",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "566:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "577:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "589:6:46",
                        "type": ""
                      }
                    ],
                    "src": "522:255:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "877:301:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "923:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "932:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "935:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "925:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "925:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "925:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "898:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "907:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "894:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "894:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "919:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "890:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "890:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "887:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "948:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "974:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "961:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "961:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "952:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1018:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "993:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "993:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "993:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1033:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1043:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1033:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1057:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1089:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1100:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1085:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1085:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1072:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1072:32:46"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "1061:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "1138:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1113:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1113:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1113:33:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1155:17:46",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "1165:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1155:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address_payable",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "835:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "846:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "858:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "866:6:46",
                        "type": ""
                      }
                    ],
                    "src": "782:396:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1313:978:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1360:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1369:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1372:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1362:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1362:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1362:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1334:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1343:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1330:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1330:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1355:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1326:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1326:33:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1323:53:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1385:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1411:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1398:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1398:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1389:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1455:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1430:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1430:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1430:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1470:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1480:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1470:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1494:12:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1504:2:46",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1498:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1515:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1547:9:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1558:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1543:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1543:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1530:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1530:32:46"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "1519:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "1596:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1571:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1571:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1571:33:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1613:17:46",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "1623:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1613:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1639:42:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1666:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1677:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1662:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1662:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1649:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1649:32:46"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1639:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1690:46:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1721:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1732:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1717:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1717:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1704:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1704:32:46"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1694:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1745:28:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1755:18:46",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1749:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1800:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1809:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1812:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1802:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1802:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1802:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1788:6:46"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1796:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1785:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1785:14:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1782:34:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1825:32:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1839:9:46"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1850:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1835:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1835:22:46"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "1829:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1905:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1914:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1917:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1907:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1907:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1907:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "1884:2:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1888:4:46",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1880:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1880:13:46"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1895:7:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1876:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1876:27:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1869:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1869:35:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1866:55:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1930:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1953:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1940:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1940:16:46"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "1934:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1979:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1981:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1981:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1981:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "1971:2:46"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1975:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1968:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1968:10:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1965:36:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2010:66:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "2051:2:46"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2055:4:46",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2047:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2047:13:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2066:2:46",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "2062:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2062:7:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2043:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2043:27:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2072:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2039:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2039:36:46"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2023:15:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2023:53:46"
                          },
                          "variables": [
                            {
                              "name": "array",
                              "nodeType": "YulTypedName",
                              "src": "2014:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "2092:5:46"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "2099:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2085:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2085:17:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2085:17:46"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2148:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2157:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2160:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2150:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2150:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2150:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "2125:2:46"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "2129:2:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2121:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2121:11:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2134:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2117:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2117:20:46"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2139:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2114:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2114:33:46"
                          },
                          "nodeType": "YulIf",
                          "src": "2111:53:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "2190:5:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2197:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2186:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2186:14:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "2206:2:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2210:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2202:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2202:11:46"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "2215:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "2173:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2173:45:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2173:45:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array",
                                        "nodeType": "YulIdentifier",
                                        "src": "2242:5:46"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "2249:2:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2238:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2238:14:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2254:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2234:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2234:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2259:1:46",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2227:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2227:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2227:34:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2270:15:46",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "2280:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2270:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1255:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1266:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1278:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1286:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1294:6:46",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "1302:6:46",
                        "type": ""
                      }
                    ],
                    "src": "1183:1108:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2383:228:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2429:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2438:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2441:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2431:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2431:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2431:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2404:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2413:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2400:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2400:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2425:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2396:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2396:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "2393:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2454:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2480:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2467:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2467:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2458:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2524:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2499:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2499:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2499:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2539:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2549:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2539:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2563:42:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2590:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2601:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2586:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2586:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2573:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2573:32:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2563:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2341:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2352:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2364:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2372:6:46",
                        "type": ""
                      }
                    ],
                    "src": "2296:315:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2694:199:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2740:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2749:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2752:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2742:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2742:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2742:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2715:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2724:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2711:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2711:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2736:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2707:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2707:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "2704:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2765:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2784:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2778:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2778:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2769:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2847:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2856:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2859:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2849:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2849:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2849:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2816:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2837:5:46"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2830:6:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2830:13:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2823:6:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2823:21:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2813:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2813:32:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2806:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2806:40:46"
                          },
                          "nodeType": "YulIf",
                          "src": "2803:60:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2872:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2882:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2872:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2660:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2671:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2683:6:46",
                        "type": ""
                      }
                    ],
                    "src": "2616:277:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3006:643:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3053:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3062:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3065:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3055:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3055:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3055:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3027:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3036:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3023:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3023:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3048:3:46",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3019:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3019:33:46"
                          },
                          "nodeType": "YulIf",
                          "src": "3016:53:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3078:23:46",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3098:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3092:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3092:9:46"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "3082:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3110:34:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "3132:6:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3140:3:46",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3128:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3128:16:46"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "3114:10:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3219:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "3221:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3221:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3221:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3162:10:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3174:18:46",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3159:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3159:34:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3198:10:46"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3210:6:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3195:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3195:22:46"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "3156:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3156:62:46"
                          },
                          "nodeType": "YulIf",
                          "src": "3153:88:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3257:2:46",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "3261:10:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3250:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3250:22:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3250:22:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3281:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3300:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3294:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3294:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3285:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3344:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3319:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3319:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3319:31:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "3366:6:46"
                              },
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3374:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3359:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3359:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3359:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3400:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3408:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3396:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3396:15:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3423:9:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3434:2:46",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3419:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3419:18:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3413:5:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3413:25:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3389:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3389:50:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3389:50:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3459:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3467:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3455:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3455:15:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3482:9:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3493:2:46",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3478:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3478:18:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3472:5:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3472:25:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3448:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3448:50:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3448:50:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3518:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3526:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3514:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3514:15:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3541:9:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3552:2:46",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3537:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3537:18:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3531:5:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3531:25:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3507:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3507:50:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3507:50:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3577:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3585:3:46",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3573:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3573:16:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3601:9:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3612:3:46",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3597:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3597:19:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3591:5:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3591:26:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3566:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3566:52:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3566:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3627:16:46",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "3637:6:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3627:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_TokenInfo_$8310_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2972:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2983:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2995:6:46",
                        "type": ""
                      }
                    ],
                    "src": "2898:751:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3724:110:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3770:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3779:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3782:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3772:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3772:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3772:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3745:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3754:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3741:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3741:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3766:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3737:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3737:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "3734:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3795:33:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3818:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3805:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3805:23:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3795:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3690:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3701:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3713:6:46",
                        "type": ""
                      }
                    ],
                    "src": "3654:180:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3920:103:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3966:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3975:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3978:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3968:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3968:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3968:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3941:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3950:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3937:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3937:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3962:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3933:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3933:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "3930:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3991:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4007:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4001:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4001:16:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3991:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3886:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3897:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3909:6:46",
                        "type": ""
                      }
                    ],
                    "src": "3839:184:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4115:228:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4161:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4170:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4173:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4163:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4163:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4163:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4136:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4145:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4132:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4132:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4157:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4128:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4128:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "4125:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4186:33:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4209:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4196:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4196:23:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4186:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4228:45:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4258:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4269:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4254:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4254:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4241:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4241:32:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4232:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4307:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "4282:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4282:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4282:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4322:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4332:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4322:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4073:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4084:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4096:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4104:6:46",
                        "type": ""
                      }
                    ],
                    "src": "4028:315:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4452:279:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4498:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4507:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4510:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4500:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4500:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4500:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4473:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4482:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4469:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4469:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4494:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4465:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4465:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "4462:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4523:33:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4546:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4533:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4533:23:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4523:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4565:45:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4595:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4606:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4591:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4591:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4578:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4578:32:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4569:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4644:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "4619:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4619:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4619:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4659:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4669:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4659:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4683:42:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4710:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4721:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4706:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4706:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4693:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4693:32:46"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "4683:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4402:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4413:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4425:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4433:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4441:6:46",
                        "type": ""
                      }
                    ],
                    "src": "4348:383:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4834:147:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4880:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4889:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4892:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4882:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4882:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4882:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4855:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4864:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4851:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4851:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4876:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4847:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4847:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "4844:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4905:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4921:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4915:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4915:16:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4905:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4940:35:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4960:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4971:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4956:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4956:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4950:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4950:25:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4940:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4792:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4803:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4815:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4823:6:46",
                        "type": ""
                      }
                    ],
                    "src": "4736:245:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5123:137:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5133:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5153:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5147:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5147:13:46"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "5137:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5195:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5203:4:46",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5191:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5191:17:46"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5210:3:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5215:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "5169:21:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5169:53:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5169:53:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5231:23:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5242:3:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5247:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5238:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5238:16:46"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "5231:3:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5099:3:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5104:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5115:3:46",
                        "type": ""
                      }
                    ],
                    "src": "4986:274:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5366:125:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5376:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5388:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5399:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5384:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5384:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5376:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5418:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5433:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5441:42:46",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5429:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5429:55:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5411:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5411:74:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5411:74:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5335:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5346:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5357:4:46",
                        "type": ""
                      }
                    ],
                    "src": "5265:226:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5625:198:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5635:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5647:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5658:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5643:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5643:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5635:4:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5670:52:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5680:42:46",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5674:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5738:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5753:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5761:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5749:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5749:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5731:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5731:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5731:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5785:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5796:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5781:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5781:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5805:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5813:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5801:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5801:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5774:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5774:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5774:43:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5586:9:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5597:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5605:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5616:4:46",
                        "type": ""
                      }
                    ],
                    "src": "5496:327:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5993:241:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6003:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6015:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6026:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6011:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6011:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6003:4:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6038:52:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6048:42:46",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6042:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6106:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6121:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6129:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6117:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6117:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6099:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6099:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6099:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6153:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6164:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6149:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6149:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6173:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6181:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6169:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6169:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6142:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6142:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6142:43:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6205:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6216:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6201:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6201:18:46"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "6221:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6194:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6194:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6194:34:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_payable_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5946:9:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5957:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5965:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5973:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5984:4:46",
                        "type": ""
                      }
                    ],
                    "src": "5828:406:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6396:241:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6406:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6418:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6429:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6414:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6414:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6406:4:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6441:52:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6451:42:46",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6445:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6509:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6524:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6532:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6520:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6520:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6502:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6502:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6502:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6556:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6567:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6552:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6552:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6576:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6584:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6572:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6572:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6545:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6545:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6545:43:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6608:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6619:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6604:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6604:18:46"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "6624:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6597:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6597:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6597:34:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6349:9:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "6360:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6368:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6376:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6387:4:46",
                        "type": ""
                      }
                    ],
                    "src": "6239:398:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6771:168:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6781:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6793:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6804:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6789:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6789:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6781:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6823:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6838:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6846:42:46",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6834:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6834:55:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6816:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6816:74:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6816:74:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6910:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6921:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6906:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6906:18:46"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6926:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6899:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6899:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6899:34:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6732:9:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6743:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6751:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6762:4:46",
                        "type": ""
                      }
                    ],
                    "src": "6642:297:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7039:92:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7049:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7061:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7072:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7057:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7057:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7049:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7091:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7116:6:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "7109:6:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7109:14:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "7102:6:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7102:22:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7084:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7084:41:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7084:41:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7008:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7019:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7030:4:46",
                        "type": ""
                      }
                    ],
                    "src": "6944:187:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7235:149:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7245:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7257:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7268:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7253:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7253:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7245:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7287:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7302:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7310:66:46",
                                    "type": "",
                                    "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7298:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7298:79:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7280:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7280:98:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7280:98:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7204:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7215:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7226:4:46",
                        "type": ""
                      }
                    ],
                    "src": "7136:248:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7510:262:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7527:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7538:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7520:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7520:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7520:21:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7550:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7570:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7564:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7564:13:46"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "7554:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7597:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7608:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7593:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7593:18:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7613:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7586:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7586:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7586:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7655:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7663:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7651:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7651:15:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7672:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7683:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7668:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7668:18:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7688:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "7629:21:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7629:66:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7629:66:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7704:62:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7720:9:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "7739:6:46"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7747:2:46",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "7735:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7735:15:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7756:2:46",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "7752:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7752:7:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7731:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7731:29:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7716:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7716:45:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7763:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7712:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7712:54:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7704:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7479:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7490:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7501:4:46",
                        "type": ""
                      }
                    ],
                    "src": "7389:383:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7951:236:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7968:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7979:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7961:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7961:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7961:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8002:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8013:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7998:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7998:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8018:2:46",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7991:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7991:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7991:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8041:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8052:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8037:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8037:18:46"
                              },
                              {
                                "hexValue": "5573657220686173206e6f7420617070726f76656420746865207661756c7420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8057:34:46",
                                "type": "",
                                "value": "User has not approved the vault "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8030:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8030:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8030:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8112:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8123:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8108:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8108:18:46"
                              },
                              {
                                "hexValue": "666f72207468697320746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8128:16:46",
                                "type": "",
                                "value": "for this token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8101:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8101:44:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8101:44:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8154:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8166:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8177:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8162:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8162:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8154:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0a690ed0a05025b55678f73399dcb5f9ab73b9c2a59533d3fe359d09bb52754f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7928:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7942:4:46",
                        "type": ""
                      }
                    ],
                    "src": "7777:410:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8366:170:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8383:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8394:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8376:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8376:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8376:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8417:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8428:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8413:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8413:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8433:2:46",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8406:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8406:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8406:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8456:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8467:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8452:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8452:18:46"
                              },
                              {
                                "hexValue": "5061757361626c653a206e6f7420706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8472:22:46",
                                "type": "",
                                "value": "Pausable: not paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8445:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8445:50:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8445:50:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8504:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8516:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8527:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8512:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8512:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8504:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8343:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8357:4:46",
                        "type": ""
                      }
                    ],
                    "src": "8192:344:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8715:223:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8732:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8743:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8725:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8725:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8725:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8766:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8777:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8762:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8762:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8782:2:46",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8755:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8755:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8755:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8805:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8816:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8801:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8801:18:46"
                              },
                              {
                                "hexValue": "5661756c742068617320696e737566666963656e7420737461626c6520636f69",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8821:34:46",
                                "type": "",
                                "value": "Vault has insufficent stable coi"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8794:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8794:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8794:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8876:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8887:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8872:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8872:18:46"
                              },
                              {
                                "hexValue": "6e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8892:3:46",
                                "type": "",
                                "value": "n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8865:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8865:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8865:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8905:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8917:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8928:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8913:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8913:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8905:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0db97168c6b68d33c72cd2f11fd5607c2962829a8420d56cf3f04fe433820f2f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8692:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8706:4:46",
                        "type": ""
                      }
                    ],
                    "src": "8541:397:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9117:248:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9134:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9145:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9127:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9127:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9127:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9168:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9179:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9164:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9164:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9184:2:46",
                                "type": "",
                                "value": "58"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9157:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9157:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9157:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9207:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9218:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9203:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9203:18:46"
                              },
                              {
                                "hexValue": "5573657220686173206e6f7420617070726f76656420746865207661756c7420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9223:34:46",
                                "type": "",
                                "value": "User has not approved the vault "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9196:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9196:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9196:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9278:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9289:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9274:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9274:18:46"
                              },
                              {
                                "hexValue": "666f722073756666696369656e7420616c6c6f797820636f696e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9294:28:46",
                                "type": "",
                                "value": "for sufficient alloyx coin"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9267:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9267:56:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9267:56:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9332:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9344:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9355:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9340:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9340:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9332:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_18940d812f14811126059b93185975b3a51076d01df3e843e4ed1ca5cc966ac2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9094:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9108:4:46",
                        "type": ""
                      }
                    ],
                    "src": "8943:422:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9544:228:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9561:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9572:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9554:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9554:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9554:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9595:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9606:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9591:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9591:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9611:2:46",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9584:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9584:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9584:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9634:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9645:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9630:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9630:18:46"
                              },
                              {
                                "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9650:34:46",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9623:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9623:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9623:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9705:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9716:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9701:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9701:18:46"
                              },
                              {
                                "hexValue": "646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "9721:8:46",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9694:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9694:36:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9694:36:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9739:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9751:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9762:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9747:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9747:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9739:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9521:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9535:4:46",
                        "type": ""
                      }
                    ],
                    "src": "9370:402:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9951:232:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9968:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9979:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9961:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9961:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9961:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10002:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10013:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9998:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9998:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10018:2:46",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9991:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9991:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9991:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10041:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10052:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10037:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10037:18:46"
                              },
                              {
                                "hexValue": "5661756c742068617320616c726561647920737461727420616363657074696e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10057:34:46",
                                "type": "",
                                "value": "Vault has already start acceptin"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10030:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10030:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10030:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10112:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10123:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10108:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10108:18:46"
                              },
                              {
                                "hexValue": "67206465706f73697473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10128:12:46",
                                "type": "",
                                "value": "g deposits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10101:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10101:40:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10101:40:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10150:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10162:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10173:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10158:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10158:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10150:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2eacd7aa75d7ff1e51ba47431b9f92d51085818b87b41cf3b65e865af0e70d67__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9928:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9942:4:46",
                        "type": ""
                      }
                    ],
                    "src": "9777:406:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10362:166:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10379:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10390:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10372:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10372:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10372:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10413:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10424:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10409:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10409:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10429:2:46",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10402:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10402:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10402:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10452:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10463:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10448:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10448:18:46"
                              },
                              {
                                "hexValue": "4e6f7420612076616c696420706f6f6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10468:18:46",
                                "type": "",
                                "value": "Not a valid pool"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10441:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10441:46:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10441:46:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10496:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10508:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10519:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10504:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10504:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10496:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_30a0498bcfd70002e5159989860b9655841ad033419b4ac45713eed24a0daf6e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10339:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10353:4:46",
                        "type": ""
                      }
                    ],
                    "src": "10188:340:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10707:228:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10724:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10735:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10717:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10717:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10717:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10758:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10769:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10754:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10754:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10774:2:46",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10747:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10747:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10747:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10797:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10808:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10793:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10793:18:46"
                              },
                              {
                                "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10813:34:46",
                                "type": "",
                                "value": "Address: insufficient balance fo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10786:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10786:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10786:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10868:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10879:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10864:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10864:18:46"
                              },
                              {
                                "hexValue": "722063616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10884:8:46",
                                "type": "",
                                "value": "r call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10857:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10857:36:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10857:36:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10902:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10914:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10925:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10910:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10910:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10902:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10684:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10698:4:46",
                        "type": ""
                      }
                    ],
                    "src": "10533:402:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11114:166:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11131:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11142:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11124:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11124:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11124:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11165:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11176:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11161:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11161:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11181:2:46",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11154:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11154:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11154:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11204:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11215:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11200:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11200:18:46"
                              },
                              {
                                "hexValue": "5061757361626c653a20706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11220:18:46",
                                "type": "",
                                "value": "Pausable: paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11193:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11193:46:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11193:46:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11248:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11260:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11271:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11256:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11256:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11248:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11091:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11105:4:46",
                        "type": ""
                      }
                    ],
                    "src": "10940:340:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11459:250:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11476:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11487:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11469:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11469:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11469:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11510:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11521:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11506:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11506:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11526:2:46",
                                "type": "",
                                "value": "60"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11499:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11499:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11499:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11549:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11560:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11545:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11545:18:46"
                              },
                              {
                                "hexValue": "54686520616d6f756e74206f6620616c6c6f79782062726f6e7a6520636f696e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11565:34:46",
                                "type": "",
                                "value": "The amount of alloyx bronze coin"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11538:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11538:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11538:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11620:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11631:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11616:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11616:18:46"
                              },
                              {
                                "hexValue": "20746f20676574206973206e6f74206c6172676572207468616e2030",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11636:30:46",
                                "type": "",
                                "value": " to get is not larger than 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11609:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11609:58:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11609:58:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11676:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11688:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11699:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11684:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11684:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11676:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_690d29e3faa62cdeb1c53143670ac6e3d5396805d8be448e33206a8660b4705f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11436:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11450:4:46",
                        "type": ""
                      }
                    ],
                    "src": "11285:424:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11888:236:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11905:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11916:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11898:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11898:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11898:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11939:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11950:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11935:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11935:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11955:2:46",
                                "type": "",
                                "value": "46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11928:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11928:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11928:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11978:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11989:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11974:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11974:18:46"
                              },
                              {
                                "hexValue": "546865207661756c7420646f6573206e6f742068617665207375666669636965",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11994:34:46",
                                "type": "",
                                "value": "The vault does not have sufficie"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11967:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11967:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11967:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12049:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12060:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12045:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12045:18:46"
                              },
                              {
                                "hexValue": "6e7420737461626c6520636f696e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12065:16:46",
                                "type": "",
                                "value": "nt stable coin"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12038:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12038:44:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12038:44:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12091:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12103:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12114:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12099:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12099:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12091:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_74d23082a86ca02b47e16795727cbea162470cddbf2c0e3b3e24c876f918b3d5__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11865:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11879:4:46",
                        "type": ""
                      }
                    ],
                    "src": "11714:410:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12303:248:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12320:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12331:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12313:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12313:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12313:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12354:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12365:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12350:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12350:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12370:2:46",
                                "type": "",
                                "value": "58"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12343:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12343:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12343:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12393:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12404:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12389:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12389:18:46"
                              },
                              {
                                "hexValue": "5573657220686173206e6f7420617070726f76656420746865207661756c7420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12409:34:46",
                                "type": "",
                                "value": "User has not approved the vault "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12382:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12382:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12382:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12464:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12475:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12460:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12460:18:46"
                              },
                              {
                                "hexValue": "666f722073756666696369656e7420737461626c6520636f696e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12480:28:46",
                                "type": "",
                                "value": "for sufficient stable coin"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12453:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12453:56:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12453:56:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12518:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12530:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12541:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12526:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12526:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12518:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_80e35ec8f1176efcd2df282453d9de0fde96290b91a0ac4e2e8a3c144cb5e1f0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12280:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12294:4:46",
                        "type": ""
                      }
                    ],
                    "src": "12129:422:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12730:223:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12747:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12758:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12740:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12740:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12740:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12781:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12792:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12777:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12777:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12797:2:46",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12770:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12770:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12770:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12820:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12831:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12816:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12816:18:46"
                              },
                              {
                                "hexValue": "557365722068617320696e73756666696369656e7420737461626c6520636f69",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12836:34:46",
                                "type": "",
                                "value": "User has insufficient stable coi"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12809:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12809:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12809:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12891:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12902:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12887:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12887:18:46"
                              },
                              {
                                "hexValue": "6e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12907:3:46",
                                "type": "",
                                "value": "n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12880:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12880:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12880:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12920:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12932:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12943:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12928:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12928:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12920:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8ad79d838e5af7e391a6db369795b32978a7336f7c2d84610e0de9ebdb3ce20e__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12707:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12721:4:46",
                        "type": ""
                      }
                    ],
                    "src": "12556:397:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13132:179:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13149:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13160:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13142:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13142:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13142:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13183:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13194:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13179:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13179:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13199:2:46",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13172:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13172:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13172:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13222:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13233:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13218:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13218:18:46"
                              },
                              {
                                "hexValue": "42616c616e6365206f662047464920636f696e206d7573742062652030",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13238:31:46",
                                "type": "",
                                "value": "Balance of GFI coin must be 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13211:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13211:59:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13211:59:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13279:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13291:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13302:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13287:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13287:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13279:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8d33f711b7435d75c8d13eba19978c4231cf86ca47b338ed5efb8add5a9e6195__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13109:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13123:4:46",
                        "type": ""
                      }
                    ],
                    "src": "12958:353:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13490:182:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13507:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13518:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13500:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13500:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13500:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13541:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13552:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13537:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13537:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13557:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13530:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13530:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13530:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13580:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13591:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13576:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13576:18:46"
                              },
                              {
                                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13596:34:46",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13569:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13569:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13569:62:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13640:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13652:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13663:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13648:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13648:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13640:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13467:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13481:4:46",
                        "type": ""
                      }
                    ],
                    "src": "13316:356:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13851:182:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13868:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13879:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13861:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13861:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13861:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13902:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13913:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13898:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13898:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13918:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13891:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13891:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13891:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13941:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13952:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13937:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13937:18:46"
                              },
                              {
                                "hexValue": "42616c616e6365206f6620737461626c6520636f696e206d7573742062652030",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13957:34:46",
                                "type": "",
                                "value": "Balance of stable coin must be 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13930:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13930:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13930:62:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14001:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14013:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14024:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14009:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14009:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14001:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a338f366ccfd1d90ec553c6bc1a647f4b387acfd7e4256c604bbec6102e2daee__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13828:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13842:4:46",
                        "type": ""
                      }
                    ],
                    "src": "13677:356:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14212:178:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14229:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14240:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14222:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14222:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14222:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14263:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14274:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14259:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14259:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14279:2:46",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14252:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14252:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14252:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14302:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14313:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14298:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14298:18:46"
                              },
                              {
                                "hexValue": "5573657220646f6573206e6f74206f776e207468697320746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14318:30:46",
                                "type": "",
                                "value": "User does not own this token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14291:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14291:58:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14291:58:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14358:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14370:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14381:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14366:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14366:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14358:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b715d90db895266942272da173be521f759dbcc94211d118665a6773dd5bb897__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14189:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14203:4:46",
                        "type": ""
                      }
                    ],
                    "src": "14038:352:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14569:179:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14586:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14597:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14579:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14579:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14579:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14620:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14631:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14616:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14616:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14636:2:46",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14609:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14609:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14609:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14659:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14670:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14655:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14655:18:46"
                              },
                              {
                                "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14675:31:46",
                                "type": "",
                                "value": "Address: call to non-contract"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14648:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14648:59:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14648:59:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14716:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14728:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14739:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14724:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14724:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14716:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14546:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14560:4:46",
                        "type": ""
                      }
                    ],
                    "src": "14395:353:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14927:228:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14944:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14955:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14937:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14937:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14937:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14978:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14989:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14974:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14974:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14994:2:46",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14967:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14967:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14967:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15017:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15028:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15013:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15013:18:46"
                              },
                              {
                                "hexValue": "5661756c7420686173206e6f7420737461727420616363657074696e67206465",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15033:34:46",
                                "type": "",
                                "value": "Vault has not start accepting de"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15006:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15006:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15006:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15088:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15099:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15084:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15084:18:46"
                              },
                              {
                                "hexValue": "706f73697473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15104:8:46",
                                "type": "",
                                "value": "posits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15077:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15077:36:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15077:36:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15122:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15134:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15145:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15130:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15130:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15122:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cec611b21abceff0c2d2bb8ea620185849561d55211832f1c16a478e45cb1cd6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14904:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14918:4:46",
                        "type": ""
                      }
                    ],
                    "src": "14753:402:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15334:232:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15351:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15362:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15344:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15344:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15344:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15385:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15396:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15381:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15381:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15401:2:46",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15374:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15374:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15374:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15424:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15435:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15420:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15420:18:46"
                              },
                              {
                                "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15440:34:46",
                                "type": "",
                                "value": "SafeERC20: ERC20 operation did n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15413:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15413:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15413:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15495:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15506:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15491:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15491:18:46"
                              },
                              {
                                "hexValue": "6f742073756363656564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15511:12:46",
                                "type": "",
                                "value": "ot succeed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15484:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15484:40:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15484:40:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15533:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15545:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15556:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15541:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15541:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15533:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15311:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15325:4:46",
                        "type": ""
                      }
                    ],
                    "src": "15160:406:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15745:243:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15762:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15773:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15755:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15755:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15755:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15796:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15807:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15792:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15792:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15812:2:46",
                                "type": "",
                                "value": "53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15785:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15785:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15785:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15835:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15846:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15831:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15831:18:46"
                              },
                              {
                                "hexValue": "54686520616d6f756e74206f6620737461626c6520636f696e20746f20676574",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15851:34:46",
                                "type": "",
                                "value": "The amount of stable coin to get"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15824:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15824:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15824:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15906:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15917:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15902:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15902:18:46"
                              },
                              {
                                "hexValue": "206973206e6f74206c6172676572207468616e2030",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15922:23:46",
                                "type": "",
                                "value": " is not larger than 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15895:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15895:51:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15895:51:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15955:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15967:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15978:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15963:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15963:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15955:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e6c82086522714658f09f064738a3240a2fed0b620a746c615e152c3ecb6efa9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15722:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15736:4:46",
                        "type": ""
                      }
                    ],
                    "src": "15571:417:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16167:180:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16184:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16195:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16177:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16177:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16177:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16218:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16229:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16214:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16214:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16234:2:46",
                                "type": "",
                                "value": "30"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16207:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16207:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16207:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16257:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16268:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16253:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16253:18:46"
                              },
                              {
                                "hexValue": "42616c616e6365206f66204669647520636f696e206d7573742062652030",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16273:32:46",
                                "type": "",
                                "value": "Balance of Fidu coin must be 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16246:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16246:60:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16246:60:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16315:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16327:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16338:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16323:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16323:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16315:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e845e96df379c65ae5e6d3855b36a4abe206ca1c1da6abfbf8cf6c88a936f5c1__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16144:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16158:4:46",
                        "type": ""
                      }
                    ],
                    "src": "15993:354:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16526:223:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16543:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16554:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16536:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16536:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16536:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16577:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16588:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16573:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16573:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16593:2:46",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16566:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16566:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16566:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16616:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16627:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16612:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16612:18:46"
                              },
                              {
                                "hexValue": "557365722068617320696e73756666696369656e7420616c6c6f797820636f69",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16632:34:46",
                                "type": "",
                                "value": "User has insufficient alloyx coi"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16605:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16605:62:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16605:62:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16687:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16698:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16683:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16683:18:46"
                              },
                              {
                                "hexValue": "6e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16703:3:46",
                                "type": "",
                                "value": "n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16676:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16676:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16676:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16716:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16728:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16739:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16724:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16724:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16716:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f74c33f9d9b4c74c8bf0bdeed37f4ff65ed95c2b766e5bf8bc3105d90a44646f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16503:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16517:4:46",
                        "type": ""
                      }
                    ],
                    "src": "16352:397:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16928:174:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16945:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16956:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16938:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16938:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16938:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16979:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16990:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16975:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16975:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16995:2:46",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16968:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16968:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16968:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17018:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17029:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17014:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17014:18:46"
                              },
                              {
                                "hexValue": "4e6f7420476f6c6466696e636820506f6f6c20546f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17034:26:46",
                                "type": "",
                                "value": "Not Goldfinch Pool Token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17007:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17007:54:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17007:54:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17070:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17082:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17093:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17078:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17078:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17070:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fe6c2762d200329a241f8fda745165dcfb8e94c1e299126e68e03fcc7611e5f9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16905:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16919:4:46",
                        "type": ""
                      }
                    ],
                    "src": "16754:348:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17281:177:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17298:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17309:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17291:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17291:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17291:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17332:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17343:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17328:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17328:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17348:2:46",
                                "type": "",
                                "value": "27"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17321:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17321:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17321:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17371:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17382:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17367:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17367:18:46"
                              },
                              {
                                "hexValue": "4d757374206465706f736974206d6f7265207468616e207a65726f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17387:29:46",
                                "type": "",
                                "value": "Must deposit more than zero"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17360:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17360:57:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17360:57:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17426:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17438:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17449:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17434:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17434:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17426:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ffd7b40f737e185748e73c27db83bc35cea252c9ff1b32838a89ea0c4d6fff07__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17258:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17272:4:46",
                        "type": ""
                      }
                    ],
                    "src": "17107:351:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17564:76:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17574:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17586:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17597:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17582:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17582:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17574:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17616:9:46"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17627:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17609:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17609:25:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17609:25:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17533:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17544:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17555:4:46",
                        "type": ""
                      }
                    ],
                    "src": "17463:177:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17774:119:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17784:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17796:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17807:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17792:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17792:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17784:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17826:9:46"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17837:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17819:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17819:25:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17819:25:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17864:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17875:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17860:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17860:18:46"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "17880:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17853:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17853:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17853:34:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17735:9:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "17746:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17754:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17765:4:46",
                        "type": ""
                      }
                    ],
                    "src": "17645:248:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17943:230:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17953:19:46",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17969:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17963:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17963:9:46"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "17953:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17981:58:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "18003:6:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "18019:4:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18025:2:46",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "18015:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18015:13:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18034:2:46",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "18030:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18030:7:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18011:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18011:27:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17999:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17999:40:46"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "17985:10:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18114:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "18116:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18116:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18116:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18057:10:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18069:18:46",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "18054:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18054:34:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18093:10:46"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18105:6:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "18090:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18090:22:46"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "18051:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18051:62:46"
                          },
                          "nodeType": "YulIf",
                          "src": "18048:88:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18152:2:46",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "18156:10:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18145:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18145:22:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18145:22:46"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "17923:4:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "17932:6:46",
                        "type": ""
                      }
                    ],
                    "src": "17898:275:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18226:80:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18253:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "18255:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18255:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18255:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "18242:1:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "18249:1:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "18245:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18245:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "18239:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18239:13:46"
                          },
                          "nodeType": "YulIf",
                          "src": "18236:39:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18284:16:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "18295:1:46"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "18298:1:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18291:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18291:9:46"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "18284:3:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "18209:1:46",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "18212:1:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "18218:3:46",
                        "type": ""
                      }
                    ],
                    "src": "18178:128:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18357:228:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18388:168:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18409:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18412:77:46",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "18402:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18402:88:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18402:88:46"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18510:1:46",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18513:4:46",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "18503:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18503:15:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18503:15:46"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18538:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18541:4:46",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18531:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18531:15:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18531:15:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "18377:1:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "18370:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18370:9:46"
                          },
                          "nodeType": "YulIf",
                          "src": "18367:189:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18565:14:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "18574:1:46"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "18577:1:46"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "18570:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18570:9:46"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "18565:1:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "18342:1:46",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "18345:1:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "18351:1:46",
                        "type": ""
                      }
                    ],
                    "src": "18311:274:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18654:358:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18664:16:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18679:1:46",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "18668:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18689:16:46",
                          "value": {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "18698:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "18689:5:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18714:13:46",
                          "value": {
                            "name": "_base",
                            "nodeType": "YulIdentifier",
                            "src": "18722:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "base",
                              "nodeType": "YulIdentifier",
                              "src": "18714:4:46"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18778:228:46",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "18823:22:46",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "18825:16:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "18825:18:46"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "18825:18:46"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "18798:4:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "18812:1:46",
                                              "type": "",
                                              "value": "0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "18808:3:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "18808:6:46"
                                        },
                                        {
                                          "name": "base",
                                          "nodeType": "YulIdentifier",
                                          "src": "18816:4:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "div",
                                        "nodeType": "YulIdentifier",
                                        "src": "18804:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18804:17:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "18795:2:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18795:27:46"
                                },
                                "nodeType": "YulIf",
                                "src": "18792:53:46"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "18884:29:46",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "18886:25:46",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "power",
                                            "nodeType": "YulIdentifier",
                                            "src": "18899:5:46"
                                          },
                                          {
                                            "name": "base",
                                            "nodeType": "YulIdentifier",
                                            "src": "18906:4:46"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "18895:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "18895:16:46"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "power",
                                          "nodeType": "YulIdentifier",
                                          "src": "18886:5:46"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "18865:8:46"
                                    },
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "18875:7:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "18861:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18861:22:46"
                                },
                                "nodeType": "YulIf",
                                "src": "18858:55:46"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "18926:23:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "18938:4:46"
                                    },
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "18944:4:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mul",
                                    "nodeType": "YulIdentifier",
                                    "src": "18934:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18934:15:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "18926:4:46"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "18962:34:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "18978:7:46"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "18987:8:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18974:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18974:22:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "18962:8:46"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "18747:8:46"
                              },
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "18757:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "18744:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18744:21:46"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "18766:3:46",
                            "statements": []
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "18740:3:46",
                            "statements": []
                          },
                          "src": "18736:270:46"
                        }
                      ]
                    },
                    "name": "checked_exp_helper",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "_base",
                        "nodeType": "YulTypedName",
                        "src": "18618:5:46",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "18625:8:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "18638:5:46",
                        "type": ""
                      },
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "18645:4:46",
                        "type": ""
                      }
                    ],
                    "src": "18590:422:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19087:61:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19097:45:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "19127:4:46"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "19133:8:46"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_unsigned",
                              "nodeType": "YulIdentifier",
                              "src": "19106:20:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19106:36:46"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "19097:5:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_t_uint256_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "19058:4:46",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "19064:8:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "19077:5:46",
                        "type": ""
                      }
                    ],
                    "src": "19017:131:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19212:747:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19250:52:46",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "19264:10:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "19273:1:46",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "19264:5:46"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "19287:5:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "19232:8:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "19225:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19225:16:46"
                          },
                          "nodeType": "YulIf",
                          "src": "19222:80:46"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19335:52:46",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "19349:10:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "19358:1:46",
                                  "type": "",
                                  "value": "0"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "19349:5:46"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "19372:5:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "19321:4:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "19314:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19314:12:46"
                          },
                          "nodeType": "YulIf",
                          "src": "19311:76:46"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "19423:52:46",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "19437:10:46",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19446:1:46",
                                      "type": "",
                                      "value": "1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "19437:5:46"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "19460:5:46"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "19416:59:46",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19421:1:46",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "19491:123:46",
                                "statements": [
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "19526:22:46",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "panic_error_0x11",
                                              "nodeType": "YulIdentifier",
                                              "src": "19528:16:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "19528:18:46"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "19528:18:46"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "19511:8:46"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "19521:3:46",
                                          "type": "",
                                          "value": "255"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nodeType": "YulIdentifier",
                                        "src": "19508:2:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19508:17:46"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "19505:43:46"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "19561:25:46",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "19574:8:46"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "19584:1:46",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "19570:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19570:16:46"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "19561:5:46"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "19599:5:46"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "19484:130:46",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19489:1:46",
                                "type": "",
                                "value": "2"
                              }
                            }
                          ],
                          "expression": {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "19403:4:46"
                          },
                          "nodeType": "YulSwitch",
                          "src": "19396:218:46"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19712:70:46",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "19726:28:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "19739:4:46"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "19745:8:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "exp",
                                    "nodeType": "YulIdentifier",
                                    "src": "19735:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19735:19:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "19726:5:46"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "19767:5:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "19636:4:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19642:2:46",
                                        "type": "",
                                        "value": "11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "19633:2:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19633:12:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "19650:8:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19660:2:46",
                                        "type": "",
                                        "value": "78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "19647:2:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19647:16:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19629:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19629:35:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "19673:4:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19679:3:46",
                                        "type": "",
                                        "value": "307"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "19670:2:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19670:13:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "19688:8:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19698:2:46",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "19685:2:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19685:16:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19666:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19666:36:46"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "19626:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19626:77:46"
                          },
                          "nodeType": "YulIf",
                          "src": "19623:159:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19791:57:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "19833:4:46"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "19839:8:46"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_helper",
                              "nodeType": "YulIdentifier",
                              "src": "19814:18:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19814:34:46"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "19795:7:46",
                              "type": ""
                            },
                            {
                              "name": "base_1",
                              "nodeType": "YulTypedName",
                              "src": "19804:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19893:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "19895:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19895:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19895:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "19863:7:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19880:1:46",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "19876:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19876:6:46"
                                  },
                                  {
                                    "name": "base_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19884:6:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "19872:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19872:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "19860:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19860:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "19857:58:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19924:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "19937:7:46"
                              },
                              {
                                "name": "base_1",
                                "nodeType": "YulIdentifier",
                                "src": "19946:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "19933:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19933:20:46"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "19924:5:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_unsigned",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "19183:4:46",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "19189:8:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "19202:5:46",
                        "type": ""
                      }
                    ],
                    "src": "19153:806:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20016:116:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20075:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "20077:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20077:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20077:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "20047:1:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "20040:6:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20040:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "20033:6:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20033:17:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "20055:1:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "20066:1:46",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "20062:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "20062:6:46"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "20070:1:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "20058:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20058:14:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "20052:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20052:21:46"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "20029:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20029:45:46"
                          },
                          "nodeType": "YulIf",
                          "src": "20026:71:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20106:20:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "20121:1:46"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20124:1:46"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "20117:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20117:9:46"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "20106:7:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "19995:1:46",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "19998:1:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "20004:7:46",
                        "type": ""
                      }
                    ],
                    "src": "19964:168:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20186:76:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20208:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "20210:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20210:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20210:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "20202:1:46"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20205:1:46"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "20199:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20199:8:46"
                          },
                          "nodeType": "YulIf",
                          "src": "20196:34:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20239:17:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "20251:1:46"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20254:1:46"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "20247:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20247:9:46"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "20239:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "20168:1:46",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "20171:1:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "20177:4:46",
                        "type": ""
                      }
                    ],
                    "src": "20137:125:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20320:205:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20330:10:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20339:1:46",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "20334:1:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20399:63:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "20424:3:46"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "20429:1:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "20420:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "20420:11:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "20443:3:46"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "20448:1:46"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "20439:3:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "20439:11:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "20433:5:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "20433:18:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "20413:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20413:39:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20413:39:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "20360:1:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "20363:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "20357:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20357:13:46"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "20371:19:46",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "20373:15:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "20382:1:46"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20385:2:46",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "20378:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20378:10:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "20373:1:46"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "20353:3:46",
                            "statements": []
                          },
                          "src": "20349:113:46"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20488:31:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "20501:3:46"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "20506:6:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "20497:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "20497:16:46"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20515:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "20490:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20490:27:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20490:27:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "20477:1:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "20480:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "20474:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20474:13:46"
                          },
                          "nodeType": "YulIf",
                          "src": "20471:48:46"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "20298:3:46",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "20303:3:46",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "20308:6:46",
                        "type": ""
                      }
                    ],
                    "src": "20267:258:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20577:88:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20608:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "20610:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20610:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20610:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "20593:5:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20604:1:46",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "20600:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20600:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "20590:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20590:17:46"
                          },
                          "nodeType": "YulIf",
                          "src": "20587:43:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20639:20:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "20650:5:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20657:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20646:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20646:13:46"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "20639:3:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "20559:5:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "20569:3:46",
                        "type": ""
                      }
                    ],
                    "src": "20530:135:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20702:152:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20719:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20722:77:46",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20712:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20712:88:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20712:88:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20816:1:46",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20819:4:46",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20809:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20809:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20809:15:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20840:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20843:4:46",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "20833:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20833:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20833:15:46"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "20670:184:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20891:152:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20908:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20911:77:46",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20901:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20901:88:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20901:88:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21005:1:46",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21008:4:46",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20998:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20998:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20998:15:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21029:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21032:4:46",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "21022:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21022:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21022:15:46"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "20859:184:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21093:109:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21180:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21189:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21192:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "21182:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21182:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21182:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "21116:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "21127:5:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21134:42:46",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "21123:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21123:54:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "21113:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21113:65:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "21106:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21106:73:46"
                          },
                          "nodeType": "YulIf",
                          "src": "21103:93:46"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "21082:5:46",
                        "type": ""
                      }
                    ],
                    "src": "21048:154:46"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_address_payable(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let _1 := 32\n        let value_1 := calldataload(add(headStart, _1))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let array := allocate_memory(add(and(add(_4, 0x1f), not(31)), _1))\n        mstore(array, _4)\n        if gt(add(add(_3, _4), _1), dataEnd) { revert(0, 0) }\n        calldatacopy(add(array, _1), add(_3, _1), _4)\n        mstore(add(add(array, _4), _1), 0)\n        value3 := array\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_struct$_TokenInfo_$8310_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 160)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let value := mload(headStart)\n        validator_revert_address(value)\n        mstore(memPtr, value)\n        mstore(add(memPtr, 32), mload(add(headStart, 32)))\n        mstore(add(memPtr, 64), mload(add(headStart, 64)))\n        mstore(add(memPtr, 96), mload(add(headStart, 96)))\n        mstore(add(memPtr, 128), mload(add(headStart, 128)))\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_address_payable_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0a690ed0a05025b55678f73399dcb5f9ab73b9c2a59533d3fe359d09bb52754f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"User has not approved the vault \")\n        mstore(add(headStart, 96), \"for this token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_0db97168c6b68d33c72cd2f11fd5607c2962829a8420d56cf3f04fe433820f2f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Vault has insufficent stable coi\")\n        mstore(add(headStart, 96), \"n\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_18940d812f14811126059b93185975b3a51076d01df3e843e4ed1ca5cc966ac2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"User has not approved the vault \")\n        mstore(add(headStart, 96), \"for sufficient alloyx coin\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2eacd7aa75d7ff1e51ba47431b9f92d51085818b87b41cf3b65e865af0e70d67__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"Vault has already start acceptin\")\n        mstore(add(headStart, 96), \"g deposits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_30a0498bcfd70002e5159989860b9655841ad033419b4ac45713eed24a0daf6e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Not a valid pool\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_690d29e3faa62cdeb1c53143670ac6e3d5396805d8be448e33206a8660b4705f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 60)\n        mstore(add(headStart, 64), \"The amount of alloyx bronze coin\")\n        mstore(add(headStart, 96), \" to get is not larger than 0\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_74d23082a86ca02b47e16795727cbea162470cddbf2c0e3b3e24c876f918b3d5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"The vault does not have sufficie\")\n        mstore(add(headStart, 96), \"nt stable coin\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_80e35ec8f1176efcd2df282453d9de0fde96290b91a0ac4e2e8a3c144cb5e1f0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"User has not approved the vault \")\n        mstore(add(headStart, 96), \"for sufficient stable coin\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ad79d838e5af7e391a6db369795b32978a7336f7c2d84610e0de9ebdb3ce20e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"User has insufficient stable coi\")\n        mstore(add(headStart, 96), \"n\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8d33f711b7435d75c8d13eba19978c4231cf86ca47b338ed5efb8add5a9e6195__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Balance of GFI coin must be 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a338f366ccfd1d90ec553c6bc1a647f4b387acfd7e4256c604bbec6102e2daee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Balance of stable coin must be 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b715d90db895266942272da173be521f759dbcc94211d118665a6773dd5bb897__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"User does not own this token\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cec611b21abceff0c2d2bb8ea620185849561d55211832f1c16a478e45cb1cd6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Vault has not start accepting de\")\n        mstore(add(headStart, 96), \"posits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e6c82086522714658f09f064738a3240a2fed0b620a746c615e152c3ecb6efa9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 53)\n        mstore(add(headStart, 64), \"The amount of stable coin to get\")\n        mstore(add(headStart, 96), \" is not larger than 0\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e845e96df379c65ae5e6d3855b36a4abe206ca1c1da6abfbf8cf6c88a936f5c1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"Balance of Fidu coin must be 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f74c33f9d9b4c74c8bf0bdeed37f4ff65ed95c2b766e5bf8bc3105d90a44646f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"User has insufficient alloyx coi\")\n        mstore(add(headStart, 96), \"n\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fe6c2762d200329a241f8fda745165dcfb8e94c1e299126e68e03fcc7611e5f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Not Goldfinch Pool Token\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ffd7b40f737e185748e73c27db83bc35cea252c9ff1b32838a89ea0c4d6fff07__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Must deposit more than zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n}",
              "id": 46,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x182 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x83197EF0 GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xB338AD16 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD905E9B4 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD905E9B4 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0xDF16694A EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x33A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB338AD16 EQ PUSH2 0x2DB JUMPI DUP1 PUSH4 0xBB74C058 EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0xD8EC0608 EQ PUSH2 0x301 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8682CAF8 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x8682CAF8 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0x8D6F4D21 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x83197EF0 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x29D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x13A JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x7C905457 EQ PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0x46040872 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x53C98F5A EQ PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1A97749D GT PUSH2 0x16B JUMPI DUP1 PUSH4 0x1A97749D EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x1B61EB67 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x354D3C30 EQ PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7C0CF3D EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x19C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19A PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D3 PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0x3107 JUMP JUMPDEST PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19A PUSH2 0x1FF CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x3BC JUMP JUMPDEST PUSH2 0x19A PUSH2 0x212 CALLDATASIZE PUSH1 0x4 PUSH2 0x32E9 JUMP JUMPDEST PUSH2 0x426 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x225 CALLDATASIZE PUSH1 0x4 PUSH2 0x31CB JUMP JUMPDEST PUSH2 0x667 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x78B JUMP JUMPDEST PUSH2 0x19A PUSH2 0x250 CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x82D JUMP JUMPDEST PUSH2 0x22A PUSH2 0x263 CALLDATASIZE PUSH1 0x4 PUSH2 0x3292 JUMP JUMPDEST PUSH2 0x897 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22A JUMP JUMPDEST PUSH2 0x19A PUSH2 0xCDD JUMP JUMPDEST PUSH2 0x19A PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0xD2F JUMP JUMPDEST PUSH2 0x19A PUSH2 0xF62 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x1261 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x12FE JUMP JUMPDEST PUSH2 0x22A PUSH2 0x1368 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x31CB JUMP JUMPDEST PUSH2 0x1527 JUMP JUMPDEST PUSH2 0x22A PUSH2 0x2FC CALLDATASIZE PUSH1 0x4 PUSH2 0x3292 JUMP JUMPDEST PUSH2 0x1AEA JUMP JUMPDEST PUSH2 0x19A PUSH2 0x30F CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x2011 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x322 CALLDATASIZE PUSH1 0x4 PUSH2 0x30CE JUMP JUMPDEST PUSH2 0x2124 JUMP JUMPDEST PUSH2 0x19A PUSH2 0x335 CALLDATASIZE PUSH1 0x4 PUSH2 0x32C4 JUMP JUMPDEST PUSH2 0x224C JUMP JUMPDEST PUSH2 0x19A PUSH2 0x348 CALLDATASIZE PUSH1 0x4 PUSH2 0x3094 JUMP JUMPDEST PUSH2 0x2485 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x39A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x404 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x46E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP5 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E9 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x541 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C742068617320696E737566666963656E7420737461626C6520636F69 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x591 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206465706F736974206D6F7265207468616E207A65726F0000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE2BBB15800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xE2BBB158 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x609 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x62D SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE PUSH32 0x7A3794CF7D311106018524DFD41878138E4264F1BEE18E53F1C180A1627FA2B8 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x463D31D7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8C7A63AE SWAP1 PUSH1 0x24 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E6 SWAP2 SWAP1 PUSH2 0x3219 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 MLOAD PUSH32 0xB5ADA6D800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP3 SWAP4 POP SWAP1 SWAP2 DUP5 AND SWAP1 PUSH4 0xB5ADA6D8 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x747 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x75B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77F SWAP2 SWAP1 PUSH2 0x31F7 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x823 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x82B PUSH2 0x2555 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x875 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x94D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C7420686173206E6F7420737461727420616363657074696E67206465 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x706F73697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x990 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9C8 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0xA20 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x557365722068617320696E73756666696369656E7420737461626C6520636F69 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA7D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAA1 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0xB15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220686173206E6F7420617070726F76656420746865207661756C7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x666F722073756666696369656E7420737461626C6520636F696E000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB20 DUP4 PUSH2 0x25F2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0xB98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520616D6F756E74206F6620616C6C6F79782062726F6E7A6520636F696E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20746F20676574206973206E6F74206C6172676572207468616E203000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xBB0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP7 PUSH2 0x269F JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x40C10F19 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC29 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC4D SWAP2 SWAP1 PUSH2 0x31F7 JUMP JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE CALLER PUSH1 0x20 DUP4 ADD MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0xA4F358C78F73B2049A06E0436C6728292334862A6FC2114F2DE13F9CFF58491F SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD25 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x82B PUSH1 0x0 PUSH2 0x273E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD77 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDC7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE48 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF5D JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2F745C59 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0x42842E0E SWAP2 DUP7 SWAP1 DUP5 SWAP1 PUSH4 0x2F745C59 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEBF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEE3 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF46 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0xF55 SWAP1 PUSH2 0x354C JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE4D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xFAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xFFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x103D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1051 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1075 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST ISZERO PUSH2 0x10C2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E6365206F6620737461626C6520636F696E206D7573742062652030 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1119 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x113D SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST ISZERO PUSH2 0x118A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E6365206F66204669647520636F696E206D75737420626520300000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1205 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST ISZERO PUSH2 0x1252 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42616C616E6365206F662047464920636F696E206D7573742062652030000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 SELFDESTRUCT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x12A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x12F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x82B PUSH2 0x278E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1346 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x13B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1431 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C742068617320616C726561647920737461727420616363657074696E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x67206465706F7369747300000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x143B PUSH2 0x2816 JUMP JUMPDEST PUSH1 0x5 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 ADDRESS PUSH2 0x1473 PUSH2 0x145B PUSH2 0x2841 JUMP JUMPDEST PUSH2 0x146D PUSH2 0x1466 PUSH2 0x284F JUMP JUMPDEST DUP8 SWAP1 PUSH2 0x285D JUMP JUMPDEST SWAP1 PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x14CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14F1 SWAP2 SWAP1 PUSH2 0x31F7 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0xA8 SHL OR SWAP1 SSTORE POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1575 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x15DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C7420686173206E6F7420737461727420616363657074696E67206465 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x706F73697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ PUSH2 0x163A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420476F6C6466696E636820506F6F6C20546F6B656E0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x1644 DUP4 DUP4 PUSH2 0x667 JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x1695 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420612076616C696420706F6F6C00000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1704 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1728 SWAP2 SWAP1 PUSH2 0x30B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x177E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220646F6573206E6F74206F776E207468697320746F6B656E00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x81812FC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE ADDRESS SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x81812FC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1811 SWAP2 SWAP1 PUSH2 0x30B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x188D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220686173206E6F7420617070726F76656420746865207661756C7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x666F72207468697320746F6B656E000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1899 DUP5 DUP5 PUSH2 0x287C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x1911 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520616D6F756E74206F6620737461626C6520636F696E20746F20676574 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206973206E6F74206C6172676572207468616E20300000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1954 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1968 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x198C SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x1A00 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546865207661756C7420646F6573206E6F742068617665207375666669636965 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E7420737461626C6520636F696E000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x42842E0E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x42842E0E SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1A7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH2 0x1A97 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP CALLER DUP4 PUSH2 0x29F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE CALLER PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0xC7E8B1BDBECDC8A549557EFB2A2AB715CFF51630CAEAD31610000019E61DFA4B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1B38 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1BA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C7420686173206E6F7420737461727420616363657074696E67206465 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x706F73697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C1B SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x1C73 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x557365722068617320696E73756666696369656E7420616C6C6F797820636F69 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CD0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CF4 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x1D68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220686173206E6F7420617070726F76656420746865207661756C7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x666F722073756666696369656E7420616C6C6F797820636F696E000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D73 DUP4 PUSH2 0x2A41 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x1DEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520616D6F756E74206F6620737461626C6520636F696E20746F20676574 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x206973206E6F74206C6172676572207468616E20300000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1E42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E66 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x1EDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546865207661756C7420646F6573206E6F742068617665207375666669636965 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E7420737461626C6520636F696E000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH32 0x9DC29FAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x9DC29FAC SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F53 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F77 SWAP2 SWAP1 PUSH2 0x31F7 JUMP JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1F8F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP4 PUSH2 0x29F8 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE CALLER PUSH1 0x20 DUP4 ADD MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x53FEE901A59B4D2E659E450F8DB17FC345E158FE408D2B39FAF66D1F8C4A54FE SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xCC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5 SWAP2 ADD PUSH2 0xCCC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2059 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x20A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH32 0xF2FDE38B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xF2FDE38B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x211D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x216C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x21BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2212 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2236 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 POP PUSH2 0xF5D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 DUP4 PUSH2 0x29F8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x2294 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22EB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x230F SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST LT ISZERO PUSH2 0x2367 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5661756C742068617320696E737566666963656E7420737461626C6520636F69 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x23B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374206465706F736974206D6F7265207468616E207A65726F0000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB6B55F2500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xB6B55F25 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2428 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x244C SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH32 0xD483110686F79D1F5932D32ADD1024998649DDCA927700B75BEA458B4CB7CDE6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x24CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35A9 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2549 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH2 0x2552 DUP2 PUSH2 0x273E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x25A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2657 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x267B SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2687 PUSH2 0x2816 JUMP JUMPDEST SWAP1 POP PUSH2 0x2697 DUP2 PUSH2 0x146D DUP7 DUP6 PUSH2 0x285D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x2738 SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x2AE6 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x27DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x25D5 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x283C PUSH2 0x2823 PUSH2 0x2BCB JUMP JUMPDEST PUSH2 0x2836 PUSH2 0x282E PUSH2 0x2D24 JUMP JUMPDEST PUSH2 0x2836 PUSH2 0x2DA0 JUMP JUMPDEST SWAP1 PUSH2 0x2ECD JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x283C PUSH1 0x6 PUSH1 0xA PUSH2 0x3442 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x283C PUSH1 0x12 PUSH1 0xA PUSH2 0x3442 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2869 DUP3 DUP5 PUSH2 0x34EA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2869 DUP3 DUP5 PUSH2 0x33DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x463D31D7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8C7A63AE SWAP1 PUSH1 0x24 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x28FB SWAP2 SWAP1 PUSH2 0x3219 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x2923 DUP4 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x2ECD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 MLOAD PUSH32 0x4D02FE6F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE SWAP2 SWAP3 POP SWAP1 DUP2 SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x4D02FE6F SWAP1 PUSH1 0x24 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2988 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x299C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x29C0 SWAP2 SWAP1 PUSH2 0x3321 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP DUP2 DUP7 DUP3 LT ISZERO PUSH2 0x29DA JUMPI PUSH2 0x29D8 DUP2 DUP4 PUSH2 0x2ECD JUMP JUMPDEST POP JUMPDEST PUSH2 0x29E8 DUP2 PUSH2 0x2836 DUP10 DUP10 PUSH2 0x2ED9 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xF5D SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD PUSH2 0x26EC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2ACA SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2AD6 PUSH2 0x2816 JUMP JUMPDEST SWAP1 POP PUSH2 0x2697 DUP3 PUSH2 0x146D DUP7 DUP5 PUSH2 0x285D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3B DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2EE5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xF5D JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2B59 SWAP2 SWAP1 PUSH2 0x31F7 JUMP JUMPDEST PUSH2 0xF5D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C2C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C50 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2D0A JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2F745C59 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x2CF6 SWAP2 PUSH2 0x2CEF SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 SWAP1 PUSH4 0x2F745C59 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2CC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2CEA SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST PUSH2 0x287C JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x2ECD JUMP JUMPDEST SWAP3 POP DUP1 PUSH2 0x2D02 DUP2 PUSH2 0x354C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2C55 JUMP JUMPDEST POP PUSH2 0x2D1D PUSH2 0x2D16 PUSH2 0x2841 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x285D JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D7C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x283C SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x283C PUSH2 0x2EC8 PUSH2 0x2DB0 PUSH2 0x284F JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8726972900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH2 0x146D SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x87269729 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E23 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E47 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E9E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EC2 SWAP2 SWAP1 PUSH2 0x32AB JUMP JUMPDEST SWAP1 PUSH2 0x285D JUMP JUMPDEST PUSH2 0x2EF4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2869 DUP3 DUP5 PUSH2 0x33C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2869 DUP3 DUP5 PUSH2 0x3509 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2697 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x2F13 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x785 PUSH2 0x2F0C PUSH2 0x2F04 PUSH2 0x2841 JUMP JUMPDEST PUSH2 0x146D PUSH2 0x284F JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2F8B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x2FE2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x391 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2FFE SWAP2 SWAP1 PUSH2 0x3345 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x303B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3040 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3050 DUP3 DUP3 DUP7 PUSH2 0x305B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x306A JUMPI POP DUP2 PUSH2 0x2869 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x307A JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x3361 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2869 DUP2 PUSH2 0x3593 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2869 DUP2 PUSH2 0x3593 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x30EC DUP2 PUSH2 0x3593 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x30FC DUP2 PUSH2 0x3593 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x311D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3128 DUP2 PUSH2 0x3593 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 DUP2 ADD CALLDATALOAD PUSH2 0x3139 DUP2 PUSH2 0x3593 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x315D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x3183 JUMPI PUSH2 0x3183 PUSH2 0x357D JUMP JUMPDEST PUSH2 0x3195 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP6 ADD PUSH2 0x3394 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP10 DUP5 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x31AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP5 DUP5 ADD DUP6 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP5 DUP3 DUP5 ADD ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x31DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x31E9 DUP2 PUSH2 0x3593 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2869 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x322B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x324E JUMPI PUSH2 0x324E PUSH2 0x357D JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 MLOAD PUSH2 0x325C DUP2 PUSH2 0x3593 JUMP JUMPDEST DUP1 DUP3 MSTORE POP PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x32BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x30FC DUP2 PUSH2 0x3593 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x32FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x3310 DUP2 PUSH2 0x3593 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3357 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x3520 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3380 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x3520 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x33BD JUMPI PUSH2 0x33BD PUSH2 0x357D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x33D8 JUMPI PUSH2 0x33D8 PUSH2 0x3567 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x33FA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x343A JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x3420 JUMPI PUSH2 0x3420 PUSH2 0x3567 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x342D JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x3404 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2869 DUP4 DUP4 PUSH1 0x0 DUP3 PUSH2 0x3458 JUMPI POP PUSH1 0x1 PUSH2 0x785 JUMP JUMPDEST DUP2 PUSH2 0x3465 JUMPI POP PUSH1 0x0 PUSH2 0x785 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x347B JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x3485 JUMPI PUSH2 0x34A1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x785 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x3496 JUMPI PUSH2 0x3496 PUSH2 0x3567 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x785 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x34C4 JUMPI POP DUP2 DUP2 EXP PUSH2 0x785 JUMP JUMPDEST PUSH2 0x34CE DUP4 DUP4 PUSH2 0x33FF JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x34E2 JUMPI PUSH2 0x34E2 PUSH2 0x3567 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3504 JUMPI PUSH2 0x3504 PUSH2 0x3567 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x351B JUMPI PUSH2 0x351B PUSH2 0x3567 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x353B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3523 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2738 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3560 JUMPI PUSH2 0x3560 PUSH2 0x3567 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2552 JUMPI PUSH1 0x0 DUP1 REVERT INVALID 0x4F PUSH24 0x6E61626C653A2063616C6C6572206973206E6F7420746865 KECCAK256 PUSH16 0x776E6572A2646970667358221220EC01 PUSH26 0x16FCB44D798D2A7A37A6B034C4A9B781FBFAF18E51E862E787EF PUSH23 0xFC1764736F6C6343000807003300000000000000000000 ",
          "sourceMap": "1072:12915:37:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5324:148;;;;;;:::i;:::-;;:::i;:::-;;588:200:23;;;;;;:::i;:::-;751:30;588:200;;;;;;;;;;-1:-1:-1;;;;;;7298:79:46;;;7280:98;;7268:2;7253:18;588:200:23;;;;;;;;5478:147:37;;;;;;:::i;:::-;;:::i;12402:443::-;;;;;;:::i;:::-;;:::i;10684:360::-;;;;;;:::i;:::-;;:::i;:::-;;;7109:14:46;;7102:22;7084:41;;7072:2;7057:18;10684:360:37;6944:187:46;6241:76:37;;;:::i;5764:132::-;;;;;;:::i;:::-;;:::i;7993:824::-;;;;;;:::i;:::-;;:::i;1098:84:12:-;1145:4;1168:7;-1:-1:-1;;;1168:7:12;;;;1098:84;;1668:101:11;;;:::i;13241:364:37:-;;;;;;:::i;:::-;;:::i;10077:416::-;;;:::i;6160:75::-;;;:::i;5631:127::-;;;;;;:::i;:::-;;:::i;6408:320::-;;;:::i;1036:85:11:-;1082:7;1108:6;1036:85;;-1:-1:-1;;;;;1108:6:11;;;5411:74:46;;5399:2;5384:18;1036:85:11;5265:226:46;8984:1087:37;;;;;;:::i;:::-;;:::i;6887:947::-;;;;;;:::i;:::-;;:::i;13852:133::-;;;;;;:::i;:::-;;:::i;13611:235::-;;;;;;:::i;:::-;;:::i;12851:384::-;;;;;;:::i;:::-;;:::i;1918:198:11:-;;;;;;:::i;:::-;;:::i;5324:148:37:-;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;;;;;;;;;5412:17:37::1;:53:::0;;-1:-1:-1;;;;;;5412:53:37::1;-1:-1:-1::0;;;;;5412:53:37;;;::::1;::::0;;;::::1;::::0;;5324:148::o;5478:147::-;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;5566:16:37::1;:52:::0;;-1:-1:-1;;;;;;5566:52:37::1;-1:-1:-1::0;;;;;5566:52:37;;;::::1;::::0;;;::::1;::::0;;5478:147::o;12402:443::-;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;12552:8:37::1;::::0;:33:::1;::::0;-1:-1:-1;;;12552:33:37;;12579:4:::1;12552:33;::::0;::::1;5411:74:46::0;12589:6:37;;-1:-1:-1;;;;;12552:8:37::1;::::0;:18:::1;::::0;5384::46;;12552:33:37::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:43;;12544:89;;;::::0;-1:-1:-1;;;12544:89:37;;8743:2:46;12544:89:37::1;::::0;::::1;8725:21:46::0;8782:2;8762:18;;;8755:30;8821:34;8801:18;;;8794:62;-1:-1:-1;;;8872:18:46;;;8865:31;8913:19;;12544:89:37::1;8541:397:46::0;12544:89:37::1;12660:1;12651:6;:10;12643:50;;;::::0;-1:-1:-1;;;12643:50:37;;17309:2:46;12643:50:37::1;::::0;::::1;17291:21:46::0;17348:2;17328:18;;;17321:30;17387:29;17367:18;;;17360:57;17434:18;;12643:50:37::1;17107:351:46::0;12643:50:37::1;12766:35;::::0;;;;::::1;::::0;::::1;17819:25:46::0;;;17860:18;;;17853:34;;;12744:11:37;;-1:-1:-1;;;;;12766:18:37;::::1;::::0;::::1;::::0;17792::46;;12766:35:37::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;12816:22:37::1;::::0;17609:25:46;;;12816:22:37::1;::::0;17597:2:46;17582:18;12816:22:37::1;;;;;;;12534:311;12402:443:::0;;;:::o;10684:360::-;10892:40;;-1:-1:-1;;;10892:40:37;;;;;17609:25:46;;;10767:4:37;;10827:13;;10767:4;;-1:-1:-1;;;;;10892:30:37;;;;;17582:18:46;;10892:40:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10965:14;;10996:41;;;;;-1:-1:-1;;;;;5429:55:46;;;10996:41:37;;;5411:74:46;10965:14:37;;-1:-1:-1;10965:14:37;;10996:27;;;;;5384:18:46;;10996:41:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10989:48;;;;;10684:360;;;;;:::o;6241:76::-;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;1145:4:12;1168:7;-1:-1:-1;;;1168:7:12;;;;1669:41:::1;;;::::0;-1:-1:-1;;;1669:41:12;;8394:2:46;1669:41:12::1;::::0;::::1;8376:21:46::0;8433:2;8413:18;;;8406:30;-1:-1:-1;;;8452:18:46;;;8445:50;8512:18;;1669:41:12::1;8192:344:46::0;1669:41:12::1;6300:10:37::2;:8;:10::i;:::-;6241:76::o:0;5764:132::-;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;5845:18:37::1;:44:::0;;-1:-1:-1;;;;;;5845:44:37::1;-1:-1:-1::0;;;;;5845:44:37;;;::::1;::::0;;;::::1;::::0;;5764:132::o;7993:824::-;8089:4;1168:7:12;;-1:-1:-1;;;1168:7:12;;;;1411:9;1403:38;;;;-1:-1:-1;;;1403:38:12;;11142:2:46;1403:38:12;;;11124:21:46;11181:2;11161:18;;;11154:30;-1:-1:-1;;;11200:18:46;;;11193:46;11256:18;;1403:38:12;10940:340:46;1403:38:12;5948:12:37::1;::::0;-1:-1:-1;;;5948:12:37;::::1;;;5940:63;;;::::0;-1:-1:-1;;;5940:63:37;;14955:2:46;5940:63:37::1;::::0;::::1;14937:21:46::0;14994:2;14974:18;;;14967:30;15033:34;15013:18;;;15006:62;-1:-1:-1;;;15084:18:46;;;15077:36;15130:19;;5940:63:37::1;14753:402:46::0;5940:63:37::1;8113:8:::2;::::0;:30:::2;::::0;-1:-1:-1;;;8113:30:37;;8132:10:::2;8113:30;::::0;::::2;5411:74:46::0;8147:12:37;;-1:-1:-1;;;;;8113:8:37::2;::::0;:18:::2;::::0;5384::46;;8113:30:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:46;;8105:92;;;::::0;-1:-1:-1;;;8105:92:37;;12758:2:46;8105:92:37::2;::::0;::::2;12740:21:46::0;12797:2;12777:18;;;12770:30;12836:34;12816:18;;;12809:62;-1:-1:-1;;;12887:18:46;;;12880:31;12928:19;;8105:92:37::2;12556:397:46::0;8105:92:37::2;8228:8;::::0;:45:::2;::::0;-1:-1:-1;;;8228:45:37;;8247:10:::2;8228:45;::::0;::::2;5731:34:46::0;8267:4:37::2;5781:18:46::0;;;5774:43;8277:12:37;;-1:-1:-1;;;;;8228:8:37::2;::::0;:18:::2;::::0;5643::46;;8228:45:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:61;;8207:166;;;::::0;-1:-1:-1;;;8207:166:37;;12331:2:46;8207:166:37::2;::::0;::::2;12313:21:46::0;12370:2;12350:18;;;12343:30;12409:34;12389:18;;;12382:62;12480:28;12460:18;;;12453:56;12526:19;;8207:166:37::2;12129:422:46::0;8207:166:37::2;8383:20;8406:32;8425:12;8406:18;:32::i;:::-;8383:55;;8471:1;8456:12;:16;8448:89;;;::::0;-1:-1:-1;;;8448:89:37;;11487:2:46;8448:89:37::2;::::0;::::2;11469:21:46::0;11526:2;11506:18;;;11499:30;11565:34;11545:18;;;11538:62;11636:30;11616:18;;;11609:58;11684:19;;8448:89:37::2;11285:424:46::0;8448:89:37::2;8547:8;::::0;:66:::2;::::0;-1:-1:-1;;;;;8547:8:37::2;8573:10;8593:4;8600:12:::0;8547:25:::2;:66::i;:::-;8623:17;::::0;:48:::2;::::0;;;;8646:10:::2;8623:48;::::0;::::2;6816:74:46::0;6906:18;;;6899:34;;;-1:-1:-1;;;;;8623:17:37;;::::2;::::0;:22:::2;::::0;6789:18:46;;8623:48:37::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;8708:8:37::2;::::0;8686:58:::2;::::0;;-1:-1:-1;;;;;8708:8:37;;::::2;6099:34:46::0;;8719:10:37::2;6164:2:46::0;6149:18;;6142:43;6201:18;;6194:34;;;8686:58:37::2;::::0;6026:2:46;6011:18;8686:58:37::2;;;;;;;8759:30;::::0;;8764:10:::2;6816:74:46::0;;6921:2;6906:18;;6899:34;;;8759:30:37::2;::::0;6789:18:46;8759:30:37::2;;;;;;;;-1:-1:-1::0;8806:4:37::2;::::0;7993:824;-1:-1:-1;;7993:824:37:o;1668:101:11:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;1732:30:::1;1759:1;1732:18;:30::i;13241:364:37:-:0;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;1145:4:12;1168:7;-1:-1:-1;;;1168:7:12;;;;1669:41:::1;;;::::0;-1:-1:-1;;;1669:41:12;;8394:2:46;1669:41:12::1;::::0;::::1;8376:21:46::0;8433:2;8413:18;;;8406:30;-1:-1:-1;;;8452:18:46;;;8445:50;8512:18;;1669:41:12::1;8192:344:46::0;1669:41:12::1;13375:18:37::2;::::0;;:43:::2;::::0;-1:-1:-1;;;13375:43:37;;13412:4:::2;13375:43:::0;;::::2;5411:74:46::0;;;;13359:15:37::2;::::0;-1:-1:-1;;;;;13375:18:37;;::::2;::::0;:28:::2;::::0;5384:18:46;;13375:43:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13359:59;;13432:6;13428:171;13443:7;13441:1;:9;13428:171;;;13469:18;::::0;;13532:55:::2;::::0;-1:-1:-1;;;13532:55:37;;13513:4:::2;13532:55:::0;;::::2;6816:74:46::0;;;6906:18;;;6899:34;;;-1:-1:-1;;;;;13469:18:37;;::::2;::::0;:35:::2;::::0;13520:10;;13469:18;;13532:38:::2;::::0;6789:18:46;;13532:55:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13469:119;::::0;-1:-1:-1;;;;;;13469:119:37::2;::::0;;;;;;-1:-1:-1;;;;;6117:15:46;;;13469:119:37::2;::::0;::::2;6099:34:46::0;6169:15;;;;6149:18;;;6142:43;6201:18;;;6194:34;6011:18;;13469:119:37::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;13451:3;;;;;:::i;:::-;;;;13428:171;;;;13349:256;13241:364:::0;:::o;10077:416::-;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;1145:4:12;1168:7;-1:-1:-1;;;1168:7:12;;;;1669:41:::1;;;::::0;-1:-1:-1;;;1669:41:12;;8394:2:46;1669:41:12::1;::::0;::::1;8376:21:46::0;8433:2;8413:18;;;8406:30;-1:-1:-1;;;8452:18:46;;;8445:50;8512:18;;1669:41:12::1;8192:344:46::0;1669:41:12::1;10144:8:37::2;::::0;:33:::2;::::0;-1:-1:-1;;;10144:33:37;;10171:4:::2;10144:33;::::0;::::2;5411:74:46::0;-1:-1:-1;;;;;10144:8:37;;::::2;::::0;:18:::2;::::0;5384::46;;10144:33:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:38:::0;10136:83:::2;;;::::0;-1:-1:-1;;;10136:83:37;;13879:2:46;10136:83:37::2;::::0;::::2;13861:21:46::0;;;13898:18;;;13891:30;13957:34;13937:18;;;13930:62;14009:18;;10136:83:37::2;13677:356:46::0;10136:83:37::2;10237:8;::::0;:33:::2;::::0;-1:-1:-1;;;10237:33:37;;10264:4:::2;10237:33;::::0;::::2;5411:74:46::0;-1:-1:-1;;;;;10237:8:37;;::::2;::::0;:18:::2;::::0;5384::46;;10237:33:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:38:::0;10229:81:::2;;;::::0;-1:-1:-1;;;10229:81:37;;16195:2:46;10229:81:37::2;::::0;::::2;16177:21:46::0;16234:2;16214:18;;;16207:30;16273:32;16253:18;;;16246:60;16323:18;;10229:81:37::2;15993:354:46::0;10229:81:37::2;10328:7;::::0;:32:::2;::::0;-1:-1:-1;;;10328:32:37;;10354:4:::2;10328:32;::::0;::::2;5411:74:46::0;-1:-1:-1;;;;;10328:7:37;;::::2;::::0;:17:::2;::::0;5384:18:46;;10328:32:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:37:::0;10320:79:::2;;;::::0;-1:-1:-1;;;10320:79:37;;13160:2:46;10320:79:37::2;::::0;::::2;13142:21:46::0;13199:2;13179:18;;;13172:30;13238:31;13218:18;;;13211:59;13287:18;;10320:79:37::2;12958:353:46::0;10320:79:37::2;10410:20;1108:6:11::0;-1:-1:-1;;;;;1108:6:11;;10468:18:37::2;6160:75:::0;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;1145:4:12;1168:7;-1:-1:-1;;;1168:7:12;;;;1411:9:::1;1403:38;;;::::0;-1:-1:-1;;;1403:38:12;;11142:2:46;1403:38:12::1;::::0;::::1;11124:21:46::0;11181:2;11161:18;;;11154:30;-1:-1:-1;;;11200:18:46;;;11193:46;11256:18;;1403:38:12::1;10940:340:46::0;1403:38:12::1;6220:8:37::2;:6;:8::i;5631:127::-:0;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;5714:10:37::1;:37:::0;;-1:-1:-1;;;;;;5714:37:37::1;-1:-1:-1::0;;;;;5714:37:37;;;::::1;::::0;;;::::1;::::0;;5631:127::o;6408:320::-;6487:4;1108:6:11;;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;6077:12:37::1;::::0;-1:-1:-1;;;6077:12:37;::::1;;;6076:13;6068:68;;;::::0;-1:-1:-1;;;6068:68:37;;9979:2:46;6068:68:37::1;::::0;::::1;9961:21:46::0;10018:2;9998:18;;;9991:30;10057:34;10037:18;;;10030:62;10128:12;10108:18;;;10101:40;10158:19;;6068:68:37::1;9777:406:46::0;6068:68:37::1;6503:26:::2;6530:35;:33;:35::i;:::-;6575:17;::::0;6503:62;;-1:-1:-1;;;;;;6575:17:37::2;:22;6606:4;6613:59;6657:14;:12;:14::i;:::-;6613:39;6636:15;:13;:15::i;:::-;6613:18:::0;;:22:::2;:39::i;:::-;:43:::0;::::2;:59::i;:::-;6575:98;::::0;-1:-1:-1;;;;;;6575:98:37::2;::::0;;;;;;-1:-1:-1;;;;;6834:55:46;;;6575:98:37::2;::::0;::::2;6816:74:46::0;6906:18;;;6899:34;6789:18;;6575:98:37::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;6683:12:37::2;:17:::0;;;::::2;-1:-1:-1::0;;;6683:17:37::2;::::0;;-1:-1:-1;6696:4:37::2;6408:320:::0;:::o;8984:1087::-;9099:4;1168:7:12;;-1:-1:-1;;;1168:7:12;;;;1411:9;1403:38;;;;-1:-1:-1;;;1403:38:12;;11142:2:46;1403:38:12;;;11124:21:46;11181:2;11161:18;;;11154:30;-1:-1:-1;;;11200:18:46;;;11193:46;11256:18;;1403:38:12;10940:340:46;1403:38:12;5948:12:37::1;::::0;-1:-1:-1;;;5948:12:37;::::1;;;5940:63;;;::::0;-1:-1:-1;;;5940:63:37;;14955:2:46;5940:63:37::1;::::0;::::1;14937:21:46::0;14994:2;14974:18;;;14967:30;15033:34;15013:18;;;15006:62;-1:-1:-1;;;15084:18:46;;;15077:36;15130:19;;5940:63:37::1;14753:402:46::0;5940:63:37::1;9148:18:::2;::::0;-1:-1:-1;;;;;9123:44:37;;::::2;9148:18:::0;::::2;9123:44;9115:81;;;::::0;-1:-1:-1;;;9115:81:37;;16956:2:46;9115:81:37::2;::::0;::::2;16938:21:46::0;16995:2;16975:18;;;16968:30;17034:26;17014:18;;;17007:54;17078:18;;9115:81:37::2;16754:348:46::0;9115:81:37::2;9214:36;9226:13;9241:8;9214:11;:36::i;:::-;:44;;9254:4;9214:44;9206:73;;;::::0;-1:-1:-1;;;9206:73:37;;10390:2:46;9206:73:37::2;::::0;::::2;10372:21:46::0;10429:2;10409:18;;;10402:30;10468:18;10448;;;10441:46;10504:18;;9206:73:37::2;10188:340:46::0;9206:73:37::2;9297:40;::::0;;;;::::2;::::0;::::2;17609:25:46::0;;;9341:10:37::2;::::0;-1:-1:-1;;;;;9297:30:37;::::2;::::0;::::2;::::0;17582:18:46;;9297:40:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;9297:54:37::2;;9289:95;;;::::0;-1:-1:-1;;;9289:95:37;;14240:2:46;9289:95:37::2;::::0;::::2;14222:21:46::0;14279:2;14259:18;;;14252:30;14318;14298:18;;;14291:58;14366:18;;9289:95:37::2;14038:352:46::0;9289:95:37::2;9415:44;::::0;;;;::::2;::::0;::::2;17609:25:46::0;;;9471:4:37::2;::::0;-1:-1:-1;;;;;9415:34:37;::::2;::::0;::::2;::::0;17582:18:46;;9415:44:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;9415:61:37::2;;9394:154;;;::::0;-1:-1:-1;;;9394:154:37;;7979:2:46;9394:154:37::2;::::0;::::2;7961:21:46::0;8018:2;7998:18;;;7991:30;8057:34;8037:18;;;8030:62;8128:16;8108:18;;;8101:44;8162:19;;9394:154:37::2;7777:410:46::0;9394:154:37::2;9558:21;9582:44;9602:13;9617:8;9582:19;:44::i;:::-;9558:68;;9660:1;9644:13;:17;9636:83;;;::::0;-1:-1:-1;;;9636:83:37;;15773:2:46;9636:83:37::2;::::0;::::2;15755:21:46::0;15812:2;15792:18;;;15785:30;15851:34;15831:18;;;15824:62;15922:23;15902:18;;;15895:51;15963:19;;9636:83:37::2;15571:417:46::0;9636:83:37::2;9737:8;::::0;:33:::2;::::0;-1:-1:-1;;;9737:33:37;;9764:4:::2;9737:33;::::0;::::2;5411:74:46::0;9774:13:37;;-1:-1:-1;;;;;9737:8:37::2;::::0;:18:::2;::::0;5384::46;;9737:33:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:50;;9729:109;;;::::0;-1:-1:-1;;;9729:109:37;;11916:2:46;9729:109:37::2;::::0;::::2;11898:21:46::0;11955:2;11935:18;;;11928:30;11994:34;11974:18;;;11967:62;12065:16;12045:18;;;12038:44;12099:19;;9729:109:37::2;11714:410:46::0;9729:109:37::2;9848:76;::::0;;;;9888:10:::2;9848:76;::::0;::::2;6099:34:46::0;9908:4:37::2;6149:18:46::0;;;6142:43;6201:18;;;6194:34;;;-1:-1:-1;;;;;9848:39:37;::::2;::::0;::::2;::::0;6011:18:46;;9848:76:37::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;-1:-1:-1::0;;9934:8:37::2;::::0;:47:::2;::::0;-1:-1:-1;;;;;;9934:8:37::2;::::0;-1:-1:-1;9956:10:37::2;9967:13:::0;9934:21:::2;:47::i;:::-;9996;::::0;;-1:-1:-1;;;;;6117:15:46;;6099:34;;10022:10:37::2;6164:2:46::0;6149:18;;6142:43;6201:18;;;6194:34;;;9996:47:37::2;::::0;6026:2:46;6011:18;9996:47:37::2;;;;;;;-1:-1:-1::0;10060:4:37::2;::::0;8984:1087;-1:-1:-1;;;8984:1087:37:o;6887:947::-;6993:4;1168:7:12;;-1:-1:-1;;;1168:7:12;;;;1411:9;1403:38;;;;-1:-1:-1;;;1403:38:12;;11142:2:46;1403:38:12;;;11124:21:46;11181:2;11161:18;;;11154:30;-1:-1:-1;;;11200:18:46;;;11193:46;11256:18;;1403:38:12;10940:340:46;1403:38:12;5948:12:37::1;::::0;-1:-1:-1;;;5948:12:37;::::1;;;5940:63;;;::::0;-1:-1:-1;;;5940:63:37;;14955:2:46;5940:63:37::1;::::0;::::1;14937:21:46::0;14994:2;14974:18;;;14967:30;15033:34;15013:18;;;15006:62;-1:-1:-1;;;15084:18:46;;;15077:36;15130:19;;5940:63:37::1;14753:402:46::0;5940:63:37::1;7017:17:::2;::::0;:39:::2;::::0;-1:-1:-1;;;7017:39:37;;7045:10:::2;7017:39;::::0;::::2;5411:74:46::0;7060:12:37;;-1:-1:-1;;;;;7017:17:37::2;::::0;:27:::2;::::0;5384:18:46;;7017:39:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:55;;7009:101;;;::::0;-1:-1:-1;;;7009:101:37;;16554:2:46;7009:101:37::2;::::0;::::2;16536:21:46::0;16593:2;16573:18;;;16566:30;16632:34;16612:18;;;16605:62;-1:-1:-1;;;16683:18:46;;;16676:31;16724:19;;7009:101:37::2;16352:397:46::0;7009:101:37::2;7128:17;::::0;:54:::2;::::0;-1:-1:-1;;;7128:54:37;;7156:10:::2;7128:54;::::0;::::2;5731:34:46::0;7176:4:37::2;5781:18:46::0;;;5774:43;7186:12:37;;-1:-1:-1;;;;;7128:17:37::2;::::0;:27:::2;::::0;5643:18:46;;7128:54:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:70;;7120:141;;;::::0;-1:-1:-1;;;7120:141:37;;9145:2:46;7120:141:37::2;::::0;::::2;9127:21:46::0;9184:2;9164:18;;;9157:30;9223:34;9203:18;;;9196:62;9294:28;9274:18;;;9267:56;9340:19;;7120:141:37::2;8943:422:46::0;7120:141:37::2;7271:24;7298:32;7317:12;7298:18;:32::i;:::-;7271:59;;7367:1;7348:16;:20;7340:86;;;::::0;-1:-1:-1;;;7340:86:37;;15773:2:46;7340:86:37::2;::::0;::::2;15755:21:46::0;15812:2;15792:18;;;15785:30;15851:34;15831:18;;;15824:62;15922:23;15902:18;;;15895:51;15963:19;;7340:86:37::2;15571:417:46::0;7340:86:37::2;7444:8;::::0;:33:::2;::::0;-1:-1:-1;;;7444:33:37;;7471:4:::2;7444:33;::::0;::::2;5411:74:46::0;7481:16:37;;-1:-1:-1;;;;;7444:8:37::2;::::0;:18:::2;::::0;5384::46;;7444:33:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;7436:112;;;::::0;-1:-1:-1;;;7436:112:37;;11916:2:46;7436:112:37::2;::::0;::::2;11898:21:46::0;11955:2;11935:18;;;11928:30;11994:34;11974:18;;;11967:62;12065:16;12045:18;;;12038:44;12099:19;;7436:112:37::2;11714:410:46::0;7436:112:37::2;7558:17;::::0;:52:::2;::::0;;;;7581:10:::2;7558:52;::::0;::::2;6816:74:46::0;6906:18;;;6899:34;;;-1:-1:-1;;;;;7558:17:37;;::::2;::::0;:22:::2;::::0;6789:18:46;;7558:52:37::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;7620:8:37::2;::::0;:51:::2;::::0;-1:-1:-1;;;;;7620:8:37::2;7642:10;7654:16:::0;7620:21:::2;:51::i;:::-;7708:17;::::0;7686:71:::2;::::0;;-1:-1:-1;;;;;7708:17:37;;::::2;6099:34:46::0;;7728:10:37::2;6164:2:46::0;6149:18;;6142:43;6201:18;;6194:34;;;7686:71:37::2;::::0;6026:2:46;6011:18;7686:71:37::2;;;;;;;7772:34;::::0;;7777:10:::2;6816:74:46::0;;6921:2;6906:18;;6899:34;;;7772::37::2;::::0;6789:18:46;7772:34:37::2;6642:297:46::0;13852:133:37;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;1145:4:12;1168:7;-1:-1:-1;;;1168:7:12;;;;1669:41:::1;;;::::0;-1:-1:-1;;;1669:41:12;;8394:2:46;1669:41:12::1;::::0;::::1;8376:21:46::0;8433:2;8413:18;;;8406:30;-1:-1:-1;;;8452:18:46;;;8445:50;8512:18;;1669:41:12::1;8192:344:46::0;1669:41:12::1;13938:17:37::2;::::0;:40:::2;::::0;;;;-1:-1:-1;;;;;5429:55:46;;;13938:40:37::2;::::0;::::2;5411:74:46::0;13938:17:37;;::::2;::::0;:35:::2;::::0;5384:18:46;;13938:40:37::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;13852:133:::0;:::o;13611:235::-;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;1145:4:12;1168:7;-1:-1:-1;;;1168:7:12;;;;1669:41:::1;;;::::0;-1:-1:-1;;;1669:41:12;;8394:2:46;1669:41:12::1;::::0;::::1;8376:21:46::0;8433:2;8413:18;;;8406:30;-1:-1:-1;;;8452:18:46;;;8445:50;8512:18;;1669:41:12::1;8192:344:46::0;1669:41:12::1;13735:46:37::2;::::0;-1:-1:-1;;;13735:46:37;;13775:4:::2;13735:46;::::0;::::2;5411:74:46::0;13717:15:37::2;::::0;-1:-1:-1;;;;;13735:31:37;::::2;::::0;::::2;::::0;5384:18:46;;13735:46:37::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13717:64:::0;-1:-1:-1;13791:48:37::2;-1:-1:-1::0;;;;;13791:34:37;::::2;13826:3:::0;13717:64;13791:34:::2;:48::i;12851:384::-:0;1082:7:11;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;12955:8:37::1;::::0;:33:::1;::::0;-1:-1:-1;;;12955:33:37;;12982:4:::1;12955:33;::::0;::::1;5411:74:46::0;12992:6:37;;-1:-1:-1;;;;;12955:8:37::1;::::0;:18:::1;::::0;5384::46;;12955:33:37::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:43;;12947:89;;;::::0;-1:-1:-1;;;12947:89:37;;8743:2:46;12947:89:37::1;::::0;::::1;8725:21:46::0;8782:2;8762:18;;;8755:30;8821:34;8801:18;;;8794:62;-1:-1:-1;;;8872:18:46;;;8865:31;8913:19;;12947:89:37::1;8541:397:46::0;12947:89:37::1;13063:1;13054:6;:10;13046:50;;;::::0;-1:-1:-1;;;13046:50:37;;17309:2:46;13046:50:37::1;::::0;::::1;17291:21:46::0;17348:2;17328:18;;;17321:30;17387:29;17367:18;;;17360:57;17434:18;;13046:50:37::1;17107:351:46::0;13046:50:37::1;13165:26;::::0;;;;::::1;::::0;::::1;17609:25:46::0;;;13143:11:37;;-1:-1:-1;;;;;13165:18:37;::::1;::::0;::::1;::::0;17582::46;;13165:26:37::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;13206:22:37::1;::::0;17609:25:46;;;13206:22:37::1;::::0;17597:2:46;17582:18;13206:22:37::1;;;;;;;12937:298;12851:384:::0;;:::o;1918:198:11:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:11;719:10:25;1248:23:11;1240:68;;;;-1:-1:-1;;;1240:68:11;;13518:2:46;1240:68:11;;;13500:21:46;;;13537:18;;;13530:30;-1:-1:-1;;;;;;;;;;;13576:18:46;;;13569:62;13648:18;;1240:68:11;13316:356:46;1240:68:11;-1:-1:-1;;;;;2006:22:11;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:11;;9572:2:46;1998:73:11::1;::::0;::::1;9554:21:46::0;9611:2;9591:18;;;9584:30;9650:34;9630:18;;;9623:62;9721:8;9701:18;;;9694:36;9747:19;;1998:73:11::1;9370:402:46::0;1998:73:11::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;2110:117:12:-;1145:4;1168:7;-1:-1:-1;;;1168:7:12;;;;1669:41;;;;-1:-1:-1;;;1669:41:12;;8394:2:46;1669:41:12;;;8376:21:46;8433:2;8413:18;;;8406:30;-1:-1:-1;;;8452:18:46;;;8445:50;8512:18;;1669:41:12;8192:344:46;1669:41:12;2178:5:::1;2168:15:::0;;-1:-1:-1;;;;2168:15:12::1;::::0;;2198:22:::1;719:10:25::0;2207:12:12::1;2198:22;::::0;-1:-1:-1;;;;;5429:55:46;;;5411:74;;5399:2;5384:18;2198:22:12::1;;;;;;;2110:117::o:0;4510:332:37:-;4577:7;4596:30;4627:17;;;;;;;;;-1:-1:-1;;;;;4627:17:37;-1:-1:-1;;;;;4627:29:37;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4596:62;;4668:41;4710:35;:33;:35::i;:::-;4668:77;-1:-1:-1;4762:73:37;4668:77;4762:34;:6;4773:22;4762:10;:34::i;:73::-;4755:80;4510:332;-1:-1:-1;;;;4510:332:37:o;912:241:16:-;1077:68;;-1:-1:-1;;;;;6117:15:46;;;1077:68:16;;;6099:34:46;6169:15;;6149:18;;;6142:43;6201:18;;;6194:34;;;1050:96:16;;1070:5;;1100:27;;6011:18:46;;1077:68:16;;;;-1:-1:-1;;1077:68:16;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1077:68:16;;;;;;;;;;1050:19;:96::i;:::-;912:241;;;;:::o;2270:187:11:-;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:11;;;-1:-1:-1;;;;;;2378:17:11;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;1863:115:12:-;1145:4;1168:7;-1:-1:-1;;;1168:7:12;;;;1411:9;1403:38;;;;-1:-1:-1;;;1403:38:12;;11142:2:46;1403:38:12;;;11124:21:46;11181:2;11161:18;;;11154:30;-1:-1:-1;;;11200:18:46;;;11193:46;11256:18;;1403:38:12;10940:340:46;1403:38:12;1922:7:::1;:14:::0;;-1:-1:-1;;;;1922:14:12::1;-1:-1:-1::0;;;1922:14:12::1;::::0;;1951:20:::1;1958:12;719:10:25::0;;640:96;2747:188:37;2815:7;2842:86;2891:36;:34;:36::i;:::-;2842:44;2869:16;:14;:16::i;:::-;2842:22;:20;:22::i;:::-;:26;;:44::i;:86::-;2835:93;;2747:188;:::o;5214:103::-;5261:7;5287:23;5308:1;5295:2;5287:23;:::i;5103:105::-;5151:7;5177:24;5198:2;5185;5177:24;:::i;3451:96:30:-;3509:7;3535:5;3539:1;3535;:5;:::i;:::-;3528:12;3451:96;-1:-1:-1;;;3451:96:30:o;3836:::-;3894:7;3920:5;3924:1;3920;:5;:::i;11255:1141:37:-;11535:40;;-1:-1:-1;;;11535:40:37;;;;;17609:25:46;;;11348:7:37;;11470:13;;11348:7;;-1:-1:-1;;;;;11535:30:37;;;;;17582:18:46;;11535:40:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11494:81;;11585:23;11611:9;:25;;;11585:51;;11646:21;11670:59;11702:9;:26;;;11670:9;:27;;;:31;;:59;;;;:::i;:::-;11831:14;;11997:51;;;;;;;;17609:25:46;;;11646:83:37;;-1:-1:-1;11831:14:37;;;11801:27;;;;-1:-1:-1;;;;;11997:41:37;;;;;17582:18:46;;11997:51:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11937:111;;-1:-1:-1;11937:111:37;-1:-1:-1;11937:111:37;12214:37;;;12210:108;;;12267:40;:15;12287:19;12267;:40::i;:::-;;12210:108;12334:55;12373:15;12334:34;:15;12354:13;12334:19;:34::i;:55::-;12327:62;11255:1141;-1:-1:-1;;;;;;;;;;;;11255:1141:37:o;701:205:16:-;840:58;;-1:-1:-1;;;;;6834:55:46;;840:58:16;;;6816:74:46;6906:18;;;6899:34;;;813:86:16;;833:5;;863:23;;6789:18:46;;840:58:16;6642:297:46;4104:332:37;4171:7;4190:30;4221:17;;;;;;;;;-1:-1:-1;;;;;4221:17:37;-1:-1:-1;;;;;4221:29:37;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4190:62;;4262:41;4304:35;:33;:35::i;:::-;4262:77;-1:-1:-1;4356:73:37;4406:22;4356:45;:6;4262:77;4356:10;:45::i;3207:706:16:-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;-1:-1:-1;;;;;3652:27:16;;;:69;;;;;:::i;:::-;3735:17;;3626:95;;-1:-1:-1;3735:21:16;3731:176;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;-1:-1:-1;;;3811:85:16;;15362:2:46;3811:85:16;;;15344:21:46;15401:2;15381:18;;;15374:30;15440:34;15420:18;;;15413:62;15511:12;15491:18;;;15484:40;15541:19;;3811:85:16;15160:406:46;3625:405:37;3756:18;;;:43;;-1:-1:-1;;;3756:43:37;;3793:4;3756:43;;;5411:74:46;;;;3694:7:37;;;;;;-1:-1:-1;;;;;3756:18:37;;;;:28;;5384:18:46;;3756:43:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3740:59;;3813:6;3809:173;3824:7;3822:1;:9;3809:173;;;3894:18;;;3914:55;;-1:-1:-1;;;3914:55:37;;3961:4;3914:55;;;6816:74:46;;;;6906:18;;;6899:34;;;3856:115:37;;3866:104;;-1:-1:-1;;;;;3894:18:37;;;;3914:38;;6789:18:46;;3914:55:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3866:19;:104::i;:::-;3856:5;;:9;:115::i;:::-;3850:121;-1:-1:-1;3832:3:37;;;;:::i;:::-;;;;3809:173;;;;3998:25;4008:14;:12;:14::i;:::-;3998:5;;:9;:25::i;:::-;3991:32;;;;3625:405;:::o;3248:116::-;3324:8;;:33;;-1:-1:-1;;;3324:33:37;;3351:4;3324:33;;;5411:74:46;3297:7:37;;-1:-1:-1;;;;;3324:8:37;;:18;;5384::46;;3324:33:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;3008:183::-;3063:7;3090:94;3101:82;3168:14;:12;:14::i;:::-;3139:10;;:23;;;;;;;;3101:62;;-1:-1:-1;;;;;3139:10:37;;:21;;:23;;;;;;;;;;;;;;:10;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3101:8;;:33;;-1:-1:-1;;;3101:33:37;;3128:4;3101:33;;;5411:74:46;-1:-1:-1;;;;;3101:8:37;;;;:18;;5384::46;;3101:33:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:37;;:62::i;:82::-;3090:10;:94::i;2741:96:30:-;2799:7;2825:5;2829:1;2825;:5;:::i;3108:96::-;3166:7;3192:5;3196:1;3192;:5;:::i;3861:223:24:-;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;4849:138:37:-;4908:7;4934:46;4945:34;4964:14;:12;:14::i;:::-;4945;:12;:14::i;:34::-;4934:6;;:10;:46::i;4948:499:24:-;5113:12;5170:5;5145:21;:30;;5137:81;;;;-1:-1:-1;;;5137:81:24;;10735:2:46;5137:81:24;;;10717:21:46;10774:2;10754:18;;;10747:30;10813:34;10793:18;;;10786:62;10884:8;10864:18;;;10857:36;10910:19;;5137:81:24;10533:402:46;5137:81:24;-1:-1:-1;;;;;1465:19:24;;;5228:60;;;;-1:-1:-1;;;5228:60:24;;14597:2:46;5228:60:24;;;14579:21:46;14636:2;14616:18;;;14609:30;14675:31;14655:18;;;14648:59;14724:18;;5228:60:24;14395:353:46;5228:60:24;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:24;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:24:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:24;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:24;;;;;;;;:::i;14:247:46:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;181:9;168:23;200:31;225:5;200:31;:::i;266:251::-;336:6;389:2;377:9;368:7;364:23;360:32;357:52;;;405:1;402;395:12;357:52;437:9;431:16;456:31;481:5;456:31;:::i;782:396::-;858:6;866;919:2;907:9;898:7;894:23;890:32;887:52;;;935:1;932;925:12;887:52;974:9;961:23;993:31;1018:5;993:31;:::i;:::-;1043:5;-1:-1:-1;1100:2:46;1085:18;;1072:32;1113:33;1072:32;1113:33;:::i;:::-;1165:7;1155:17;;;782:396;;;;;:::o;1183:1108::-;1278:6;1286;1294;1302;1355:3;1343:9;1334:7;1330:23;1326:33;1323:53;;;1372:1;1369;1362:12;1323:53;1411:9;1398:23;1430:31;1455:5;1430:31;:::i;:::-;1480:5;-1:-1:-1;1504:2:46;1543:18;;;1530:32;1571:33;1530:32;1571:33;:::i;:::-;1623:7;-1:-1:-1;1677:2:46;1662:18;;1649:32;;-1:-1:-1;1732:2:46;1717:18;;1704:32;1755:18;1785:14;;;1782:34;;;1812:1;1809;1802:12;1782:34;1850:6;1839:9;1835:22;1825:32;;1895:7;1888:4;1884:2;1880:13;1876:27;1866:55;;1917:1;1914;1907:12;1866:55;1953:2;1940:16;1975:2;1971;1968:10;1965:36;;;1981:18;;:::i;:::-;2023:53;2066:2;2047:13;;-1:-1:-1;;2043:27:46;2039:36;;2023:53;:::i;:::-;2010:66;;2099:2;2092:5;2085:17;2139:7;2134:2;2129;2125;2121:11;2117:20;2114:33;2111:53;;;2160:1;2157;2150:12;2111:53;2215:2;2210;2206;2202:11;2197:2;2190:5;2186:14;2173:45;2259:1;2254:2;2249;2242:5;2238:14;2234:23;2227:34;;2280:5;2270:15;;;;;1183:1108;;;;;;;:::o;2296:315::-;2364:6;2372;2425:2;2413:9;2404:7;2400:23;2396:32;2393:52;;;2441:1;2438;2431:12;2393:52;2480:9;2467:23;2499:31;2524:5;2499:31;:::i;:::-;2549:5;2601:2;2586:18;;;;2573:32;;-1:-1:-1;;;2296:315:46:o;2616:277::-;2683:6;2736:2;2724:9;2715:7;2711:23;2707:32;2704:52;;;2752:1;2749;2742:12;2704:52;2784:9;2778:16;2837:5;2830:13;2823:21;2816:5;2813:32;2803:60;;2859:1;2856;2849:12;2898:751;2995:6;3048:3;3036:9;3027:7;3023:23;3019:33;3016:53;;;3065:1;3062;3055:12;3016:53;3098:2;3092:9;3140:3;3132:6;3128:16;3210:6;3198:10;3195:22;3174:18;3162:10;3159:34;3156:62;3153:88;;;3221:18;;:::i;:::-;3257:2;3250:22;3294:16;;3319:31;3294:16;3319:31;:::i;:::-;3374:5;3366:6;3359:21;;3434:2;3423:9;3419:18;3413:25;3408:2;3400:6;3396:15;3389:50;3493:2;3482:9;3478:18;3472:25;3467:2;3459:6;3455:15;3448:50;3552:2;3541:9;3537:18;3531:25;3526:2;3518:6;3514:15;3507:50;3612:3;3601:9;3597:19;3591:26;3585:3;3577:6;3573:16;3566:52;3637:6;3627:16;;;2898:751;;;;:::o;3654:180::-;3713:6;3766:2;3754:9;3745:7;3741:23;3737:32;3734:52;;;3782:1;3779;3772:12;3734:52;-1:-1:-1;3805:23:46;;3654:180;-1:-1:-1;3654:180:46:o;3839:184::-;3909:6;3962:2;3950:9;3941:7;3937:23;3933:32;3930:52;;;3978:1;3975;3968:12;3930:52;-1:-1:-1;4001:16:46;;3839:184;-1:-1:-1;3839:184:46:o;4028:315::-;4096:6;4104;4157:2;4145:9;4136:7;4132:23;4128:32;4125:52;;;4173:1;4170;4163:12;4125:52;4209:9;4196:23;4186:33;;4269:2;4258:9;4254:18;4241:32;4282:31;4307:5;4282:31;:::i;4348:383::-;4425:6;4433;4441;4494:2;4482:9;4473:7;4469:23;4465:32;4462:52;;;4510:1;4507;4500:12;4462:52;4546:9;4533:23;4523:33;;4606:2;4595:9;4591:18;4578:32;4619:31;4644:5;4619:31;:::i;:::-;4348:383;;4669:5;;-1:-1:-1;;;4721:2:46;4706:18;;;;4693:32;;4348:383::o;4736:245::-;4815:6;4823;4876:2;4864:9;4855:7;4851:23;4847:32;4844:52;;;4892:1;4889;4882:12;4844:52;-1:-1:-1;;4915:16:46;;4971:2;4956:18;;;4950:25;4915:16;;4950:25;;-1:-1:-1;4736:245:46:o;4986:274::-;5115:3;5153:6;5147:13;5169:53;5215:6;5210:3;5203:4;5195:6;5191:17;5169:53;:::i;:::-;5238:16;;;;;4986:274;-1:-1:-1;;4986:274:46:o;7389:383::-;7538:2;7527:9;7520:21;7501:4;7570:6;7564:13;7613:6;7608:2;7597:9;7593:18;7586:34;7629:66;7688:6;7683:2;7672:9;7668:18;7663:2;7655:6;7651:15;7629:66;:::i;:::-;7756:2;7735:15;-1:-1:-1;;7731:29:46;7716:45;;;;7763:2;7712:54;;7389:383;-1:-1:-1;;7389:383:46:o;17898:275::-;17969:2;17963:9;18034:2;18015:13;;-1:-1:-1;;18011:27:46;17999:40;;18069:18;18054:34;;18090:22;;;18051:62;18048:88;;;18116:18;;:::i;:::-;18152:2;18145:22;17898:275;;-1:-1:-1;17898:275:46:o;18178:128::-;18218:3;18249:1;18245:6;18242:1;18239:13;18236:39;;;18255:18;;:::i;:::-;-1:-1:-1;18291:9:46;;18178:128::o;18311:274::-;18351:1;18377;18367:189;;-1:-1:-1;;;18409:1:46;18402:88;18513:4;18510:1;18503:15;18541:4;18538:1;18531:15;18367:189;-1:-1:-1;18570:9:46;;18311:274::o;18590:422::-;18679:1;18722:5;18679:1;18736:270;18757:7;18747:8;18744:21;18736:270;;;18816:4;18812:1;18808:6;18804:17;18798:4;18795:27;18792:53;;;18825:18;;:::i;:::-;18875:7;18865:8;18861:22;18858:55;;;18895:16;;;;18858:55;18974:22;;;;18934:15;;;;18736:270;;;18740:3;18590:422;;;;;:::o;19017:131::-;19077:5;19106:36;19133:8;19127:4;19202:5;19232:8;19222:80;;-1:-1:-1;19273:1:46;19287:5;;19222:80;19321:4;19311:76;;-1:-1:-1;19358:1:46;19372:5;;19311:76;19403:4;19421:1;19416:59;;;;19489:1;19484:130;;;;19396:218;;19416:59;19446:1;19437:10;;19460:5;;;19484:130;19521:3;19511:8;19508:17;19505:43;;;19528:18;;:::i;:::-;-1:-1:-1;;19584:1:46;19570:16;;19599:5;;19396:218;;19698:2;19688:8;19685:16;19679:3;19673:4;19670:13;19666:36;19660:2;19650:8;19647:16;19642:2;19636:4;19633:12;19629:35;19626:77;19623:159;;;-1:-1:-1;19735:19:46;;;19767:5;;19623:159;19814:34;19839:8;19833:4;19814:34;:::i;:::-;19884:6;19880:1;19876:6;19872:19;19863:7;19860:32;19857:58;;;19895:18;;:::i;:::-;19933:20;;19153:806;-1:-1:-1;;;19153:806:46:o;19964:168::-;20004:7;20070:1;20066;20062:6;20058:14;20055:1;20052:21;20047:1;20040:9;20033:17;20029:45;20026:71;;;20077:18;;:::i;:::-;-1:-1:-1;20117:9:46;;19964:168::o;20137:125::-;20177:4;20205:1;20202;20199:8;20196:34;;;20210:18;;:::i;:::-;-1:-1:-1;20247:9:46;;20137:125::o;20267:258::-;20339:1;20349:113;20363:6;20360:1;20357:13;20349:113;;;20439:11;;;20433:18;20420:11;;;20413:39;20385:2;20378:10;20349:113;;;20480:6;20477:1;20474:13;20471:48;;;-1:-1:-1;;20515:1:46;20497:16;;20490:27;20267:258::o;20530:135::-;20569:3;-1:-1:-1;;20590:17:46;;20587:43;;;20610:18;;:::i;:::-;-1:-1:-1;20657:1:46;20646:13;;20530:135::o;20670:184::-;-1:-1:-1;;;20719:1:46;20712:88;20819:4;20816:1;20809:15;20843:4;20840:1;20833:15;20859:184;-1:-1:-1;;;20908:1:46;20901:88;21008:4;21005:1;20998:15;21032:4;21029:1;21022:15;21048:154;-1:-1:-1;;;;;21127:5:46;21123:54;21116:5;21113:65;21103:93;;21192:1;21189;21182:12"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2764400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "changeAlloyxBronzeAddress(address)": "infinite",
            "changeAlloyxSilverAddress(address)": "infinite",
            "changePoolTokenAddress(address)": "infinite",
            "changeSeniorPoolAddress(address)": "infinite",
            "depositAlloyxBronzeTokens(uint256)": "infinite",
            "depositNFTToken(address,uint256)": "infinite",
            "depositUSDCCoin(uint256)": "infinite",
            "destroy()": "infinite",
            "isValidPool(address,uint256)": "infinite",
            "migrateERC20(address,address)": "infinite",
            "migrateGoldfinchPoolTokens(address)": "infinite",
            "onERC721Received(address,address,uint256,bytes)": "infinite",
            "owner()": "2390",
            "pause()": "31990",
            "paused()": "2366",
            "purchaseJuniorToken(uint256,address,uint256)": "infinite",
            "purchaseSeniorTokens(uint256,address)": "infinite",
            "renounceOwnership()": "infinite",
            "startVaultOperation()": "infinite",
            "transferAlloyxOwnership(address)": "infinite",
            "transferOwnership(address)": "infinite",
            "unpause()": "31936"
          },
          "internal": {
            "USDCtoAlloyxBronze(uint256)": "infinite",
            "alloyMantissa()": "332",
            "alloyxBronzeToUSDC(uint256)": "infinite",
            "fiduMantissa()": "infinite",
            "fiduToUSDC(uint256)": "infinite",
            "getAlloyxBronzeTokenBalanceInUSDC()": "infinite",
            "getFiduBalanceInUSDC()": "infinite",
            "getGFIBalance()": "infinite",
            "getGoldFinchPoolTokenBalanceInUSDC()": "infinite",
            "getJuniorTokenValue(address,uint256)": "infinite",
            "getUSDCBalance()": "infinite",
            "usdcMantissa()": "332"
          }
        },
        "methodIdentifiers": {
          "changeAlloyxBronzeAddress(address)": "07c0cf3d",
          "changeAlloyxSilverAddress(address)": "1a97749d",
          "changePoolTokenAddress(address)": "46040872",
          "changeSeniorPoolAddress(address)": "8682caf8",
          "depositAlloyxBronzeTokens(uint256)": "bb74c058",
          "depositNFTToken(address,uint256)": "b338ad16",
          "depositUSDCCoin(uint256)": "53c98f5a",
          "destroy()": "83197ef0",
          "isValidPool(address,uint256)": "354d3c30",
          "migrateERC20(address,address)": "d905e9b4",
          "migrateGoldfinchPoolTokens(address)": "7c905457",
          "onERC721Received(address,address,uint256,bytes)": "150b7a02",
          "owner()": "8da5cb5b",
          "pause()": "8456cb59",
          "paused()": "5c975abb",
          "purchaseJuniorToken(uint256,address,uint256)": "1b61eb67",
          "purchaseSeniorTokens(uint256,address)": "df16694a",
          "renounceOwnership()": "715018a6",
          "startVaultOperation()": "8d6f4d21",
          "transferAlloyxOwnership(address)": "d8ec0608",
          "transferOwnership(address)": "f2fde38b",
          "unpause()": "3f4ba83a"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxBronzeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alloyxSilverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fiduCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gfiCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_goldFinchTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seniorPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositAlloyx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseJunior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseSenior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxAddress\",\"type\":\"address\"}],\"name\":\"changeAlloyxBronzeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxAddress\",\"type\":\"address\"}],\"name\":\"changeAlloyxSilverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"changePoolTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seniorPool\",\"type\":\"address\"}],\"name\":\"changeSeniorPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAlloyxBronzeTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"depositNFTToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDCCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"isValidPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toAddress\",\"type\":\"address\"}],\"name\":\"migrateGoldfinchPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"}],\"name\":\"purchaseJuniorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"purchaseSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVaultOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAlloyxOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AlloyX\",\"kind\":\"dev\",\"methods\":{\"depositAlloyxBronzeTokens(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of Alloy Tokens\"}},\"depositNFTToken(address,uint256)\":{\"params\":{\"_tokenAddress\":\"NFT Address\",\"_tokenID\":\"NFT ID\"}},\"depositUSDCCoin(uint256)\":{\"params\":{\"_tokenAmount\":\"Number of stable coin\"}},\"isValidPool(address,uint256)\":{\"params\":{\"_tokenAddress\":\"The backer NFT address\",\"_tokenID\":\"The backer NFT id\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AlloyX Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositAlloyxBronzeTokens(uint256)\":{\"notice\":\"An Alloy token holder can deposit their tokens and redeem them for USDC\"},\"depositNFTToken(address,uint256)\":{\"notice\":\"A Junior token holder can deposit their NFT for stable coin\"},\"depositUSDCCoin(uint256)\":{\"notice\":\"A Liquidity Provider can deposit supported stable coins for Alloy Tokens\"},\"isValidPool(address,uint256)\":{\"notice\":\"Using the PoolTokens interface, check if this is a valid pool\"},\"startVaultOperation()\":{\"notice\":\"Initialize by minting the alloy brown tokens to owner\"}},\"notice\":\"Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract uses a pricing oracle to determine the value of the underlying assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alloyx/v2.0/AlloyVault.sol\":\"AlloyVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxTokenBronze.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AlloyxTokenBronze is ERC20, Ownable {\\n    constructor() ERC20(\\\"AlloyxTokenBronze\\\", \\\"ABRNZ\\\") {}\\n\\n    function mint(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function alloyBronze() external returns(bool){\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x06400d0e50a859603bf27e856d64c6986ead1550bd3e1df8f02b3e3ceab3b5e8\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxTokenSilver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AlloyxTokenSilver is ERC20, Ownable {\\n    constructor() ERC20(\\\"AlloyxTokenSilver\\\", \\\"ABSLV\\\") {}\\n\\n    function mint(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function alloySilver() external returns(bool){\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc044f269ebdac3923d3dabf2789a8f3eb7ef1555a88a44a8d1e3824485e1ab18\",\"license\":\"MIT\"},\"contracts/alloyx/v2.0/AlloyVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../AlloyxTokenBronze.sol\\\";\\nimport \\\"../AlloyxTokenSilver.sol\\\";\\n\\nimport \\\"../../goldfinch/interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../goldfinch/interfaces/ITranchedPool.sol\\\";\\nimport \\\"../../goldfinch/interfaces/ISeniorPool.sol\\\";\\n\\n/**\\n * @title AlloyX Vault\\n * @notice Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch\\n * and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract\\n * uses a pricing oracle to determine the value of the underlying assets\\n * @author AlloyX\\n */\\ncontract AlloyVault is ERC721Holder, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bool private vaultStarted;\\n    IERC20 private usdcCoin;\\n    IERC20 private gfiCoin;\\n    IERC20 private fiduCoin;\\n    IPoolTokens private goldFinchPoolToken;\\n    AlloyxTokenBronze private alloyxTokenBronze;\\n    AlloyxTokenSilver private alloyTokenSilver;\\n    ISeniorPool private seniorPool;\\n\\n    event DepositStable(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n    event DepositNFT(address _tokenAddress, address _tokenSender, uint256 _tokenID);\\n    event DepositAlloyx(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n    event PurchaseSenior(uint256 amount);\\n    event PurchaseJunior(uint256 amount);\\n    event Mint(address _tokenReceiver, uint256 _tokenAmount);\\n    event Burn(address _tokenReceiver, uint256 _tokenAmount);\\n\\n    constructor(\\n        address _alloyxBronzeAddress,\\n        address _alloyxSilverAddress,\\n        address _usdcCoinAddress,\\n        address _fiduCoinAddress,\\n        address _gfiCoinAddress,\\n        address _goldFinchTokenAddress,\\n        address _seniorPoolAddress\\n    ) {\\n        alloyxTokenBronze = AlloyxTokenBronze(_alloyxBronzeAddress);\\n        alloyTokenSilver = AlloyxTokenSilver(_alloyxSilverAddress);\\n        usdcCoin = IERC20(_usdcCoinAddress);\\n        gfiCoin = IERC20(_gfiCoinAddress);\\n        fiduCoin = IERC20(_fiduCoinAddress);\\n        goldFinchPoolToken = IPoolTokens(_goldFinchTokenAddress);\\n        seniorPool = ISeniorPool(_seniorPoolAddress);\\n        vaultStarted = false;\\n    }\\n\\n    /**\\n     * @notice Alloy Brown Token Value in terms of USDC\\n     */\\n    function getAlloyxBronzeTokenBalanceInUSDC() internal view returns (uint256)  {\\n        return getFiduBalanceInUSDC().add(getUSDCBalance()).add(getGoldFinchPoolTokenBalanceInUSDC());\\n    }\\n\\n    /**\\n     * @notice Fidu Value in Vault in term of USDC\\n     */\\n    function getFiduBalanceInUSDC() internal view returns (uint256)  {\\n        return fiduToUSDC(fiduCoin.balanceOf(address(this)).mul(seniorPool.sharePrice()).div(fiduMantissa()));\\n    }\\n\\n    /**\\n     * @notice USDC Value in Vault\\n     */\\n    function getUSDCBalance() internal view returns (uint256)  {\\n        return usdcCoin.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice GFI Balance in Vault\\n     */\\n    function getGFIBalance() internal view returns (uint256)  {\\n        return gfiCoin.balanceOf(address(this));\\n    }\\n\\n\\n    /**\\n     * @notice GoldFinch PoolToken Value in Value in term of USDC\\n     */\\n    function getGoldFinchPoolTokenBalanceInUSDC() internal view returns (uint256)  {\\n        uint256 total =0;\\n        uint256 balance=goldFinchPoolToken.balanceOf(address(this));\\n        for(uint i=0;i<balance;i++){\\n            total=total.add(getJuniorTokenValue(address(goldFinchPoolToken),goldFinchPoolToken.tokenOfOwnerByIndex(address(this),i)));\\n        }\\n        return total.mul(usdcMantissa());\\n    }\\n\\n    /**\\n     * @notice Convert Alloyx Bronze to USDC amount\\n     */\\n    function alloyxBronzeToUSDC(uint256 amount) internal view returns (uint256) {\\n        uint256 alloyBronzeTotalSupply=alloyxTokenBronze.totalSupply();\\n        uint256 totalVaultAlloyxBronzeValueInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        return amount.mul(totalVaultAlloyxBronzeValueInUSDC).div(alloyBronzeTotalSupply);\\n    }\\n\\n    /**\\n     * @notice Convert USDC Amount to Alloyx Bronze\\n     */\\n    function USDCtoAlloyxBronze(uint256 amount) internal view returns (uint256) {\\n        uint256 alloyBronzeTotalSupply=alloyxTokenBronze.totalSupply();\\n        uint256 totalVaultAlloyxBronzeValueInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        return amount.mul(alloyBronzeTotalSupply).div(totalVaultAlloyxBronzeValueInUSDC);\\n    }\\n\\n\\n    function fiduToUSDC(uint256 amount) internal pure returns (uint256) {\\n        return amount.div(fiduMantissa().div(usdcMantissa()));\\n    }\\n\\n    function fiduMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(18);\\n    }\\n\\n    function alloyMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(18);\\n    }\\n\\n    function usdcMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(6);\\n    }\\n\\n\\n    function changeAlloyxBronzeAddress(address _alloyxAddress) external onlyOwner {\\n        alloyxTokenBronze = AlloyxTokenBronze(_alloyxAddress);\\n    }\\n\\n    function changeAlloyxSilverAddress(address _alloyxAddress) external onlyOwner {\\n        alloyTokenSilver = AlloyxTokenSilver(_alloyxAddress);\\n    }\\n\\n    function changeSeniorPoolAddress(address _seniorPool) external onlyOwner {\\n        seniorPool = ISeniorPool(_seniorPool);\\n    }\\n\\n    function changePoolTokenAddress(address _poolToken) external onlyOwner {\\n        goldFinchPoolToken = IPoolTokens(_poolToken);\\n    }\\n\\n    modifier whenVaultStarted() {\\n        require(vaultStarted, \\\"Vault has not start accepting deposits\\\");\\n        _;\\n    }\\n\\n    modifier whenVaultNotStarted() {\\n        require(!vaultStarted, \\\"Vault has already start accepting deposits\\\");\\n        _;\\n    }\\n\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Initialize by minting the alloy brown tokens to owner\\n     */\\n    function startVaultOperation() external onlyOwner whenVaultNotStarted returns (bool) {\\n        uint256 totalBalanceInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        alloyxTokenBronze.mint(address(this), totalBalanceInUSDC.mul(alloyMantissa()).div(usdcMantissa()));\\n        vaultStarted=true;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\\n     * @param _tokenAmount Number of Alloy Tokens\\n     */\\n    function depositAlloyxBronzeTokens(uint256 _tokenAmount) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(alloyxTokenBronze.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient alloyx coin\\\");\\n        require(alloyxTokenBronze.allowance(msg.sender, address(this)) >= _tokenAmount, \\\"User has not approved the vault for sufficient alloyx coin\\\");\\n        uint256 amountToWithdraw = alloyxBronzeToUSDC(_tokenAmount);\\n        require(amountToWithdraw > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n        require(usdcCoin.balanceOf(address(this)) >= amountToWithdraw, \\\"The vault does not have sufficient stable coin\\\");\\n        alloyxTokenBronze.burn(msg.sender, amountToWithdraw);\\n        usdcCoin.safeTransfer(msg.sender, amountToWithdraw);\\n        emit DepositAlloyx(address(alloyxTokenBronze), msg.sender, amountToWithdraw);\\n        emit Burn(msg.sender, amountToWithdraw);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\\n     * @param _tokenAmount Number of stable coin\\n     */\\n    function depositUSDCCoin(uint256 _tokenAmount) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(usdcCoin.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient stable coin\\\");\\n        require(\\n            usdcCoin.allowance(msg.sender, address(this)) >= _tokenAmount,\\n            \\\"User has not approved the vault for sufficient stable coin\\\"\\n        );\\n        uint256 amountToMint = USDCtoAlloyxBronze(_tokenAmount);\\n        require(amountToMint > 0, \\\"The amount of alloyx bronze coin to get is not larger than 0\\\");\\n        usdcCoin.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n        alloyxTokenBronze.mint(msg.sender, amountToMint);\\n        emit DepositStable(address(usdcCoin), msg.sender, amountToMint);\\n        emit Mint(msg.sender, amountToMint);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice A Junior token holder can deposit their NFT for stable coin\\n     * @param _tokenAddress NFT Address\\n     * @param _tokenID NFT ID\\n     */\\n    function depositNFTToken(address _tokenAddress, uint256 _tokenID) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(_tokenAddress == address(goldFinchPoolToken), \\\"Not Goldfinch Pool Token\\\");\\n        require(isValidPool(_tokenAddress, _tokenID) == true, \\\"Not a valid pool\\\");\\n        require(IERC721(_tokenAddress).ownerOf(_tokenID) == msg.sender, \\\"User does not own this token\\\");\\n        require(\\n            IERC721(_tokenAddress).getApproved(_tokenID) == address(this),\\n            \\\"User has not approved the vault for this token\\\"\\n        );\\n        uint256 purchasePrice = getJuniorTokenValue(_tokenAddress, _tokenID);\\n        require(purchasePrice > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n        require(usdcCoin.balanceOf(address(this)) >= purchasePrice, \\\"The vault does not have sufficient stable coin\\\");\\n        IERC721(_tokenAddress).safeTransferFrom(msg.sender, address(this), _tokenID);\\n        usdcCoin.safeTransfer(msg.sender,purchasePrice);\\n        emit DepositNFT(_tokenAddress, msg.sender, _tokenID);\\n        return true;\\n    }\\n\\n    function destroy() external onlyOwner whenPaused {\\n        require(usdcCoin.balanceOf(address(this)) == 0, \\\"Balance of stable coin must be 0\\\");\\n        require(fiduCoin.balanceOf(address(this)) == 0, \\\"Balance of Fidu coin must be 0\\\");\\n        require(gfiCoin.balanceOf(address(this)) == 0, \\\"Balance of GFI coin must be 0\\\");\\n\\n        address payable addr = payable(address(owner()));\\n        selfdestruct(addr);\\n    }\\n\\n    /**\\n     * @notice Using the PoolTokens interface, check if this is a valid pool\\n     * @param _tokenAddress The backer NFT address\\n     * @param _tokenID The backer NFT id\\n     */\\n    function isValidPool(address _tokenAddress, uint256 _tokenID) public view returns (bool) {\\n        IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n        IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n        address tranchedPool = tokenInfo.pool;\\n        return poolTokenContract.validPool(tranchedPool);\\n    }\\n\\n    /**\\n     * @notice Using the Goldfinch contracts, read the principal, redeemed and redeemable values\\n     * @param _tokenAddress The backer NFT address\\n     * @param _tokenID The backer NFT id\\n     */\\n    function getJuniorTokenValue(address _tokenAddress, uint256 _tokenID) internal view returns (uint256) {\\n        // first get the amount redeemed and the principal\\n        IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n        IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n        uint256 principalAmount = tokenInfo.principalAmount;\\n        uint256 totalRedeemed = tokenInfo.principalRedeemed.add(tokenInfo.interestRedeemed);\\n\\n        // now get the redeemable values for the given token\\n        address tranchedPoolAddress = tokenInfo.pool;\\n        ITranchedPool tranchedTokenContract = ITranchedPool(tranchedPoolAddress);\\n        (uint256 interestRedeemable, uint256 principalRedeemable) = tranchedTokenContract.availableToWithdraw(_tokenID);\\n        uint256 totalRedeemable = interestRedeemable;\\n        // only add principal here if there have been drawdowns otherwise it overstates the value\\n        if (principalRedeemable < principalAmount) {\\n            totalRedeemable.add(principalRedeemable);\\n        }\\n        return principalAmount.sub(totalRedeemed).add(totalRedeemable);\\n    }\\n\\n    function purchaseJuniorToken(\\n        uint256 amount,\\n        address poolAddress,\\n        uint256 tranche\\n    ) external onlyOwner {\\n        require(usdcCoin.balanceOf(address(this)) >= amount, \\\"Vault has insufficent stable coin\\\");\\n        require(amount > 0, \\\"Must deposit more than zero\\\");\\n        ITranchedPool juniorPool = ITranchedPool(poolAddress);\\n        juniorPool.deposit(amount, tranche);\\n        emit PurchaseJunior(amount);\\n    }\\n\\n    function purchaseSeniorTokens(uint256 amount, address poolAddress) external onlyOwner {\\n        require(usdcCoin.balanceOf(address(this)) >= amount, \\\"Vault has insufficent stable coin\\\");\\n        require(amount > 0, \\\"Must deposit more than zero\\\");\\n        ISeniorPool seniorPool = ISeniorPool(poolAddress);\\n        seniorPool.deposit(amount);\\n        emit PurchaseSenior(amount);\\n    }\\n\\n    function migrateGoldfinchPoolTokens(\\n        address payable _toAddress\\n    ) external onlyOwner whenPaused {\\n        uint256 balance=goldFinchPoolToken.balanceOf(address(this));\\n        for(uint i=0;i<balance;i++){\\n            goldFinchPoolToken.safeTransferFrom(address(this), _toAddress, goldFinchPoolToken.tokenOfOwnerByIndex(address(this),i));\\n        }\\n    }\\n\\n    function migrateERC20(address _tokenAddress, address payable _to) external onlyOwner whenPaused {\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n        IERC20(_tokenAddress).safeTransfer(_to, balance);\\n    }\\n\\n    function transferAlloyxOwnership(address _to) external onlyOwner whenPaused {\\n        alloyxTokenBronze.transferOwnership(_to);\\n    }\\n}\\n\",\"keccak256\":\"0x9cbe5d8509b490632b87161db6fdb49b0c37c7469c499cbd9876387f99c2851a\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfea45d04903141890eeb3739f2481a1b3fe94cdfa58457e7d2fe9c962a112725\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPoolTokens is IERC721,IERC721Enumerable {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaee8c8d68f48c40050e4d1e5fca57ab3edecec79e9a607aa811a149f371cd168\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ISeniorPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x1049267cb4e91fd7045df567ee4a5be48101d4ea60f9bc45084f17adc85ad774\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/ITranchedPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n}\\n\",\"keccak256\":\"0x34ab69f9ef19409cdadf831a915b65889928d9a89bc4cb28cd9084cef7d94db8\",\"license\":\"MIT\"},\"contracts/goldfinch/interfaces/IV2CreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\",\"keccak256\":\"0xb5211aa4a83a69c7ebdb3a4f21fbd432c809c1e1f3406295287f6628bc0e7205\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 2183,
            "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2298,
            "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
            "label": "_paused",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6955,
            "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
            "label": "vaultStarted",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6958,
            "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
            "label": "usdcCoin",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)3038"
          },
          {
            "astId": 6961,
            "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
            "label": "gfiCoin",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)3038"
          },
          {
            "astId": 6964,
            "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
            "label": "fiduCoin",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)3038"
          },
          {
            "astId": 6967,
            "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
            "label": "goldFinchPoolToken",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IPoolTokens)8369"
          },
          {
            "astId": 6970,
            "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
            "label": "alloyxTokenBronze",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(AlloyxTokenBronze)5729"
          },
          {
            "astId": 6973,
            "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
            "label": "alloyTokenSilver",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(AlloyxTokenSilver)5792"
          },
          {
            "astId": 6976,
            "contract": "contracts/alloyx/v2.0/AlloyVault.sol:AlloyVault",
            "label": "seniorPool",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(ISeniorPool)8465"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(AlloyxTokenBronze)5729": {
            "encoding": "inplace",
            "label": "contract AlloyxTokenBronze",
            "numberOfBytes": "20"
          },
          "t_contract(AlloyxTokenSilver)5792": {
            "encoding": "inplace",
            "label": "contract AlloyxTokenSilver",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20)3038": {
            "encoding": "inplace",
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(IPoolTokens)8369": {
            "encoding": "inplace",
            "label": "contract IPoolTokens",
            "numberOfBytes": "20"
          },
          "t_contract(ISeniorPool)8465": {
            "encoding": "inplace",
            "label": "contract ISeniorPool",
            "numberOfBytes": "20"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "depositAlloyxBronzeTokens(uint256)": {
            "notice": "An Alloy token holder can deposit their tokens and redeem them for USDC"
          },
          "depositNFTToken(address,uint256)": {
            "notice": "A Junior token holder can deposit their NFT for stable coin"
          },
          "depositUSDCCoin(uint256)": {
            "notice": "A Liquidity Provider can deposit supported stable coins for Alloy Tokens"
          },
          "isValidPool(address,uint256)": {
            "notice": "Using the PoolTokens interface, check if this is a valid pool"
          },
          "startVaultOperation()": {
            "notice": "Initialize by minting the alloy brown tokens to owner"
          }
        },
        "notice": "Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract uses a pricing oracle to determine the value of the underlying assets",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/alloyx/AlloyxTokenBronze.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AlloyxTokenBronze is ERC20, Ownable {\\n    constructor() ERC20(\\\"AlloyxTokenBronze\\\", \\\"ABRNZ\\\") {}\\n\\n    function mint(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function alloyBronze() external returns(bool){\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/alloyx/v2.0/AlloyVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../AlloyxTokenBronze.sol\\\";\\nimport \\\"../AlloyxTokenSilver.sol\\\";\\n\\nimport \\\"../../goldfinch/interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../goldfinch/interfaces/ITranchedPool.sol\\\";\\nimport \\\"../../goldfinch/interfaces/ISeniorPool.sol\\\";\\n\\n/**\\n * @title AlloyX Vault\\n * @notice Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch\\n * and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract\\n * uses a pricing oracle to determine the value of the underlying assets\\n * @author AlloyX\\n */\\ncontract AlloyVault is ERC721Holder, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bool private vaultStarted;\\n    IERC20 private usdcCoin;\\n    IERC20 private gfiCoin;\\n    IERC20 private fiduCoin;\\n    IPoolTokens private goldFinchPoolToken;\\n    AlloyxTokenBronze private alloyxTokenBronze;\\n    AlloyxTokenSilver private alloyTokenSilver;\\n    ISeniorPool private seniorPool;\\n\\n    event DepositStable(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n    event DepositNFT(address _tokenAddress, address _tokenSender, uint256 _tokenID);\\n    event DepositAlloyx(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n    event PurchaseSenior(uint256 amount);\\n    event PurchaseJunior(uint256 amount);\\n    event Mint(address _tokenReceiver, uint256 _tokenAmount);\\n    event Burn(address _tokenReceiver, uint256 _tokenAmount);\\n\\n    constructor(\\n        address _alloyxBronzeAddress,\\n        address _alloyxSilverAddress,\\n        address _usdcCoinAddress,\\n        address _fiduCoinAddress,\\n        address _gfiCoinAddress,\\n        address _goldFinchTokenAddress,\\n        address _seniorPoolAddress\\n    ) {\\n        alloyxTokenBronze = AlloyxTokenBronze(_alloyxBronzeAddress);\\n        alloyTokenSilver = AlloyxTokenSilver(_alloyxSilverAddress);\\n        usdcCoin = IERC20(_usdcCoinAddress);\\n        gfiCoin = IERC20(_gfiCoinAddress);\\n        fiduCoin = IERC20(_fiduCoinAddress);\\n        goldFinchPoolToken = IPoolTokens(_goldFinchTokenAddress);\\n        seniorPool = ISeniorPool(_seniorPoolAddress);\\n        vaultStarted = false;\\n    }\\n\\n    /**\\n     * @notice Alloy Brown Token Value in terms of USDC\\n     */\\n    function getAlloyxBronzeTokenBalanceInUSDC() internal view returns (uint256)  {\\n        return getFiduBalanceInUSDC().add(getUSDCBalance()).add(getGoldFinchPoolTokenBalanceInUSDC());\\n    }\\n\\n    /**\\n     * @notice Fidu Value in Vault in term of USDC\\n     */\\n    function getFiduBalanceInUSDC() internal view returns (uint256)  {\\n        return fiduToUSDC(fiduCoin.balanceOf(address(this)).mul(seniorPool.sharePrice()).div(fiduMantissa()));\\n    }\\n\\n    /**\\n     * @notice USDC Value in Vault\\n     */\\n    function getUSDCBalance() internal view returns (uint256)  {\\n        return usdcCoin.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice GFI Balance in Vault\\n     */\\n    function getGFIBalance() internal view returns (uint256)  {\\n        return gfiCoin.balanceOf(address(this));\\n    }\\n\\n\\n    /**\\n     * @notice GoldFinch PoolToken Value in Value in term of USDC\\n     */\\n    function getGoldFinchPoolTokenBalanceInUSDC() internal view returns (uint256)  {\\n        uint256 total =0;\\n        uint256 balance=goldFinchPoolToken.balanceOf(address(this));\\n        for(uint i=0;i<balance;i++){\\n            total=total.add(getJuniorTokenValue(address(goldFinchPoolToken),goldFinchPoolToken.tokenOfOwnerByIndex(address(this),i)));\\n        }\\n        return total.mul(usdcMantissa());\\n    }\\n\\n    /**\\n     * @notice Convert Alloyx Bronze to USDC amount\\n     */\\n    function alloyxBronzeToUSDC(uint256 amount) internal view returns (uint256) {\\n        uint256 alloyBronzeTotalSupply=alloyxTokenBronze.totalSupply();\\n        uint256 totalVaultAlloyxBronzeValueInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        return amount.mul(totalVaultAlloyxBronzeValueInUSDC).div(alloyBronzeTotalSupply);\\n    }\\n\\n    /**\\n     * @notice Convert USDC Amount to Alloyx Bronze\\n     */\\n    function USDCtoAlloyxBronze(uint256 amount) internal view returns (uint256) {\\n        uint256 alloyBronzeTotalSupply=alloyxTokenBronze.totalSupply();\\n        uint256 totalVaultAlloyxBronzeValueInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        return amount.mul(alloyBronzeTotalSupply).div(totalVaultAlloyxBronzeValueInUSDC);\\n    }\\n\\n\\n    function fiduToUSDC(uint256 amount) internal pure returns (uint256) {\\n        return amount.div(fiduMantissa().div(usdcMantissa()));\\n    }\\n\\n    function fiduMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(18);\\n    }\\n\\n    function alloyMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(18);\\n    }\\n\\n    function usdcMantissa() internal pure returns (uint256) {\\n        return uint256(10)**uint256(6);\\n    }\\n\\n\\n    function changeAlloyxBronzeAddress(address _alloyxAddress) external onlyOwner {\\n        alloyxTokenBronze = AlloyxTokenBronze(_alloyxAddress);\\n    }\\n\\n    function changeAlloyxSilverAddress(address _alloyxAddress) external onlyOwner {\\n        alloyTokenSilver = AlloyxTokenSilver(_alloyxAddress);\\n    }\\n\\n    function changeSeniorPoolAddress(address _seniorPool) external onlyOwner {\\n        seniorPool = ISeniorPool(_seniorPool);\\n    }\\n\\n    function changePoolTokenAddress(address _poolToken) external onlyOwner {\\n        goldFinchPoolToken = IPoolTokens(_poolToken);\\n    }\\n\\n    modifier whenVaultStarted() {\\n        require(vaultStarted, \\\"Vault has not start accepting deposits\\\");\\n        _;\\n    }\\n\\n    modifier whenVaultNotStarted() {\\n        require(!vaultStarted, \\\"Vault has already start accepting deposits\\\");\\n        _;\\n    }\\n\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Initialize by minting the alloy brown tokens to owner\\n     */\\n    function startVaultOperation() external onlyOwner whenVaultNotStarted returns (bool) {\\n        uint256 totalBalanceInUSDC=getAlloyxBronzeTokenBalanceInUSDC();\\n        alloyxTokenBronze.mint(address(this), totalBalanceInUSDC.mul(alloyMantissa()).div(usdcMantissa()));\\n        vaultStarted=true;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\\n     * @param _tokenAmount Number of Alloy Tokens\\n     */\\n    function depositAlloyxBronzeTokens(uint256 _tokenAmount) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(alloyxTokenBronze.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient alloyx coin\\\");\\n        require(alloyxTokenBronze.allowance(msg.sender, address(this)) >= _tokenAmount, \\\"User has not approved the vault for sufficient alloyx coin\\\");\\n        uint256 amountToWithdraw = alloyxBronzeToUSDC(_tokenAmount);\\n        require(amountToWithdraw > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n        require(usdcCoin.balanceOf(address(this)) >= amountToWithdraw, \\\"The vault does not have sufficient stable coin\\\");\\n        alloyxTokenBronze.burn(msg.sender, amountToWithdraw);\\n        usdcCoin.safeTransfer(msg.sender, amountToWithdraw);\\n        emit DepositAlloyx(address(alloyxTokenBronze), msg.sender, amountToWithdraw);\\n        emit Burn(msg.sender, amountToWithdraw);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\\n     * @param _tokenAmount Number of stable coin\\n     */\\n    function depositUSDCCoin(uint256 _tokenAmount) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(usdcCoin.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient stable coin\\\");\\n        require(\\n            usdcCoin.allowance(msg.sender, address(this)) >= _tokenAmount,\\n            \\\"User has not approved the vault for sufficient stable coin\\\"\\n        );\\n        uint256 amountToMint = USDCtoAlloyxBronze(_tokenAmount);\\n        require(amountToMint > 0, \\\"The amount of alloyx bronze coin to get is not larger than 0\\\");\\n        usdcCoin.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n        alloyxTokenBronze.mint(msg.sender, amountToMint);\\n        emit DepositStable(address(usdcCoin), msg.sender, amountToMint);\\n        emit Mint(msg.sender, amountToMint);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice A Junior token holder can deposit their NFT for stable coin\\n     * @param _tokenAddress NFT Address\\n     * @param _tokenID NFT ID\\n     */\\n    function depositNFTToken(address _tokenAddress, uint256 _tokenID) external whenNotPaused whenVaultStarted returns (bool) {\\n        require(_tokenAddress == address(goldFinchPoolToken), \\\"Not Goldfinch Pool Token\\\");\\n        require(isValidPool(_tokenAddress, _tokenID) == true, \\\"Not a valid pool\\\");\\n        require(IERC721(_tokenAddress).ownerOf(_tokenID) == msg.sender, \\\"User does not own this token\\\");\\n        require(\\n            IERC721(_tokenAddress).getApproved(_tokenID) == address(this),\\n            \\\"User has not approved the vault for this token\\\"\\n        );\\n        uint256 purchasePrice = getJuniorTokenValue(_tokenAddress, _tokenID);\\n        require(purchasePrice > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n        require(usdcCoin.balanceOf(address(this)) >= purchasePrice, \\\"The vault does not have sufficient stable coin\\\");\\n        IERC721(_tokenAddress).safeTransferFrom(msg.sender, address(this), _tokenID);\\n        usdcCoin.safeTransfer(msg.sender,purchasePrice);\\n        emit DepositNFT(_tokenAddress, msg.sender, _tokenID);\\n        return true;\\n    }\\n\\n    function destroy() external onlyOwner whenPaused {\\n        require(usdcCoin.balanceOf(address(this)) == 0, \\\"Balance of stable coin must be 0\\\");\\n        require(fiduCoin.balanceOf(address(this)) == 0, \\\"Balance of Fidu coin must be 0\\\");\\n        require(gfiCoin.balanceOf(address(this)) == 0, \\\"Balance of GFI coin must be 0\\\");\\n\\n        address payable addr = payable(address(owner()));\\n        selfdestruct(addr);\\n    }\\n\\n    /**\\n     * @notice Using the PoolTokens interface, check if this is a valid pool\\n     * @param _tokenAddress The backer NFT address\\n     * @param _tokenID The backer NFT id\\n     */\\n    function isValidPool(address _tokenAddress, uint256 _tokenID) public view returns (bool) {\\n        IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n        IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n        address tranchedPool = tokenInfo.pool;\\n        return poolTokenContract.validPool(tranchedPool);\\n    }\\n\\n    /**\\n     * @notice Using the Goldfinch contracts, read the principal, redeemed and redeemable values\\n     * @param _tokenAddress The backer NFT address\\n     * @param _tokenID The backer NFT id\\n     */\\n    function getJuniorTokenValue(address _tokenAddress, uint256 _tokenID) internal view returns (uint256) {\\n        // first get the amount redeemed and the principal\\n        IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n        IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n        uint256 principalAmount = tokenInfo.principalAmount;\\n        uint256 totalRedeemed = tokenInfo.principalRedeemed.add(tokenInfo.interestRedeemed);\\n\\n        // now get the redeemable values for the given token\\n        address tranchedPoolAddress = tokenInfo.pool;\\n        ITranchedPool tranchedTokenContract = ITranchedPool(tranchedPoolAddress);\\n        (uint256 interestRedeemable, uint256 principalRedeemable) = tranchedTokenContract.availableToWithdraw(_tokenID);\\n        uint256 totalRedeemable = interestRedeemable;\\n        // only add principal here if there have been drawdowns otherwise it overstates the value\\n        if (principalRedeemable < principalAmount) {\\n            totalRedeemable.add(principalRedeemable);\\n        }\\n        return principalAmount.sub(totalRedeemed).add(totalRedeemable);\\n    }\\n\\n    function purchaseJuniorToken(\\n        uint256 amount,\\n        address poolAddress,\\n        uint256 tranche\\n    ) external onlyOwner {\\n        require(usdcCoin.balanceOf(address(this)) >= amount, \\\"Vault has insufficent stable coin\\\");\\n        require(amount > 0, \\\"Must deposit more than zero\\\");\\n        ITranchedPool juniorPool = ITranchedPool(poolAddress);\\n        juniorPool.deposit(amount, tranche);\\n        emit PurchaseJunior(amount);\\n    }\\n\\n    function purchaseSeniorTokens(uint256 amount, address poolAddress) external onlyOwner {\\n        require(usdcCoin.balanceOf(address(this)) >= amount, \\\"Vault has insufficent stable coin\\\");\\n        require(amount > 0, \\\"Must deposit more than zero\\\");\\n        ISeniorPool seniorPool = ISeniorPool(poolAddress);\\n        seniorPool.deposit(amount);\\n        emit PurchaseSenior(amount);\\n    }\\n\\n    function migrateGoldfinchPoolTokens(\\n        address payable _toAddress\\n    ) external onlyOwner whenPaused {\\n        uint256 balance=goldFinchPoolToken.balanceOf(address(this));\\n        for(uint i=0;i<balance;i++){\\n            goldFinchPoolToken.safeTransferFrom(address(this), _toAddress, goldFinchPoolToken.tokenOfOwnerByIndex(address(this),i));\\n        }\\n    }\\n\\n    function migrateERC20(address _tokenAddress, address payable _to) external onlyOwner whenPaused {\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n        IERC20(_tokenAddress).safeTransfer(_to, balance);\\n    }\\n\\n    function transferAlloyxOwnership(address _to) external onlyOwner whenPaused {\\n        alloyxTokenBronze.transferOwnership(_to);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\n    },\n    \"contracts/alloyx/AlloyxTokenSilver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AlloyxTokenSilver is ERC20, Ownable {\\n    constructor() ERC20(\\\"AlloyxTokenSilver\\\", \\\"ABSLV\\\") {}\\n\\n    function mint(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function alloySilver() external returns(bool){\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/goldfinch/interfaces/IPoolTokens.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPoolTokens is IERC721,IERC721Enumerable {\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function validPool(address sender) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n}\\n\"\n    },\n    \"contracts/goldfinch/interfaces/ITranchedPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IV2CreditLine.sol\\\";\\n\\nabstract contract ITranchedPool {\\n  IV2CreditLine public creditLine;\\n  uint256 public createdAt;\\n\\n  enum Tranches {\\n    Reserved,\\n    Senior,\\n    Junior\\n  }\\n\\n  struct TrancheInfo {\\n    uint256 id;\\n    uint256 principalDeposited;\\n    uint256 principalSharePrice;\\n    uint256 interestSharePrice;\\n    uint256 lockedUntil;\\n  }\\n\\n  struct PoolSlice {\\n    TrancheInfo seniorTranche;\\n    TrancheInfo juniorTranche;\\n    uint256 totalInterestAccrued;\\n    uint256 principalDeployed;\\n  }\\n\\n  struct SliceInfo {\\n    uint256 reserveFeePercent;\\n    uint256 interestAccrued;\\n    uint256 principalAccrued;\\n  }\\n\\n  struct ApplyResult {\\n    uint256 interestRemaining;\\n    uint256 principalRemaining;\\n    uint256 reserveDeduction;\\n    uint256 oldInterestSharePrice;\\n    uint256 oldPrincipalSharePrice;\\n  }\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public virtual;\\n\\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\\n\\n  function pay(uint256 amount) external virtual;\\n\\n  function lockJuniorCapital() external virtual;\\n\\n  function lockPool() external virtual;\\n\\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\\n\\n  function totalJuniorDeposits() external view virtual returns (uint256);\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function setFundableAt(uint256 timestamp) external virtual;\\n\\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\\n\\n  function assess() external virtual;\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 tokenId);\\n\\n  function availableToWithdraw(uint256 tokenId)\\n    external\\n    view\\n    virtual\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMax(uint256 tokenId)\\n    external\\n    virtual\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external virtual;\\n}\\n\"\n    },\n    \"contracts/goldfinch/interfaces/ISeniorPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITranchedPool.sol\\\";\\n\\nabstract contract ISeniorPool {\\n  uint256 public sharePrice;\\n  uint256 public totalLoansOutstanding;\\n  uint256 public totalWritedowns;\\n\\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual returns (uint256 depositShares);\\n\\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\\n\\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\\n\\n  function sweepToCompound() public virtual;\\n\\n  function sweepFromCompound() public virtual;\\n\\n  function invest(ITranchedPool pool) public virtual;\\n\\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\\n\\n  function redeem(uint256 tokenId) public virtual;\\n\\n  function writedown(uint256 tokenId) public virtual;\\n\\n  function calculateWritedown(uint256 tokenId) public view virtual returns (uint256 writedownAmount);\\n\\n  function assets() public view virtual returns (uint256);\\n\\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/goldfinch/interfaces/IV2CreditLine.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ICreditLine.sol\\\";\\n\\nabstract contract IV2CreditLine is ICreditLine {\\n  function principal() external view virtual returns (uint256);\\n\\n  function totalInterestAccrued() external view virtual returns (uint256);\\n\\n  function termStartTime() external view virtual returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external virtual;\\n\\n  function setMaxLimit(uint256 newAmount) external virtual;\\n\\n  function setBalance(uint256 newBalance) external virtual;\\n\\n  function setPrincipal(uint256 _principal) external virtual;\\n\\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\\n\\n  function drawdown(uint256 amount) external virtual;\\n\\n  function assess()\\n    external\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function initialize(\\n    address _config,\\n    address owner,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays\\n  ) public virtual;\\n\\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\\n\\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\\n\\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\\n\\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\\n\\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\\n\\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\\n\\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\\n\\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\\n\\n  function updateGoldfinchConfig() external virtual;\\n}\\n\"\n    },\n    \"contracts/goldfinch/interfaces/ICreditLine.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICreditLine {\\n  function borrower() external view returns (address);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function paymentPeriodInDays() external view returns (uint256);\\n\\n  function principalGracePeriodInDays() external view returns (uint256);\\n\\n  function termInDays() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  // Accounting variables\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/goldfinch/protocol/core/SeniorPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\n\\nimport \\\"../../interfaces/ISeniorPool.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../../alloyx/FIDU.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title Goldfinch's SeniorPool contract\\n * @notice Main entry point for senior LPs (a.k.a. capital providers)\\n *  Automatically invests across borrower pools using an adjustable strategy.\\n * @author Goldfinch\\n */\\ncontract SeniorPool is ISeniorPool {\\n  using SafeMath for uint256;\\n  FIDU private fiduCoin;\\n  IERC20 private usdcCoin;\\n\\n  event DepositMade(address indexed capitalProvider, uint256 amount, uint256 shares);\\n\\n  constructor(uint256 _sharePrice,address _fiduCoinAddress,address _usdcCoinAddress) public {\\n    sharePrice = _sharePrice;\\n    fiduCoin = FIDU(_fiduCoinAddress);\\n    usdcCoin=IERC20(_usdcCoinAddress);\\n  }\\n\\n  function setSharePrice(uint256 _sharePrice) external{\\n    sharePrice = _sharePrice;\\n  }\\n\\n  /**\\n   * @notice Deposits `amount` USDC from msg.sender into the SeniorPool, and grants you the\\n   *  equivalent value of FIDU tokens\\n   * @param amount The amount of USDC to deposit\\n   */\\n  function deposit(uint256 amount) public override returns (uint256 depositShares) {\\n    require(amount > 0, \\\"Must deposit more than zero\\\");\\n    // Check if the amount of new shares to be added is within limits\\n    depositShares = getNumShares(amount);\\n    emit DepositMade(msg.sender, amount, depositShares);\\n    bool success = doUSDCTransfer(msg.sender, address(this), amount);\\n    require(success, \\\"Failed to transfer for deposit\\\");\\n    fiduCoin.mint(msg.sender, depositShares);\\n    return depositShares;\\n  }\\n\\n  function doUSDCTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal returns (bool) {\\n    require(to != address(0), \\\"Can't send to zero address\\\");\\n    return usdcCoin.transferFrom(from, to, amount);\\n  }\\n\\n\\n  function depositWithPermit(\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override  returns (uint256 depositShares){return 0;}\\n\\n  function withdraw(uint256 usdcAmount) external override  returns (uint256 amount){return 0;}\\n\\n  function withdrawInFidu(uint256 fiduAmount) external override  returns (uint256 amount){return 0;}\\n\\n  function sweepToCompound() public override {}\\n\\n  function sweepFromCompound() public override {}\\n\\n  function invest(ITranchedPool pool) public override {}\\n\\n  function estimateInvestment(ITranchedPool pool) public view override  returns (uint256){return 0;}\\n\\n  function redeem(uint256 tokenId) public override{}\\n\\n  function writedown(uint256 tokenId) public override{}\\n\\n  function calculateWritedown(uint256 tokenId) public view override returns (uint256 writedownAmount){return 0;}\\n\\n  function assets() public view override returns (uint256){return 0;}\\n\\n  /**\\n   * @notice Converts and USDC amount to FIDU amount\\n   * @param amount USDC amount to convert to FIDU\\n   */\\n  function getNumShares(uint256 amount) public view override returns (uint256) {\\n    return usdcToFidu(amount).mul(fiduMantissa()).div(sharePrice);\\n  }\\n\\n  function usdcToFidu(uint256 amount) internal pure returns (uint256) {\\n    return amount.mul(fiduMantissa()).div(usdcMantissa());\\n  }\\n\\n  function totalShares() internal view returns (uint256) {\\n    return fiduCoin.totalSupply();\\n  }\\n\\n  function fiduMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(18);\\n  }\\n\\n  function usdcMantissa() internal pure returns (uint256) {\\n    return uint256(10)**uint256(6);\\n  }\\n}\\n\"\n    },\n    \"contracts/alloyx/FIDU.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FIDU is ERC20, Ownable {\\n    function burn(address account, uint256 amount) onlyOwner external returns(bool){\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function mint(address account, uint256 amount) onlyOwner external returns(bool){\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function fidu() external returns(bool){\\n        return true;\\n    }\\n\\n    constructor() ERC20(\\\"Fidu\\\", \\\"FIDU\\\") {\\n    }\\n}\\n\"\n    },\n    \"contracts/goldfinch/protocol/core/TranchedPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\n\\nimport \\\"../../interfaces/ITranchedPool.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ncontract TranchedPool is  ITranchedPool {\\n  IPoolTokens private poolToken;\\n  IERC20 private usdcCoin;\\n\\n  constructor(address _poolTokenAddress,address _usdcCoinAddress) public {\\n    poolToken = IPoolTokens(_poolTokenAddress);\\n    usdcCoin=IERC20(_usdcCoinAddress);\\n  }\\n\\n  event DepositMade(address indexed owner, uint256 indexed tranche, uint256 indexed tokenId, uint256 amount);\\n\\n  function initialize(\\n    address _config,\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256 _principalGracePeriodInDays,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) public override{}\\n\\n\\n  function setPoolTokens(address _poolTokens) external{\\n    poolToken = IPoolTokens(_poolTokens);\\n  }\\n\\n  function getTranche(uint256 tranche) external view override returns (TrancheInfo memory){return TrancheInfo(0,0,0,0,0);}\\n\\n  function pay(uint256 amount) external override{}\\n\\n  function lockJuniorCapital() external override{}\\n\\n  function lockPool() external override{}\\n\\n  function initializeNextSlice(uint256 _fundableAt) external override{}\\n\\n  function totalJuniorDeposits() external view override returns (uint256){return 0;}\\n\\n  function drawdown(uint256 amount) external override{}\\n\\n  function setFundableAt(uint256 timestamp) external override{}\\n\\n  function deposit(uint256 tranche, uint256 amount) external override returns (uint256 tokenId){\\n    require(amount > 0, \\\"Must deposit > zero\\\");\\n    IPoolTokens.MintParams memory params = IPoolTokens.MintParams({tranche: tranche, principalAmount: amount*100000});\\n    tokenId = poolToken.mint(params, msg.sender);\\n    usdcCoin.transferFrom(msg.sender, address(this), amount);\\n    emit DepositMade(msg.sender, tranche, tokenId, amount);\\n    return tokenId;\\n  }\\n\\n  function assess() external override{}\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override returns (uint256 tokenId){return 0;}\\n\\n  function withdraw(uint256 tokenId, uint256 amount)\\n  external\\n  override\\n  returns (uint256 interestWithdrawn, uint256 principalWithdrawn){return (0,0);}\\n\\n  function withdrawMax(uint256 tokenId)\\n  external\\n  override\\n  returns (uint256 interestWithdrawn, uint256 principalWithdrawn){return (0,0);}\\n\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external override{}\\n\\n  /**\\n   * @notice Determines the amount of interest and principal redeemable by a particular tokenId\\n   * @param tokenId The token representing the position\\n   * @return interestRedeemable The interest available to redeem\\n   * @return principalRedeemable The principal available to redeem\\n   */\\n  function availableToWithdraw(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (uint256 interestRedeemable, uint256 principalRedeemable)\\n  {\\n    return (tokenId*1000,tokenId*10000);\\n  }\\n}\\n\"\n    },\n    \"contracts/goldfinch/protocol/core/PoolTokens.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../interfaces/ITranchedPool.sol\\\";\\nimport \\\"../../interfaces/IPoolTokens.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\n/**\\n * @title PoolTokens\\n * @notice PoolTokens is an ERC721 compliant contract, which can represent\\n *  junior tranche or senior tranche shares of any of the borrower pools.\\n * @author Goldfinch\\n */\\n\\ncontract PoolTokens is ERC721Enumerable,IPoolTokens {\\n  struct PoolInfo {\\n    uint256 totalMinted;\\n    uint256 totalPrincipalRedeemed;\\n    bool created;\\n  }\\n\\n  uint256 lastTokenId=0;\\n\\n  // tokenId => tokenInfo\\n  mapping(uint256 => TokenInfo) public tokens;\\n  // poolAddress => poolInfo\\n  mapping(address => PoolInfo) public pools;\\n\\n  address poolAddress;\\n\\n\\n  constructor(address _poolAddress) ERC721(\\\"PoolTokens\\\", \\\"PTN\\\"){\\n    poolAddress = _poolAddress;\\n  }\\n\\n\\n  /**\\n   * @notice Called by pool to create a debt position in a particular tranche and amount\\n   * @param params Struct containing the tranche and the amount\\n   * @param to The address that should own the position\\n   * @return tokenId The token ID (auto-incrementing integer across all pools)\\n   */\\n  function mint(MintParams calldata params, address to) external override returns (uint256 tokenId)\\n  {\\n    return self_mint(params,to,lastTokenId+1);\\n  }\\n\\n  function self_mint(MintParams calldata params, address to,uint256 tokenId) public returns (uint256 tokenIdReturn)\\n  {\\n    tokenId = createToken(params, poolAddress,tokenId);\\n    _mint(to, tokenId);\\n    lastTokenId=tokenId;\\n    return tokenId;\\n  }\\n\\n  /**\\n   * @notice Updates a token to reflect the principal and interest amounts that have been redeemed.\\n   * @param tokenId The token id to update (must be owned by the pool calling this function)\\n   * @param principalRedeemed The incremental amount of principal redeemed (cannot be more than principal deposited)\\n   * @param interestRedeemed The incremental amount of interest redeemed\\n   */\\n  function redeem(\\n    uint256 tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed\\n  ) external override{}\\n\\n  /**\\n   * @dev Burns a specific ERC721 token, and removes the data from our mappings\\n   * @param tokenId uint256 id of the ERC721 token to be burned.\\n   */\\n  function burn(uint256 tokenId) external virtual override  {\\n\\n  }\\n\\n  function getTokenInfo(uint256 tokenId) external view virtual override returns (TokenInfo memory) {\\n    return tokens[tokenId];\\n  }\\n\\n  function setPoolAddress(address _poolAddress) external {\\n    poolAddress=_poolAddress;\\n  }\\n\\n  /**\\n   * @notice Called by the GoldfinchFactory to register the pool as a valid pool. Only valid pools can mint/redeem\\n   * tokens\\n   * @param newPool The address of the newly created pool\\n   */\\n  function onPoolCreated(address newPool) external override {\\n    pools[newPool].created = true;\\n  }\\n\\n  /**\\n   * @notice Returns a boolean representing whether the spender is the owner or the approved spender of the token\\n   * @param spender The address to check\\n   * @param tokenId The token id to check for\\n   * @return True if approved to redeem/transfer/burn the token, false if not\\n   */\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view override returns (bool) {\\n    return _isApprovedOrOwner(spender, tokenId);\\n  }\\n\\n  function validPool(address sender) public view virtual override returns (bool) {\\n    return true;\\n  }\\n\\n  function createToken(MintParams calldata params, address poolAddress,uint256 tokenId) internal returns (uint256 tokenIdReturn) {\\n    tokens[tokenId] = TokenInfo({\\n      pool: poolAddress,\\n      tranche: params.tranche,\\n      principalAmount: params.principalAmount,\\n      principalRedeemed: 0,\\n      interestRedeemed: 0\\n    });\\n    return tokenId;\\n  }\\n\\n\\n  function _getTokenInfo(uint256 tokenId) internal view returns (TokenInfo memory) {\\n    return tokens[tokenId];\\n  }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"contracts/alloyx/v1.0/AlloyxVault.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../AlloyxTokenBronze.sol\\\";\\n\\nimport \\\"../../goldfinch/interfaces/IPoolTokens.sol\\\";\\nimport \\\"../../goldfinch/interfaces/ITranchedPool.sol\\\";\\n\\n/**\\n * @title AlloyX Vault\\n * @notice Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch\\n * and emits AlloyTokens when a liquidity provider deposits supported stable coins. The contract\\n * uses a pricing oracle to determine the value of the underlying assets\\n * @author AlloyX\\n */\\ncontract AlloyxVault is ERC721Holder, ChainlinkClient, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Chainlink for Chainlink.Request;\\n    enum Type {\\n        Mint,\\n        Burn\\n    }\\n    struct TokenMeta {\\n        address receiver;\\n        uint256 amountOrId;\\n        address fromToken;\\n        address toToken;\\n    }\\n    // Request ID => Tokens to Process\\n    mapping(bytes32 => TokenMeta) tokenToProcessMap;\\n\\n    uint256 private result;\\n    address private oracle;\\n    bytes32 private jobId;\\n    uint256 private fee;\\n    IERC20 private stableCoin;\\n    IERC20 private gfiCoin;\\n    IERC20 private fiduCoin;\\n    AlloyxTokenBronze private alloyToken;\\n\\n    event DepositStable(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n    event DepositNFT(address _tokenAddress, address _tokenSender, uint256 _tokenID);\\n    event DepositAlloyx(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\\n    event Mint(address _tokenReceiver, uint256 _tokenAmount);\\n    event Burn(address _tokenReceiver, uint256 _tokenAmount);\\n\\n    /**\\n     * Network: Kovan\\n     * Oracle: 0xc57B33452b4F7BB189bB5AfaE9cc4aBa1f7a4FD8 (Chainlink Devrel\\n     * Node)\\n     * Job ID: d5270d1c311941d0b08bead21fea7747\\n     * Fee: 0.1 LINK\\n     */\\n    constructor(\\n        address _alloyxAddress,\\n        address _stableCoinAddress,\\n        address _fiduCoinAddress,\\n        address _gfiCoinAddress\\n    ) {\\n        setPublicChainlinkToken();\\n        oracle = 0xc57B33452b4F7BB189bB5AfaE9cc4aBa1f7a4FD8;\\n        jobId = \\\"d5270d1c311941d0b08bead21fea7747\\\";\\n        fee = 0.1 * 10**18;\\n\\n        alloyToken = AlloyxTokenBronze(_alloyxAddress);\\n        stableCoin = IERC20(_stableCoinAddress);\\n        gfiCoin = IERC20(_gfiCoinAddress);\\n        fiduCoin = IERC20(_fiduCoinAddress);\\n    }\\n\\n    /**\\n     * @notice The pricing oracle that gets stable coin exchange rate for the Alloy token\\n     */\\n    function requestAlloyUSDCExchangeRate() public returns (bytes32 requestId) {\\n        Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.fulfill.selector);\\n        request.add(\\\"get\\\", \\\"https://alloyxbackend.uw.r.appspot.com/amountToMint\\\");\\n        return sendChainlinkRequestTo(oracle, request, fee);\\n    }\\n\\n    /**\\n     * @notice The response we get from the Chainlink request\\n     * @param _requestId Unique identifier for the request\\n     * @param _result The API response\\n     */\\n    function fulfill(bytes32 _requestId, uint256 _result) public recordChainlinkFulfillment(_requestId) {\\n        uint256 tokenAmountOrId = tokenToProcessMap[_requestId].amountOrId;\\n        address receiver = tokenToProcessMap[_requestId].receiver;\\n        address fromToken = tokenToProcessMap[_requestId].fromToken;\\n        address toToken = tokenToProcessMap[_requestId].toToken;\\n        if (fromToken == address(stableCoin) && toToken == address(alloyToken)) {\\n            uint256 amountToMint = (_result.mul(tokenAmountOrId)).div((10**8));\\n            require(amountToMint > 0, \\\"The amount of alloyx coin to get is not larger than 0\\\");\\n            stableCoin.safeTransferFrom(receiver, address(this), tokenAmountOrId);\\n            alloyToken.mint(receiver, amountToMint);\\n            delete tokenToProcessMap[_requestId];\\n            emit DepositStable(fromToken, receiver, tokenAmountOrId);\\n            emit Mint(receiver, amountToMint);\\n        }\\n        if (fromToken == address(alloyToken) && toToken == address(stableCoin)) {\\n            uint256 amountToWithdraw = (tokenAmountOrId.mul((10**8))) / _result;\\n            require(amountToWithdraw > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n            require(\\n                stableCoin.balanceOf(address(this)) >= amountToWithdraw,\\n                \\\"The vault does not have sufficient stable coin\\\"\\n            );\\n            alloyToken.burn(receiver, tokenAmountOrId);\\n            stableCoin.safeTransfer(receiver, amountToWithdraw);\\n            delete tokenToProcessMap[_requestId];\\n            emit DepositAlloyx(fromToken, receiver, tokenAmountOrId);\\n            emit Burn(receiver, tokenAmountOrId);\\n        }\\n    }\\n\\n    function changeAlloyxAddress(address _alloyxAddress) external onlyOwner {\\n        alloyToken = AlloyxTokenBronze(_alloyxAddress);\\n    }\\n\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    function balanceOfToken(address _tokenAddress) external view returns (uint256) {\\n        return IERC20(_tokenAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\\n     * @param _tokenAmount Number of Alloy Tokens\\n     */\\n    function depositAlloyTokens(uint256 _tokenAmount) external whenNotPaused returns (bool) {\\n        require(alloyToken.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient alloyx coin\\\");\\n        require(\\n            alloyToken.allowance(msg.sender, address(this)) >= _tokenAmount,\\n            \\\"User has not approved the vault for sufficient alloyx coin\\\"\\n        );\\n        bytes32 requestId = requestAlloyUSDCExchangeRate();\\n        tokenToProcessMap[requestId] = TokenMeta(msg.sender, _tokenAmount, address(alloyToken), address(stableCoin));\\n        return true;\\n    }\\n\\n    /**\\n     * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\\n     * @param _tokenAmount Number of stable coin\\n     */\\n    function depositStableCoin(uint256 _tokenAmount) external whenNotPaused returns (bool) {\\n        require(stableCoin.balanceOf(msg.sender) >= _tokenAmount, \\\"User has insufficient stable coin\\\");\\n        require(\\n            stableCoin.allowance(msg.sender, address(this)) >= _tokenAmount,\\n            \\\"User has not approved the vault for sufficient stable coin\\\"\\n        );\\n        bytes32 requestId = requestAlloyUSDCExchangeRate();\\n        tokenToProcessMap[requestId] = TokenMeta(msg.sender, _tokenAmount, address(stableCoin), address(alloyToken));\\n        return true;\\n    }\\n\\n    /**\\n     * @notice A Junior token holder can deposit their NFT for stable coin\\n     * @param _tokenAddress NFT Address\\n     * @param _tokenID NFT ID\\n     */\\n    function depositNFTToken(address _tokenAddress, uint256 _tokenID) external whenNotPaused returns (bool) {\\n        require(isValidPool(_tokenAddress, _tokenID) == true, \\\"Not a valid pool\\\");\\n        require(IERC721(_tokenAddress).ownerOf(_tokenID) == msg.sender, \\\"User does not own this token\\\");\\n        require(\\n            IERC721(_tokenAddress).getApproved(_tokenID) == address(this),\\n            \\\"User has not approved the vault for this token\\\"\\n        );\\n        uint256 purchasePrice = getJuniorTokenValue(_tokenAddress, _tokenID);\\n        require(purchasePrice > 0, \\\"The amount of stable coin to get is not larger than 0\\\");\\n        require(stableCoin.balanceOf(address(this)) >= purchasePrice, \\\"The vault does not have sufficient stable coin\\\");\\n        IERC721(_tokenAddress).safeTransferFrom(msg.sender, address(this), _tokenID);\\n        stableCoin.safeTransfer(msg.sender, purchasePrice);\\n        emit DepositNFT(_tokenAddress, msg.sender, _tokenID);\\n        return true;\\n    }\\n\\n    function destroy() external onlyOwner whenPaused {\\n        require(stableCoin.balanceOf(address(this)) == 0, \\\"Balance of stable coin must be 0\\\");\\n        require(fiduCoin.balanceOf(address(this)) == 0, \\\"Balance of Fidu coin must be 0\\\");\\n        require(gfiCoin.balanceOf(address(this)) == 0, \\\"Balance of GFI coin must be 0\\\");\\n\\n        address payable addr = payable(address(owner()));\\n        selfdestruct(addr);\\n    }\\n\\n    /**\\n     * @notice Using the PoolTokens interface, check if this is a valid pool\\n     * @param _tokenAddress The backer NFT address\\n     * @param _tokenID The backer NFT id\\n     */\\n    function isValidPool(address _tokenAddress, uint256 _tokenID) public view returns (bool) {\\n        IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n        IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n        address tranchedPool = tokenInfo.pool;\\n        return poolTokenContract.validPool(tranchedPool);\\n    }\\n\\n    /**\\n     * @notice Using the Goldfinch contracts, read the principal, redeemed and redeemable values\\n     * @param _tokenAddress The backer NFT address\\n     * @param _tokenID The backer NFT id\\n     */\\n    function getJuniorTokenValue(address _tokenAddress, uint256 _tokenID) public view returns (uint256) {\\n        // first get the amount redeemed and the principal\\n        IPoolTokens poolTokenContract = IPoolTokens(_tokenAddress);\\n        IPoolTokens.TokenInfo memory tokenInfo = poolTokenContract.getTokenInfo(_tokenID);\\n        uint256 principalAmount = tokenInfo.principalAmount;\\n        uint256 totalRedeemed = tokenInfo.principalRedeemed.add(tokenInfo.interestRedeemed);\\n\\n        // now get the redeemable values for the given token\\n        address tranchedPoolAddress = tokenInfo.pool;\\n        ITranchedPool tranchedTokenContract = ITranchedPool(tranchedPoolAddress);\\n        (uint256 interestRedeemable, uint256 principalRedeemable) = tranchedTokenContract.availableToWithdraw(_tokenID);\\n        uint256 totalRedeemable = interestRedeemable;\\n        // only add principal here if there have been drawdowns otherwise it overstates the value\\n        if (principalRedeemable < principalAmount) {\\n            totalRedeemable.add(principalRedeemable);\\n        }\\n        return principalAmount.sub(totalRedeemed).add(totalRedeemable);\\n    }\\n\\n    function migrateNFT(\\n        address _tokenAddress,\\n        address payable _toAddress,\\n        uint256 _tokenID\\n    ) external onlyOwner whenPaused {\\n        IERC721(_tokenAddress).safeTransferFrom(address(this), _toAddress, _tokenID);\\n    }\\n\\n    function migrateERC20(address _tokenAddress, address payable _to) external onlyOwner whenPaused {\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n        IERC20(_tokenAddress).safeTransfer(_to, balance);\\n    }\\n\\n    function transferAlloyxOwnership(address _to) external onlyOwner whenPaused {\\n        alloyToken.transferOwnership(_to);\\n    }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/Chainlink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/alloyx/USDC.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract USDC is ERC20, Ownable {\\n    string NAME = \\\"USDC\\\";\\n    string SYMBOL = \\\"USDC\\\";\\n    uint8  DECIMALS = 6;\\n    constructor() ERC20(\\\"USDC\\\", \\\"USDC\\\") {\\n    }\\n\\n    function mint(address account, uint256 amount) onlyOwner external returns(bool){\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) onlyOwner external returns(bool){\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function usdc() external returns(bool){\\n        return true;\\n    }\\n\\n}\\n\"\n    },\n    \"contracts/alloyx/GFI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract GFI is ERC20, Ownable {\\n    constructor() ERC20(\\\"GFI\\\", \\\"GFI\\\") {\\n    }\\n\\n    function mint(address account, uint256 amount) onlyOwner external returns(bool){\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount) onlyOwner external returns(bool){\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function gfi() external returns(bool){\\n        return true;\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    },\n    \"libraries\": {}\n  }\n}",
      "solcInputHash": "c852ab72f1bc9d80fe711ad36bbc79a9",
      "transactionHash": "0xb38e9aca41898242872b7cb1cc0f61ec0a815e3918c66a99379dc85fca41d5ea",
      "args": [
        "0xC042aC6542307788f7B2daDF1256F0A41e38916f",
        "0x2295b77CE9D8A16BBFfACDee09Ba60AB807486E2",
        "0x069Fb4e87ceD0464bE2D9067a1B7e636A391Aa5b",
        "0x0605B73D9553696D94E7DC92549B63984c7dE7aD",
        "0xBB8D3692B2Ce5C44F5beBa4FdC271df770429E8d",
        "0xe8c8BCD53f3Af46f97D3CFbc14d2836339530F32",
        "0x43833b0C87C3DDaC56DFF3c00E2aB4A592359fE9"
      ]
    },
    "rawTx": "0x02f939132a82010b8008833122b88080b938c060806040523480156200001157600080fd5b50604051620037e0380380620037e083398101604081905262000034916200013d565b6200003f33620000d0565b60008054600580546001600160a01b03199081166001600160a01b039b8c1617909155600680548216998b1699909917909855600180548916978a1697909717909655600280548816948916949094179093556003805487169488169490941790935560048054861691871691909117905560078054909416919094161790915561ffff60a01b19169055620001d2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013857600080fd5b919050565b600080600080600080600060e0888a0312156200015957600080fd5b620001648862000120565b9650620001746020890162000120565b9550620001846040890162000120565b9450620001946060890162000120565b9350620001a46080890162000120565b9250620001b460a0890162000120565b9150620001c460c0890162000120565b905092959891949750929550565b6135fe80620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806383197ef0116100d8578063b338ad161161008c578063d905e9b411610066578063d905e9b414610314578063df16694a14610327578063f2fde38b1461033a57600080fd5b8063b338ad16146102db578063bb74c058146102ee578063d8ec06081461030157600080fd5b80638682caf8116100bd5780638682caf8146102a55780638d6f4d21146102b85780638da5cb5b146102c057600080fd5b806383197ef0146102955780638456cb591461029d57600080fd5b80633f4ba83a1161013a5780635c975abb116101145780635c975abb14610268578063715018a61461027a5780637c9054571461028257600080fd5b80633f4ba83a1461023a578063460408721461024257806353c98f5a1461025557600080fd5b80631a97749d1161016b5780631a97749d146101f15780631b61eb6714610204578063354d3c301461021757600080fd5b806307c0cf3d14610187578063150b7a021461019c575b600080fd5b61019a610195366004613094565b61034d565b005b6101d36101aa366004613107565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61019a6101ff366004613094565b6103bc565b61019a6102123660046132e9565b610426565b61022a6102253660046131cb565b610667565b60405190151581526020016101e8565b61019a61078b565b61019a610250366004613094565b61082d565b61022a610263366004613292565b610897565b600054600160a01b900460ff1661022a565b61019a610cdd565b61019a610290366004613094565b610d2f565b61019a610f62565b61019a611261565b61019a6102b3366004613094565b6112fe565b61022a611368565b6000546040516001600160a01b0390911681526020016101e8565b61022a6102e93660046131cb565b611527565b61022a6102fc366004613292565b611aea565b61019a61030f366004613094565b612011565b61019a6103223660046130ce565b612124565b61019a6103353660046132c4565b61224c565b61019a610348366004613094565b612485565b6000546001600160a01b0316331461039a5760405162461bcd60e51b815260206004820181905260248201526000805160206135a983398151915260448201526064015b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104045760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461046e5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b6001546040516370a0823160e01b815230600482015284916001600160a01b0316906370a082319060240160206040518083038186803b1580156104b157600080fd5b505afa1580156104c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e991906132ab565b10156105415760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b6064820152608401610391565b600083116105915760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f00000000006044820152606401610391565b6040517fe2bbb158000000000000000000000000000000000000000000000000000000008152600481018490526024810182905282906001600160a01b0382169063e2bbb15890604401602060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d91906132ab565b506040518481527f7a3794cf7d311106018524dfd41878138e4264f1bee18e53f1c180a1627fa2b89060200160405180910390a150505050565b60405163463d31d760e11b815260048101829052600090839082906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156106ae57600080fd5b505afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190613219565b80516040517fb5ada6d80000000000000000000000000000000000000000000000000000000081526001600160a01b038083166004830152929350909184169063b5ada6d89060240160206040518083038186803b15801561074757600080fd5b505afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f91906131f7565b93505050505b92915050565b6000546001600160a01b031633146107d35760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff166108235760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b61082b612555565b565b6000546001600160a01b031633146108755760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60008054600160a01b900460ff16156108e55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b600054600160a81b900460ff1661094d5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b6064820152608401610391565b6001546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561099057600080fd5b505afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c891906132ab565b1015610a205760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420737461626c6520636f696044820152603760f91b6064820152608401610391565b600154604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610a6957600080fd5b505afa158015610a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa191906132ab565b1015610b155760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420737461626c6520636f696e0000000000006064820152608401610391565b6000610b20836125f2565b905060008111610b985760405162461bcd60e51b815260206004820152603c60248201527f54686520616d6f756e74206f6620616c6c6f79782062726f6e7a6520636f696e60448201527f20746f20676574206973206e6f74206c6172676572207468616e2030000000006064820152608401610391565b600154610bb0906001600160a01b031633308661269f565b6005546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906340c10f1990604401602060405180830381600087803b158015610c1557600080fd5b505af1158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d91906131f7565b50600154604080516001600160a01b03909216825233602083015281018290527fa4f358c78f73b2049a06e0436c6728292334862a6fc2114f2de13f9cff58491f9060600160405180910390a160408051338152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591015b60405180910390a150600192915050565b6000546001600160a01b03163314610d255760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b61082b600061273e565b6000546001600160a01b03163314610d775760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff16610dc75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610e1057600080fd5b505afa158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4891906132ab565b905060005b81811015610f5d5760048054604051632f745c5960e01b815230928101839052602481018490526001600160a01b03909116916342842e0e9186908490632f745c599060440160206040518083038186803b158015610eab57600080fd5b505afa158015610ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee391906132ab565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610f3257600080fd5b505af1158015610f46573d6000803e3d6000fd5b505050508080610f559061354c565b915050610e4d565b505050565b6000546001600160a01b03163314610faa5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff16610ffa5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561103d57600080fd5b505afa158015611051573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107591906132ab565b156110c25760405162461bcd60e51b815260206004820181905260248201527f42616c616e6365206f6620737461626c6520636f696e206d75737420626520306044820152606401610391565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561110557600080fd5b505afa158015611119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113d91906132ab565b1561118a5760405162461bcd60e51b815260206004820152601e60248201527f42616c616e6365206f66204669647520636f696e206d757374206265203000006044820152606401610391565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156111cd57600080fd5b505afa1580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120591906132ab565b156112525760405162461bcd60e51b815260206004820152601d60248201527f42616c616e6365206f662047464920636f696e206d75737420626520300000006044820152606401610391565b6000546001600160a01b031680ff5b6000546001600160a01b031633146112a95760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff16156112f65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b61082b61278e565b6000546001600160a01b031633146113465760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b031633146113b15760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a81b900460ff16156114315760405162461bcd60e51b815260206004820152602a60248201527f5661756c742068617320616c726561647920737461727420616363657074696e60448201527f67206465706f73697473000000000000000000000000000000000000000000006064820152608401610391565b600061143b612816565b6005549091506001600160a01b03166340c10f193061147361145b612841565b61146d61146661284f565b879061285d565b90612870565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156114b957600080fd5b505af11580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f191906131f7565b5050600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b17905550600190565b60008054600160a01b900460ff16156115755760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b600054600160a81b900460ff166115dd5760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b6064820152608401610391565b6004546001600160a01b0384811691161461163a5760405162461bcd60e51b815260206004820152601860248201527f4e6f7420476f6c6466696e636820506f6f6c20546f6b656e00000000000000006044820152606401610391565b6116448383610667565b15156001146116955760405162461bcd60e51b815260206004820152601060248201527f4e6f7420612076616c696420706f6f6c000000000000000000000000000000006044820152606401610391565b6040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810183905233906001600160a01b03851690636352211e9060240160206040518083038186803b1580156116f057600080fd5b505afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172891906130b1565b6001600160a01b03161461177e5760405162461bcd60e51b815260206004820152601c60248201527f5573657220646f6573206e6f74206f776e207468697320746f6b656e000000006044820152606401610391565b6040517f081812fc0000000000000000000000000000000000000000000000000000000081526004810183905230906001600160a01b0385169063081812fc9060240160206040518083038186803b1580156117d957600080fd5b505afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181191906130b1565b6001600160a01b03161461188d5760405162461bcd60e51b815260206004820152602e60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f72207468697320746f6b656e0000000000000000000000000000000000006064820152608401610391565b6000611899848461287c565b9050600081116119115760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e203000000000000000000000006064820152608401610391565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b15801561195457600080fd5b505afa158015611968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c91906132ab565b1015611a005760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e0000000000000000000000000000000000006064820152608401610391565b6040517f42842e0e000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001600160a01b038516906342842e0e90606401600060405180830381600087803b158015611a6757600080fd5b505af1158015611a7b573d6000803e3d6000fd5b5050600154611a9792506001600160a01b0316905033836129f8565b604080516001600160a01b03861681523360208201529081018490527fc7e8b1bdbecdc8a549557efb2a2ab715cff51630caead31610000019e61dfa4b9060600160405180910390a15060019392505050565b60008054600160a01b900460ff1615611b385760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b600054600160a81b900460ff16611ba05760405162461bcd60e51b815260206004820152602660248201527f5661756c7420686173206e6f7420737461727420616363657074696e67206465604482015265706f7369747360d01b6064820152608401610391565b6005546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015611be357600080fd5b505afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b91906132ab565b1015611c735760405162461bcd60e51b815260206004820152602160248201527f557365722068617320696e73756666696369656e7420616c6c6f797820636f696044820152603760f91b6064820152608401610391565b600554604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015611cbc57600080fd5b505afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf491906132ab565b1015611d685760405162461bcd60e51b815260206004820152603a60248201527f5573657220686173206e6f7420617070726f76656420746865207661756c742060448201527f666f722073756666696369656e7420616c6c6f797820636f696e0000000000006064820152608401610391565b6000611d7383612a41565b905060008111611deb5760405162461bcd60e51b815260206004820152603560248201527f54686520616d6f756e74206f6620737461626c6520636f696e20746f2067657460448201527f206973206e6f74206c6172676572207468616e203000000000000000000000006064820152608401610391565b6001546040516370a0823160e01b815230600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015611e2e57600080fd5b505afa158015611e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6691906132ab565b1015611eda5760405162461bcd60e51b815260206004820152602e60248201527f546865207661756c7420646f6573206e6f74206861766520737566666963696560448201527f6e7420737461626c6520636f696e0000000000000000000000000000000000006064820152608401610391565b6005546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b0390911690639dc29fac90604401602060405180830381600087803b158015611f3f57600080fd5b505af1158015611f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7791906131f7565b50600154611f8f906001600160a01b031633836129f8565b600554604080516001600160a01b03909216825233602083015281018290527f53fee901a59b4d2e659e450f8db17fc345e158fe408d2b39faf66d1f8c4a54fe9060600160405180910390a160408051338152602081018390527fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59101610ccc565b6000546001600160a01b031633146120595760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff166120a95760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6005546040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b15801561210957600080fd5b505af115801561211d573d6000803e3d6000fd5b5050505050565b6000546001600160a01b0316331461216c5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b600054600160a01b900460ff166121bc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156121fe57600080fd5b505afa158015612212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223691906132ab565b9050610f5d6001600160a01b03841683836129f8565b6000546001600160a01b031633146122945760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b6001546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156122d757600080fd5b505afa1580156122eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230f91906132ab565b10156123675760405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e737566666963656e7420737461626c6520636f696044820152603760f91b6064820152608401610391565b600082116123b75760405162461bcd60e51b815260206004820152601b60248201527f4d757374206465706f736974206d6f7265207468616e207a65726f00000000006044820152606401610391565b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905281906001600160a01b0382169063b6b55f2590602401602060405180830381600087803b15801561241457600080fd5b505af1158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c91906132ab565b506040518381527fd483110686f79d1f5932d32add1024998649ddca927700b75bea458b4cb7cde69060200160405180910390a1505050565b6000546001600160a01b031633146124cd5760405162461bcd60e51b815260206004820181905260248201526000805160206135a98339815191526044820152606401610391565b6001600160a01b0381166125495760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610391565b6125528161273e565b50565b600054600160a01b900460ff166125a55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610391565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561264357600080fd5b505afa158015612657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267b91906132ab565b90506000612687612816565b90506126978161146d868561285d565b949350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526127389085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612ae6565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff16156127db5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610391565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125d53390565b600061283c612823612bcb565b61283661282e612d24565b612836612da0565b90612ecd565b905090565b600061283c6006600a613442565b600061283c6012600a613442565b600061286982846134ea565b9392505050565b600061286982846133dd565b60405163463d31d760e11b815260048101829052600090839082906001600160a01b03831690638c7a63ae9060240160a06040518083038186803b1580156128c357600080fd5b505afa1580156128d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fb9190613219565b9050600081604001519050600061292383608001518460600151612ecd90919063ffffffff16565b83516040517f4d02fe6f0000000000000000000000000000000000000000000000000000000081526004810189905291925090819060009081906001600160a01b03841690634d02fe6f90602401604080518083038186803b15801561298857600080fd5b505afa15801561299c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c09190613321565b909250905081868210156129da576129d88183612ecd565b505b6129e8816128368989612ed9565b9c9b505050505050505050505050565b6040516001600160a01b038316602482015260448101829052610f5d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016126ec565b600080600560009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a9257600080fd5b505afa158015612aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aca91906132ab565b90506000612ad6612816565b90506126978261146d868461285d565b6000612b3b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ee59092919063ffffffff16565b805190915015610f5d5780806020019051810190612b5991906131f7565b610f5d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610391565b600480546040516370a0823160e01b81523092810192909252600091829182916001600160a01b03909116906370a082319060240160206040518083038186803b158015612c1857600080fd5b505afa158015612c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5091906132ab565b905060005b81811015612d0a5760048054604051632f745c5960e01b8152309281019290925260248201839052612cf691612cef916001600160a01b0316908190632f745c599060440160206040518083038186803b158015612cb257600080fd5b505afa158015612cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cea91906132ab565b61287c565b8490612ecd565b925080612d028161354c565b915050612c55565b50612d1d612d16612841565b839061285d565b9250505090565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612d6857600080fd5b505afa158015612d7c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283c91906132ab565b600061283c612ec8612db061284f565b600754604080517f87269729000000000000000000000000000000000000000000000000000000008152905161146d926001600160a01b0316916387269729916004808301926020929190829003018186803b158015612e0f57600080fd5b505afa158015612e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4791906132ab565b6003546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015612e8a57600080fd5b505afa158015612e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec291906132ab565b9061285d565b612ef4565b600061286982846133c5565b60006128698284613509565b60606126978484600085612f13565b6000610785612f0c612f04612841565b61146d61284f565b8390612870565b606082471015612f8b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610391565b6001600160a01b0385163b612fe25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610391565b600080866001600160a01b03168587604051612ffe9190613345565b60006040518083038185875af1925050503d806000811461303b576040519150601f19603f3d011682016040523d82523d6000602084013e613040565b606091505b509150915061305082828661305b565b979650505050505050565b6060831561306a575081612869565b82511561307a5782518084602001fd5b8160405162461bcd60e51b81526004016103919190613361565b6000602082840312156130a657600080fd5b813561286981613593565b6000602082840312156130c357600080fd5b815161286981613593565b600080604083850312156130e157600080fd5b82356130ec81613593565b915060208301356130fc81613593565b809150509250929050565b6000806000806080858703121561311d57600080fd5b843561312881613593565b935060208581013561313981613593565b935060408601359250606086013567ffffffffffffffff8082111561315d57600080fd5b818801915088601f83011261317157600080fd5b8135818111156131835761318361357d565b613195601f8201601f19168501613394565b915080825289848285010111156131ab57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080604083850312156131de57600080fd5b82356131e981613593565b946020939093013593505050565b60006020828403121561320957600080fd5b8151801515811461286957600080fd5b600060a0828403121561322b57600080fd5b60405160a0810181811067ffffffffffffffff8211171561324e5761324e61357d565b604052825161325c81613593565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602082840312156132a457600080fd5b5035919050565b6000602082840312156132bd57600080fd5b5051919050565b600080604083850312156132d757600080fd5b8235915060208301356130fc81613593565b6000806000606084860312156132fe57600080fd5b83359250602084013561331081613593565b929592945050506040919091013590565b6000806040838503121561333457600080fd5b505080516020909101519092909150565b60008251613357818460208701613520565b9190910192915050565b6020815260008251806020840152613380816040850160208701613520565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff811182821017156133bd576133bd61357d565b604052919050565b600082198211156133d8576133d8613567565b500190565b6000826133fa57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561343a57816000190482111561342057613420613567565b8085161561342d57918102915b93841c9390800290613404565b509250929050565b6000612869838360008261345857506001610785565b8161346557506000610785565b816001811461347b5760028114613485576134a1565b6001915050610785565b60ff84111561349657613496613567565b50506001821b610785565b5060208310610133831016604e8410600b84101617156134c4575081810a610785565b6134ce83836133ff565b80600019048211156134e2576134e2613567565b029392505050565b600081600019048311821515161561350457613504613567565b500290565b60008282101561351b5761351b613567565b500390565b60005b8381101561353b578181015183820152602001613523565b838111156127385750506000910152565b600060001982141561356057613560613567565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461255257600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ec017916fcb44d798d2a7a37a6b034c4a9b781fbfaf18e51e862e787ef76fc1764736f6c63430008070033000000000000000000000000c042ac6542307788f7b2dadf1256f0a41e38916f0000000000000000000000002295b77ce9d8a16bbffacdee09ba60ab807486e2000000000000000000000000069fb4e87ced0464be2d9067a1b7e636a391aa5b0000000000000000000000000605b73d9553696d94e7dc92549b63984c7de7ad000000000000000000000000bb8d3692b2ce5c44f5beba4fdc271df770429e8d000000000000000000000000e8c8bcd53f3af46f97d3cfbc14d2836339530f3200000000000000000000000043833b0c87c3ddac56dff3c00e2ab4a592359fe9c001a094c3036073e8c8e5da54ab8df429aa91faa8911f04945455e5e9211974848505a066349742b333c3fa9f2d1559b6ba3a20e0d05cfd87c1149765d44d93f4136667"
  }
}
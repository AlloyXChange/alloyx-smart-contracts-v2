{
  "address": "0x1D669195735DBD4dA2E7f54a0f7Bf0dc92099ff3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uidAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_field",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "ChangeAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressToWhitelist",
          "type": "address"
        }
      ],
      "name": "addWhitelistedUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uidAddress",
          "type": "address"
        }
      ],
      "name": "changeUIDAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "hasWhitelistedUID",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelistedAddress",
          "type": "address"
        }
      ],
      "name": "isUserWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressToDeWhitelist",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa85e92ed958c8e0e87558881d6d1572d21cedf58e1c847c9df170b21c48f5fed",
  "receipt": {
    "to": null,
    "from": "0xd988EB2777ec4d844ced75f68148A08310bEFc76",
    "contractAddress": "0x1D669195735DBD4dA2E7f54a0f7Bf0dc92099ff3",
    "transactionIndex": 3,
    "gasUsed": "469374",
    "logsBloom": "0x
    "blockHash": "0xc84ada22bf6fca1ecb48f92b1443d745ef76dedc56c9b0101484f2d7c4380cc0",
    "transactionHash": "0xa85e92ed958c8e0e87558881d6d1572d21cedf58e1c847c9df170b21c48f5fed",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 32816495,
        "transactionHash": "0xa85e92ed958c8e0e87558881d6d1572d21cedf58e1c847c9df170b21c48f5fed",
        "address": "0x1D669195735DBD4dA2E7f54a0f7Bf0dc92099ff3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d988eb2777ec4d844ced75f68148a08310befc76"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc84ada22bf6fca1ecb48f92b1443d745ef76dedc56c9b0101484f2d7c4380cc0"
      }
    ],
    "blockNumber": 32816495,
    "cumulativeGasUsed": "943038",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x156A897A91CAcaeb35d22f04991747eC49b44680"
  ],
  "numDeployments": 1,
  "solcInputHash": "b45ca353832ac632b594807f42fcc5ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uidAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_field\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ChangeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToWhitelist\",\"type\":\"address\"}],\"name\":\"addWhitelistedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uidAddress\",\"type\":\"address\"}],\"name\":\"changeUIDAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"hasWhitelistedUID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistedAddress\",\"type\":\"address\"}],\"name\":\"isUserWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToDeWhitelist\",\"type\":\"address\"}],\"name\":\"removeWhitelistedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AlloyX\",\"kind\":\"dev\",\"methods\":{\"addWhitelistedUser(address)\":{\"params\":{\"_addressToWhitelist\":\"The address to whitelist.\"}},\"changeUIDAddress(address)\":{\"params\":{\"_uidAddress\":\"the address to change to\"}},\"hasWhitelistedUID(address)\":{\"params\":{\"_userAddress\":\"The address to verify.\"}},\"isUserWhitelisted(address)\":{\"params\":{\"_whitelistedAddress\":\"The address to whitelist.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeWhitelistedUser(address)\":{\"params\":{\"_addressToDeWhitelist\":\"The address to de-whitelist.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AlloyxWhitelist\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelistedUser(address)\":{\"notice\":\"Add whitelist address\"},\"changeUIDAddress(address)\":{\"notice\":\"Change UID address\"},\"hasWhitelistedUID(address)\":{\"notice\":\"If address is not whitelisted by goldfinch(non-US entity or non-US individual)\"},\"isUserWhitelisted(address)\":{\"notice\":\"Check whether user is whitelisted\"},\"removeWhitelistedUser(address)\":{\"notice\":\"Remove whitelist address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alloyx/AlloyxWhitelist.sol\":\"AlloyxWhitelist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./interfaces/IAlloyxWhitelist.sol\\\";\\n\\n/**\\n * @title AlloyxWhitelist\\n * @author AlloyX\\n */\\ncontract AlloyxWhitelist is Ownable, IAlloyxWhitelist {\\n  mapping(address => bool) whitelistedAddresses;\\n  IERC1155 private uidToken;\\n  event ChangeAddress(string _field, address _address);\\n\\n  constructor(address _uidAddress) public {\\n    uidToken = IERC1155(_uidAddress);\\n  }\\n\\n  /**\\n   * @notice If address is whitelisted\\n   * @param _address The address to verify.\\n   */\\n  modifier isWhitelisted(address _address) {\\n    require(isUserWhitelisted(_address), \\\"You need to be whitelisted\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice If address is not whitelisted\\n   * @param _address The address to verify.\\n   */\\n  modifier notWhitelisted(address _address) {\\n    require(!isUserWhitelisted(_address), \\\"You are whitelisted\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice If address is not whitelisted by goldfinch(non-US entity or non-US individual)\\n   * @param _userAddress The address to verify.\\n   */\\n  function hasWhitelistedUID(address _userAddress) public view returns (bool) {\\n    uint256 balanceForNonUsIndividual = uidToken.balanceOf(_userAddress, 0);\\n    uint256 balanceForNonUsEntity = uidToken.balanceOf(_userAddress, 4);\\n    return balanceForNonUsIndividual + balanceForNonUsEntity > 0;\\n  }\\n\\n  /**\\n   * @notice Add whitelist address\\n   * @param _addressToWhitelist The address to whitelist.\\n   */\\n  function addWhitelistedUser(address _addressToWhitelist)\\n    public\\n    onlyOwner\\n    notWhitelisted(_addressToWhitelist)\\n  {\\n    whitelistedAddresses[_addressToWhitelist] = true;\\n  }\\n\\n  /**\\n   * @notice Remove whitelist address\\n   * @param _addressToDeWhitelist The address to de-whitelist.\\n   */\\n  function removeWhitelistedUser(address _addressToDeWhitelist)\\n    public\\n    onlyOwner\\n    isWhitelisted(_addressToDeWhitelist)\\n  {\\n    whitelistedAddresses[_addressToDeWhitelist] = false;\\n  }\\n\\n  /**\\n   * @notice Check whether user is whitelisted\\n   * @param _whitelistedAddress The address to whitelist.\\n   */\\n  function isUserWhitelisted(address _whitelistedAddress) public view override returns (bool) {\\n    return whitelistedAddresses[_whitelistedAddress] || hasWhitelistedUID(_whitelistedAddress);\\n  }\\n\\n  /**\\n   * @notice Change UID address\\n   * @param _uidAddress the address to change to\\n   */\\n  function changeUIDAddress(address _uidAddress) external onlyOwner {\\n    uidToken = IERC1155(_uidAddress);\\n    emit ChangeAddress(\\\"uidToken\\\", _uidAddress);\\n  }\\n}\\n\",\"keccak256\":\"0x5c5630d4f7199647f381064ee0b7960ef24d148ba881b18a3e22e88eacfccb3f\",\"license\":\"MIT\"},\"contracts/alloyx/interfaces/IAlloyxWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title Alloyx Whitelist Interface\\n * @author AlloyX\\n */\\ninterface IAlloyxWhitelist {\\n  /**\\n   * @notice Check whether user is whitelisted\\n   * @param _whitelistedAddress The address to whitelist.\\n   */\\n  function isUserWhitelisted(address _whitelistedAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x49382d208f5a0a41bfcf405b830c27534e6c199df5371f28428f72cd028c70f8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161078d38038061078d83398101604081905261002f916100ad565b6100383361005d565b600280546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b6106a1806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c80632d9411a61461007d578063715018a6146100a55780638668f2f3146100af5780638da5cb5b146100c2578063b231e25d146100e2578063b7b1b8e9146100f5578063f2fde38b14610108578063fb237eb21461011b575b600080fd5b61009061008b3660046105ae565b61012e565b60405190151581526020015b60405180910390f35b6100ad610250565b005b6100ad6100bd3660046105ae565b610294565b6100ca610336565b6040516001600160a01b03909116815260200161009c565b6100ad6100f03660046105ae565b610345565b6100ad6101033660046105ae565b6103e9565b6100ad6101163660046105ae565b61048d565b6100906101293660046105ae565b61052d565b600254604051627eeac760e11b815260009182916001600160a01b039091169062fdd58e9061016390869085906004016105f7565b60206040518083038186803b15801561017b57600080fd5b505afa15801561018f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b391906105de565b600254604051627eeac760e11b81529192506000916001600160a01b039091169062fdd58e906101e990879060049081016105f7565b60206040518083038186803b15801561020157600080fd5b505afa158015610215573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023991906105de565b905060006102478284610645565b11949350505050565b33610259610336565b6001600160a01b0316146102885760405162461bcd60e51b815260040161027f90610610565b60405180910390fd5b610292600061055e565b565b3361029d610336565b6001600160a01b0316146102c35760405162461bcd60e51b815260040161027f90610610565b600280546001600160a01b0383166001600160a01b0319909116811790915560408051818152600881830152673ab4b22a37b5b2b760c11b60608201526020810192909252517f6314c89e231542c0e7379a5606c8f0bee7eadfaf9885637a8eef5fb4fe078dbc9181900360800190a150565b6000546001600160a01b031690565b3361034e610336565b6001600160a01b0316146103745760405162461bcd60e51b815260040161027f90610610565b8061037e8161052d565b156103c15760405162461bcd60e51b8152602060048201526013602482015272165bdd48185c99481dda1a5d195b1a5cdd1959606a1b604482015260640161027f565b506001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b336103f2610336565b6001600160a01b0316146104185760405162461bcd60e51b815260040161027f90610610565b806104228161052d565b61046b5760405162461bcd60e51b815260206004820152601a602482015279165bdd481b995959081d1bc81899481dda1a5d195b1a5cdd195960321b604482015260640161027f565b506001600160a01b03166000908152600160205260409020805460ff19169055565b33610496610336565b6001600160a01b0316146104bc5760405162461bcd60e51b815260040161027f90610610565b6001600160a01b0381166105215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027f565b61052a8161055e565b50565b6001600160a01b03811660009081526001602052604081205460ff168061055857506105588261012e565b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156105c057600080fd5b81356001600160a01b03811681146105d757600080fd5b9392505050565b6000602082840312156105f057600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561066657634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220858547dfa9ee8132d471c808203ae01d9a49cc3e2bd6cdbe4fb5d4b0a655f9e464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100785760003560e01c80632d9411a61461007d578063715018a6146100a55780638668f2f3146100af5780638da5cb5b146100c2578063b231e25d146100e2578063b7b1b8e9146100f5578063f2fde38b14610108578063fb237eb21461011b575b600080fd5b61009061008b3660046105ae565b61012e565b60405190151581526020015b60405180910390f35b6100ad610250565b005b6100ad6100bd3660046105ae565b610294565b6100ca610336565b6040516001600160a01b03909116815260200161009c565b6100ad6100f03660046105ae565b610345565b6100ad6101033660046105ae565b6103e9565b6100ad6101163660046105ae565b61048d565b6100906101293660046105ae565b61052d565b600254604051627eeac760e11b815260009182916001600160a01b039091169062fdd58e9061016390869085906004016105f7565b60206040518083038186803b15801561017b57600080fd5b505afa15801561018f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b391906105de565b600254604051627eeac760e11b81529192506000916001600160a01b039091169062fdd58e906101e990879060049081016105f7565b60206040518083038186803b15801561020157600080fd5b505afa158015610215573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023991906105de565b905060006102478284610645565b11949350505050565b33610259610336565b6001600160a01b0316146102885760405162461bcd60e51b815260040161027f90610610565b60405180910390fd5b610292600061055e565b565b3361029d610336565b6001600160a01b0316146102c35760405162461bcd60e51b815260040161027f90610610565b600280546001600160a01b0383166001600160a01b0319909116811790915560408051818152600881830152673ab4b22a37b5b2b760c11b60608201526020810192909252517f6314c89e231542c0e7379a5606c8f0bee7eadfaf9885637a8eef5fb4fe078dbc9181900360800190a150565b6000546001600160a01b031690565b3361034e610336565b6001600160a01b0316146103745760405162461bcd60e51b815260040161027f90610610565b8061037e8161052d565b156103c15760405162461bcd60e51b8152602060048201526013602482015272165bdd48185c99481dda1a5d195b1a5cdd1959606a1b604482015260640161027f565b506001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b336103f2610336565b6001600160a01b0316146104185760405162461bcd60e51b815260040161027f90610610565b806104228161052d565b61046b5760405162461bcd60e51b815260206004820152601a602482015279165bdd481b995959081d1bc81899481dda1a5d195b1a5cdd195960321b604482015260640161027f565b506001600160a01b03166000908152600160205260409020805460ff19169055565b33610496610336565b6001600160a01b0316146104bc5760405162461bcd60e51b815260040161027f90610610565b6001600160a01b0381166105215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027f565b61052a8161055e565b50565b6001600160a01b03811660009081526001602052604081205460ff168061055857506105588261012e565b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156105c057600080fd5b81356001600160a01b03811681146105d757600080fd5b9392505050565b6000602082840312156105f057600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561066657634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220858547dfa9ee8132d471c808203ae01d9a49cc3e2bd6cdbe4fb5d4b0a655f9e464736f6c63430008070033",
  "devdoc": {
    "author": "AlloyX",
    "kind": "dev",
    "methods": {
      "addWhitelistedUser(address)": {
        "params": {
          "_addressToWhitelist": "The address to whitelist."
        }
      },
      "changeUIDAddress(address)": {
        "params": {
          "_uidAddress": "the address to change to"
        }
      },
      "hasWhitelistedUID(address)": {
        "params": {
          "_userAddress": "The address to verify."
        }
      },
      "isUserWhitelisted(address)": {
        "params": {
          "_whitelistedAddress": "The address to whitelist."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeWhitelistedUser(address)": {
        "params": {
          "_addressToDeWhitelist": "The address to de-whitelist."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AlloyxWhitelist",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelistedUser(address)": {
        "notice": "Add whitelist address"
      },
      "changeUIDAddress(address)": {
        "notice": "Change UID address"
      },
      "hasWhitelistedUID(address)": {
        "notice": "If address is not whitelisted by goldfinch(non-US entity or non-US individual)"
      },
      "isUserWhitelisted(address)": {
        "notice": "Check whether user is whitelisted"
      },
      "removeWhitelistedUser(address)": {
        "notice": "Remove whitelist address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2109,
        "contract": "contracts/alloyx/AlloyxWhitelist.sol:AlloyxWhitelist",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8415,
        "contract": "contracts/alloyx/AlloyxWhitelist.sol:AlloyxWhitelist",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8418,
        "contract": "contracts/alloyx/AlloyxWhitelist.sol:AlloyxWhitelist",
        "label": "uidToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC1155)3551"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC1155)3551": {
        "encoding": "inplace",
        "label": "contract IERC1155",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
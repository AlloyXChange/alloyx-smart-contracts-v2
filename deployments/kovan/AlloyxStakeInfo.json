{
  "address": "0xb3a243f5DD43BF2aa4837cB8F27d321e5099c1c9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_field",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "SetField",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "name": "changeVaultAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimableCRWNToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isStakeholder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageRewardPerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        }
      ],
      "name": "removeStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "resetStakeTimestampWithRewardLeft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentageRewardPerYear",
          "type": "uint256"
        }
      ],
      "name": "setPercentageRewardPerYear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeholder",
          "type": "address"
        }
      ],
      "name": "stakeOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "since",
              "type": "uint256"
            }
          ],
          "internalType": "struct AlloyxStakeInfo.StakeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimableCRWNToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPastRedeemableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x74236bd368ab59d9660cda3432cc3b3af712e79d7363d7138ed37c45e5e4027b",
  "receipt": {
    "to": null,
    "from": "0xd988EB2777ec4d844ced75f68148A08310bEFc76",
    "contractAddress": "0xb3a243f5DD43BF2aa4837cB8F27d321e5099c1c9",
    "transactionIndex": 0,
    "gasUsed": "755838",
    "logsBloom": "0x
    "blockHash": "0x21b60cc9582f0f0c5ac76219aea1f584afc7323bfa03b9906489ddac85c7c141",
    "transactionHash": "0x74236bd368ab59d9660cda3432cc3b3af712e79d7363d7138ed37c45e5e4027b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32324882,
        "transactionHash": "0x74236bd368ab59d9660cda3432cc3b3af712e79d7363d7138ed37c45e5e4027b",
        "address": "0xb3a243f5DD43BF2aa4837cB8F27d321e5099c1c9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d988eb2777ec4d844ced75f68148a08310befc76"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x21b60cc9582f0f0c5ac76219aea1f584afc7323bfa03b9906489ddac85c7c141"
      }
    ],
    "blockNumber": 32324882,
    "cumulativeGasUsed": "755838",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "38472ce1e4577c192ec978c81f70b057",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_field\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetField\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"changeVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimableCRWNToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageRewardPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"resetStakeTimestampWithRewardLeft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageRewardPerYear\",\"type\":\"uint256\"}],\"name\":\"setPercentageRewardPerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"}],\"internalType\":\"struct AlloyxStakeInfo.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimableCRWNToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPastRedeemableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"AlloyX\",\"kind\":\"dev\",\"methods\":{\"addStake(address,uint256)\":{\"params\":{\"_stake\":\"The size of the stake to be created.\",\"_staker\":\"The person intending to stake\"}},\"changeVaultAddress(address)\":{\"params\":{\"_vaultAddress\":\"The address to change to\"}},\"claimableCRWNToken(address)\":{\"params\":{\"_receiver\":\"the address of receiver\"}},\"isStakeholder(address)\":{\"params\":{\"_address\":\"The address to verify.\"},\"returns\":{\"_0\":\"bool Whether the address is a stakeholder, and if so its position in the stakeholders array.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeStake(address,uint256)\":{\"params\":{\"_stake\":\"The size of the stake to be removed.\",\"_staker\":\"The person intending to remove stake\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resetStakeTimestampWithRewardLeft(address,uint256)\":{\"params\":{\"_reward\":\"the leftover reward the staker owns\",\"_staker\":\"the address of the staker\"}},\"setPercentageRewardPerYear(uint256)\":{\"params\":{\"_percentageRewardPerYear\":\"the reward per year in percentage\"}},\"stakeOf(address)\":{\"params\":{\"_stakeholder\":\"The stakeholder to retrieve the stake for.\"},\"returns\":{\"_0\":\"Stake The amount staked and the time since when it's staked.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AlloyX Stake Info\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStake(address,uint256)\":{\"notice\":\"Add stake for a staker\"},\"changeVaultAddress(address)\":{\"notice\":\"Change the vault address\"},\"claimableCRWNToken(address)\":{\"notice\":\"Claimable CRWN token amount of an address\"},\"isStakeholder(address)\":{\"notice\":\"Check if an address is a stakeholder.\"},\"removeStake(address,uint256)\":{\"notice\":\"Remove stake for a staker\"},\"resetStakeTimestampWithRewardLeft(address,uint256)\":{\"notice\":\"A method for a stakeholder to clear a stake with some leftover reward\"},\"setPercentageRewardPerYear(uint256)\":{\"notice\":\"Set percentageRewardPerYear which is the reward per year in percentage\"},\"stakeOf(address)\":{\"notice\":\"Retrieve the stake for a stakeholder.\"},\"totalClaimableCRWNToken()\":{\"notice\":\"Total claimable CRWN tokens of all stakeholders\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/alloyx/AlloyxStakeInfo.sol\":\"AlloyxStakeInfo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/alloyx/AlloyxStakeInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title AlloyX Stake Info\\n * @author AlloyX\\n */\\ncontract AlloyxStakeInfo is Ownable {\\n  using SafeMath for uint256;\\n  struct StakeInfo {\\n    uint256 amount;\\n    uint256 since;\\n  }\\n  uint256 public percentageRewardPerYear = 2;\\n  uint256 public totalPastRedeemableReward;\\n  address vaultAddress;\\n  mapping(address => uint256) private pastRedeemableReward;\\n  mapping(address => StakeInfo) private stakesMapping;\\n  mapping(address => bool) private stakeholderMap;\\n  StakeInfo totalActiveStake;\\n  event SetField(string _field, uint256 _value);\\n\\n  constructor(address _vaultAddress) public {\\n    vaultAddress = _vaultAddress;\\n  }\\n\\n  /**\\n   * @notice If it is called from the vault\\n   */\\n  modifier fromVault() {\\n    require(vaultAddress == msg.sender, \\\"The function must be called from vault\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Change the vault address\\n   * @param _vaultAddress The address to change to\\n   */\\n  function changeVaultAddress(address _vaultAddress) external onlyOwner {\\n    vaultAddress = _vaultAddress;\\n  }\\n\\n  /**\\n   * @notice Set percentageRewardPerYear which is the reward per year in percentage\\n   * @param _percentageRewardPerYear the reward per year in percentage\\n   */\\n  function setPercentageRewardPerYear(uint256 _percentageRewardPerYear) external onlyOwner {\\n    percentageRewardPerYear = _percentageRewardPerYear;\\n    emit SetField(\\\"percentageRewardPerYear\\\", _percentageRewardPerYear);\\n  }\\n\\n  /**\\n   * @notice Check if an address is a stakeholder.\\n   * @param _address The address to verify.\\n   * @return bool Whether the address is a stakeholder,\\n   * and if so its position in the stakeholders array.\\n   */\\n  function isStakeholder(address _address) public view returns (bool) {\\n    return stakeholderMap[_address];\\n  }\\n\\n  /**\\n   * @notice Add a stakeholder.\\n   * @param _stakeholder The stakeholder to add.\\n   */\\n  function addStakeholder(address _stakeholder) internal {\\n    stakeholderMap[_stakeholder] = true;\\n  }\\n\\n  /**\\n   * @notice Remove a stakeholder.\\n   * @param _stakeholder The stakeholder to remove.\\n   */\\n  function removeStakeholder(address _stakeholder) internal {\\n    stakeholderMap[_stakeholder] = false;\\n  }\\n\\n  /**\\n   * @notice Retrieve the stake for a stakeholder.\\n   * @param _stakeholder The stakeholder to retrieve the stake for.\\n   * @return Stake The amount staked and the time since when it's staked.\\n   */\\n  function stakeOf(address _stakeholder) public view returns (StakeInfo memory) {\\n    return stakesMapping[_stakeholder];\\n  }\\n\\n  /**\\n   * @notice A method for a stakeholder to reset the timestamp of the stake.\\n   * @notice A method for a stakeholder to reset the timestamp of the stake.\\n   * @param _stakeholder The stakeholder to retrieve the stake for.\\n   */\\n  function resetStakeTimestamp(address _stakeholder) internal {\\n    if (stakesMapping[_stakeholder].amount == 0) addStakeholder(_stakeholder);\\n    addPastRedeemableReward(_stakeholder, stakesMapping[_stakeholder]);\\n    stakesMapping[_stakeholder] = StakeInfo(stakesMapping[_stakeholder].amount, block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Add stake for a staker\\n   * @param _staker The person intending to stake\\n   * @param _stake The size of the stake to be created.\\n   */\\n  function addStake(address _staker, uint256 _stake) public fromVault {\\n    if (stakesMapping[_staker].amount == 0) addStakeholder(_staker);\\n    addPastRedeemableReward(_staker, stakesMapping[_staker]);\\n    stakesMapping[_staker] = StakeInfo(stakesMapping[_staker].amount.add(_stake), block.timestamp);\\n    updateTotalStakeInfoAndPastRedeemable(_stake, 0, 0, 0);\\n  }\\n\\n  /**\\n   * @notice Remove stake for a staker\\n   * @param _staker The person intending to remove stake\\n   * @param _stake The size of the stake to be removed.\\n   */\\n  function removeStake(address _staker, uint256 _stake) public fromVault {\\n    require(stakeOf(_staker).amount >= _stake, \\\"User has insufficient dura coin staked\\\");\\n    if (stakesMapping[_staker].amount == 0) addStakeholder(_staker);\\n    addPastRedeemableReward(_staker, stakesMapping[_staker]);\\n    stakesMapping[_staker] = StakeInfo(stakesMapping[_staker].amount.sub(_stake), block.timestamp);\\n    updateTotalStakeInfoAndPastRedeemable(0, _stake, 0, 0);\\n  }\\n\\n  /**\\n   * @notice Add the stake to past redeemable reward\\n   * @param _stake the stake to be added into the reward\\n   */\\n  function addPastRedeemableReward(address _staker, StakeInfo storage _stake) internal {\\n    uint256 additionalPastRedeemableReward = calculateRewardFromStake(_stake);\\n    pastRedeemableReward[_staker] = pastRedeemableReward[_staker].add(\\n      additionalPastRedeemableReward\\n    );\\n  }\\n\\n  function updateTotalStakeInfoAndPastRedeemable(\\n    uint256 increaseInStake,\\n    uint256 decreaseInStake,\\n    uint256 increaseInPastRedeemable,\\n    uint256 decreaseInPastRedeemable\\n  ) internal {\\n    uint256 additionalPastRedeemableReward = calculateRewardFromStake(totalActiveStake);\\n    totalPastRedeemableReward = totalPastRedeemableReward.add(additionalPastRedeemableReward);\\n    totalPastRedeemableReward = totalPastRedeemableReward.add(increaseInPastRedeemable).sub(\\n      decreaseInPastRedeemable\\n    );\\n    totalActiveStake = StakeInfo(\\n      totalActiveStake.amount.add(increaseInStake).sub(decreaseInStake),\\n      block.timestamp\\n    );\\n  }\\n\\n  /**\\n   * @notice A method for a stakeholder to clear a stake with some leftover reward\\n   * @param _staker the address of the staker\\n   * @param _reward the leftover reward the staker owns\\n   */\\n  function resetStakeTimestampWithRewardLeft(address _staker, uint256 _reward) public fromVault {\\n    resetStakeTimestamp(_staker);\\n    adjustTotalStakeWithRewardLeft(_staker, _reward);\\n    pastRedeemableReward[_staker] = _reward;\\n  }\\n\\n  /**\\n   * @notice Adjust total stake variables with leftover reward\\n   * @param _reward the leftover reward the staker owns\\n   */\\n  function adjustTotalStakeWithRewardLeft(address _staker, uint256 _reward) internal {\\n    uint256 increaseInPastReward = 0;\\n    uint256 decreaseInPastReward = 0;\\n    if (pastRedeemableReward[_staker] >= _reward) {\\n      decreaseInPastReward = pastRedeemableReward[_staker].sub(_reward);\\n    } else {\\n      increaseInPastReward = _reward.sub(pastRedeemableReward[_staker]);\\n    }\\n    updateTotalStakeInfoAndPastRedeemable(0, 0, increaseInPastReward, decreaseInPastReward);\\n  }\\n\\n  /**\\n   * @notice Calculate reward from the stake info\\n   * @param _stake the stake info to calculate reward based on\\n   */\\n  function calculateRewardFromStake(StakeInfo memory _stake) internal view returns (uint256) {\\n    return\\n      _stake\\n        .amount\\n        .mul(block.timestamp.sub(_stake.since))\\n        .mul(percentageRewardPerYear)\\n        .div(100)\\n        .div(365 days);\\n  }\\n\\n  /**\\n   * @notice Claimable CRWN token amount of an address\\n   * @param _receiver the address of receiver\\n   */\\n  function claimableCRWNToken(address _receiver) public view returns (uint256) {\\n    StakeInfo memory stakeValue = stakeOf(_receiver);\\n    return pastRedeemableReward[_receiver] + calculateRewardFromStake(stakeValue);\\n  }\\n\\n  /**\\n   * @notice Total claimable CRWN tokens of all stakeholders\\n   */\\n  function totalClaimableCRWNToken() public view returns (uint256) {\\n    return calculateRewardFromStake(totalActiveStake) + totalPastRedeemableReward;\\n  }\\n}\\n\",\"keccak256\":\"0xa3098165384bcbef437434a29d2c3da08c3a4ef088c3368b2c791626312460ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600260015534801561001557600080fd5b50604051610cb7380380610cb7833981016040819052610034916100b2565b61003d33610062565b600380546001600160a01b0319166001600160a01b03929092169190911790556100e2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100c457600080fd5b81516001600160a01b03811681146100db57600080fd5b9392505050565b610bc6806100f16000396000f3fe608060405234801561001057600080fd5b50600436106100ba5760003560e01c80632456a11d146100bf57806342623360146100d45780634d8d595c146101075780635c76870b1461011a5780636374299e1461013157806364cdc99e1461014457806368ce7d8a1461014c578063715018a61461015f578063816c1acd146101675780638da5cb5b1461017a578063c763f2161461019a578063dabb98aa146101ad578063ef037b90146101b6578063f2fde38b146101f2575b600080fd5b6100d26100cd366004610a76565b610205565b005b6100e76100e2366004610a31565b6102a5565b604080518251815260209283015192810192909252015b60405180910390f35b6100d2610115366004610a4c565b6102ec565b61012360025481565b6040519081526020016100fe565b6100d261013f366004610a4c565b610345565b610123610429565b6100d261015a366004610a4c565b61045f565b6100d26105a6565b610123610175366004610a31565b6105e1565b610182610622565b6040516001600160a01b0390911681526020016100fe565b6100d26101a8366004610a31565b610631565b61012360015481565b6101e26101c4366004610a31565b6001600160a01b031660009081526006602052604090205460ff1690565b60405190151581526020016100fe565b6100d2610200366004610a31565b610682565b3361020e610622565b6001600160a01b03161461023d5760405162461bcd60e51b815260040161023490610ad5565b60405180910390fd5b600181905560408051818152601781830152763832b931b2b73a30b3b2a932bbb0b9322832b92cb2b0b960491b60608201526020810183905290517f272c29cfb1538e15f8105c58381747783d06b2021a4fcf849c274927396e1c379181900360800190a150565b6040805180820190915260008082526020820152506001600160a01b0316600090815260056020908152604091829020825180840190935280548352600101549082015290565b6003546001600160a01b031633146103165760405162461bcd60e51b815260040161023490610a8f565b61031f82610722565b61032982826107ae565b6001600160a01b03909116600090815260046020526040902055565b6003546001600160a01b0316331461036f5760405162461bcd60e51b815260040161023490610a8f565b6001600160a01b0382166000908152600560205260409020546103955761039582610833565b6001600160a01b03821660009081526005602052604090206103b8908390610857565b6040805180820182526001600160a01b03841660009081526005602052919091205481906103e690846108c2565b8152426020918201526001600160a01b0384166000908152600582526040812083518155929091015160019092019190915561042590829080806108ce565b5050565b60025460408051808201909152600754815260085460208201526000919061045090610958565b61045a9190610b0a565b905090565b6003546001600160a01b031633146104895760405162461bcd60e51b815260040161023490610a8f565b80610493836102a5565b5110156104f15760405162461bcd60e51b815260206004820152602660248201527f557365722068617320696e73756666696369656e74206475726120636f696e206044820152651cdd185ad95960d21b6064820152608401610234565b6001600160a01b0382166000908152600560205260409020546105175761051782610833565b6001600160a01b038216600090815260056020526040902061053a908390610857565b6040805180820182526001600160a01b038416600090815260056020529190912054819061056890846109a1565b8152426020918201526001600160a01b03841660009081526005825260408120835181559290910151600190920191909155610425908281806108ce565b336105af610622565b6001600160a01b0316146105d55760405162461bcd60e51b815260040161023490610ad5565b6105df60006109ad565b565b6000806105ed836102a5565b90506105f881610958565b6001600160a01b03841660009081526004602052604090205461061b9190610b0a565b9392505050565b6000546001600160a01b031690565b3361063a610622565b6001600160a01b0316146106605760405162461bcd60e51b815260040161023490610ad5565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b3361068b610622565b6001600160a01b0316146106b15760405162461bcd60e51b815260040161023490610ad5565b6001600160a01b0381166107165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610234565b61071f816109ad565b50565b6001600160a01b0381166000908152600560205260409020546107485761074881610833565b6001600160a01b038116600090815260056020526040902061076b908290610857565b6040805180820182526001600160a01b03909216600081815260056020818152938220805486524285870190815293909252909252915181559051600190910155565b6001600160a01b038216600090815260046020526040812054819083116107f9576001600160a01b0384166000908152600460205260409020546107f290846109a1565b9050610820565b6001600160a01b03841660009081526004602052604090205461081d9084906109a1565b91505b61082d60008084846108ce565b50505050565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b60408051808201909152815481526001820154602082015260009061087b90610958565b6001600160a01b0384166000908152600460205260409020549091506108a190826108c2565b6001600160a01b039093166000908152600460205260409020929092555050565b600061061b8284610b0a565b60408051808201909152600754815260085460208201526000906108f190610958565b60025490915061090190826108c2565b600281905561091c90839061091690866108c2565b906109a1565b60025560408051808201909152600754819061093e908790610916908a6108c2565b815242602091820152815160075501516008555050505050565b600061099b6301e13380610995606461099560015461098f6109878960200151426109a190919063ffffffff16565b8951906109fd565b906109fd565b90610a09565b92915050565b600061061b8284610b63565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061061b8284610b44565b600061061b8284610b22565b80356001600160a01b0381168114610a2c57600080fd5b919050565b600060208284031215610a4357600080fd5b61061b82610a15565b60008060408385031215610a5f57600080fd5b610a6883610a15565b946020939093013593505050565b600060208284031215610a8857600080fd5b5035919050565b60208082526026908201527f5468652066756e6374696f6e206d7573742062652063616c6c65642066726f6d604082015265081d985d5b1d60d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b1d57610b1d610b7a565b500190565b600082610b3f57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610b5e57610b5e610b7a565b500290565b600082821015610b7557610b75610b7a565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220e85aacdd6e5e9606d5033a7d3831f1db9a824a219b8584947a936f47cc2cae0564736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ba5760003560e01c80632456a11d146100bf57806342623360146100d45780634d8d595c146101075780635c76870b1461011a5780636374299e1461013157806364cdc99e1461014457806368ce7d8a1461014c578063715018a61461015f578063816c1acd146101675780638da5cb5b1461017a578063c763f2161461019a578063dabb98aa146101ad578063ef037b90146101b6578063f2fde38b146101f2575b600080fd5b6100d26100cd366004610a76565b610205565b005b6100e76100e2366004610a31565b6102a5565b604080518251815260209283015192810192909252015b60405180910390f35b6100d2610115366004610a4c565b6102ec565b61012360025481565b6040519081526020016100fe565b6100d261013f366004610a4c565b610345565b610123610429565b6100d261015a366004610a4c565b61045f565b6100d26105a6565b610123610175366004610a31565b6105e1565b610182610622565b6040516001600160a01b0390911681526020016100fe565b6100d26101a8366004610a31565b610631565b61012360015481565b6101e26101c4366004610a31565b6001600160a01b031660009081526006602052604090205460ff1690565b60405190151581526020016100fe565b6100d2610200366004610a31565b610682565b3361020e610622565b6001600160a01b03161461023d5760405162461bcd60e51b815260040161023490610ad5565b60405180910390fd5b600181905560408051818152601781830152763832b931b2b73a30b3b2a932bbb0b9322832b92cb2b0b960491b60608201526020810183905290517f272c29cfb1538e15f8105c58381747783d06b2021a4fcf849c274927396e1c379181900360800190a150565b6040805180820190915260008082526020820152506001600160a01b0316600090815260056020908152604091829020825180840190935280548352600101549082015290565b6003546001600160a01b031633146103165760405162461bcd60e51b815260040161023490610a8f565b61031f82610722565b61032982826107ae565b6001600160a01b03909116600090815260046020526040902055565b6003546001600160a01b0316331461036f5760405162461bcd60e51b815260040161023490610a8f565b6001600160a01b0382166000908152600560205260409020546103955761039582610833565b6001600160a01b03821660009081526005602052604090206103b8908390610857565b6040805180820182526001600160a01b03841660009081526005602052919091205481906103e690846108c2565b8152426020918201526001600160a01b0384166000908152600582526040812083518155929091015160019092019190915561042590829080806108ce565b5050565b60025460408051808201909152600754815260085460208201526000919061045090610958565b61045a9190610b0a565b905090565b6003546001600160a01b031633146104895760405162461bcd60e51b815260040161023490610a8f565b80610493836102a5565b5110156104f15760405162461bcd60e51b815260206004820152602660248201527f557365722068617320696e73756666696369656e74206475726120636f696e206044820152651cdd185ad95960d21b6064820152608401610234565b6001600160a01b0382166000908152600560205260409020546105175761051782610833565b6001600160a01b038216600090815260056020526040902061053a908390610857565b6040805180820182526001600160a01b038416600090815260056020529190912054819061056890846109a1565b8152426020918201526001600160a01b03841660009081526005825260408120835181559290910151600190920191909155610425908281806108ce565b336105af610622565b6001600160a01b0316146105d55760405162461bcd60e51b815260040161023490610ad5565b6105df60006109ad565b565b6000806105ed836102a5565b90506105f881610958565b6001600160a01b03841660009081526004602052604090205461061b9190610b0a565b9392505050565b6000546001600160a01b031690565b3361063a610622565b6001600160a01b0316146106605760405162461bcd60e51b815260040161023490610ad5565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b3361068b610622565b6001600160a01b0316146106b15760405162461bcd60e51b815260040161023490610ad5565b6001600160a01b0381166107165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610234565b61071f816109ad565b50565b6001600160a01b0381166000908152600560205260409020546107485761074881610833565b6001600160a01b038116600090815260056020526040902061076b908290610857565b6040805180820182526001600160a01b03909216600081815260056020818152938220805486524285870190815293909252909252915181559051600190910155565b6001600160a01b038216600090815260046020526040812054819083116107f9576001600160a01b0384166000908152600460205260409020546107f290846109a1565b9050610820565b6001600160a01b03841660009081526004602052604090205461081d9084906109a1565b91505b61082d60008084846108ce565b50505050565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b60408051808201909152815481526001820154602082015260009061087b90610958565b6001600160a01b0384166000908152600460205260409020549091506108a190826108c2565b6001600160a01b039093166000908152600460205260409020929092555050565b600061061b8284610b0a565b60408051808201909152600754815260085460208201526000906108f190610958565b60025490915061090190826108c2565b600281905561091c90839061091690866108c2565b906109a1565b60025560408051808201909152600754819061093e908790610916908a6108c2565b815242602091820152815160075501516008555050505050565b600061099b6301e13380610995606461099560015461098f6109878960200151426109a190919063ffffffff16565b8951906109fd565b906109fd565b90610a09565b92915050565b600061061b8284610b63565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061061b8284610b44565b600061061b8284610b22565b80356001600160a01b0381168114610a2c57600080fd5b919050565b600060208284031215610a4357600080fd5b61061b82610a15565b60008060408385031215610a5f57600080fd5b610a6883610a15565b946020939093013593505050565b600060208284031215610a8857600080fd5b5035919050565b60208082526026908201527f5468652066756e6374696f6e206d7573742062652063616c6c65642066726f6d604082015265081d985d5b1d60d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b1d57610b1d610b7a565b500190565b600082610b3f57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610b5e57610b5e610b7a565b500290565b600082821015610b7557610b75610b7a565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220e85aacdd6e5e9606d5033a7d3831f1db9a824a219b8584947a936f47cc2cae0564736f6c63430008070033",
  "devdoc": {
    "author": "AlloyX",
    "kind": "dev",
    "methods": {
      "addStake(address,uint256)": {
        "params": {
          "_stake": "The size of the stake to be created.",
          "_staker": "The person intending to stake"
        }
      },
      "changeVaultAddress(address)": {
        "params": {
          "_vaultAddress": "The address to change to"
        }
      },
      "claimableCRWNToken(address)": {
        "params": {
          "_receiver": "the address of receiver"
        }
      },
      "isStakeholder(address)": {
        "params": {
          "_address": "The address to verify."
        },
        "returns": {
          "_0": "bool Whether the address is a stakeholder, and if so its position in the stakeholders array."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeStake(address,uint256)": {
        "params": {
          "_stake": "The size of the stake to be removed.",
          "_staker": "The person intending to remove stake"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resetStakeTimestampWithRewardLeft(address,uint256)": {
        "params": {
          "_reward": "the leftover reward the staker owns",
          "_staker": "the address of the staker"
        }
      },
      "setPercentageRewardPerYear(uint256)": {
        "params": {
          "_percentageRewardPerYear": "the reward per year in percentage"
        }
      },
      "stakeOf(address)": {
        "params": {
          "_stakeholder": "The stakeholder to retrieve the stake for."
        },
        "returns": {
          "_0": "Stake The amount staked and the time since when it's staked."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AlloyX Stake Info",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addStake(address,uint256)": {
        "notice": "Add stake for a staker"
      },
      "changeVaultAddress(address)": {
        "notice": "Change the vault address"
      },
      "claimableCRWNToken(address)": {
        "notice": "Claimable CRWN token amount of an address"
      },
      "isStakeholder(address)": {
        "notice": "Check if an address is a stakeholder."
      },
      "removeStake(address,uint256)": {
        "notice": "Remove stake for a staker"
      },
      "resetStakeTimestampWithRewardLeft(address,uint256)": {
        "notice": "A method for a stakeholder to clear a stake with some leftover reward"
      },
      "setPercentageRewardPerYear(uint256)": {
        "notice": "Set percentageRewardPerYear which is the reward per year in percentage"
      },
      "stakeOf(address)": {
        "notice": "Retrieve the stake for a stakeholder."
      },
      "totalClaimableCRWNToken()": {
        "notice": "Total claimable CRWN tokens of all stakeholders"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1672,
        "contract": "contracts/alloyx/AlloyxStakeInfo.sol:AlloyxStakeInfo",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6431,
        "contract": "contracts/alloyx/AlloyxStakeInfo.sol:AlloyxStakeInfo",
        "label": "percentageRewardPerYear",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6433,
        "contract": "contracts/alloyx/AlloyxStakeInfo.sol:AlloyxStakeInfo",
        "label": "totalPastRedeemableReward",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6435,
        "contract": "contracts/alloyx/AlloyxStakeInfo.sol:AlloyxStakeInfo",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6439,
        "contract": "contracts/alloyx/AlloyxStakeInfo.sol:AlloyxStakeInfo",
        "label": "pastRedeemableReward",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6444,
        "contract": "contracts/alloyx/AlloyxStakeInfo.sol:AlloyxStakeInfo",
        "label": "stakesMapping",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(StakeInfo)6428_storage)"
      },
      {
        "astId": 6448,
        "contract": "contracts/alloyx/AlloyxStakeInfo.sol:AlloyxStakeInfo",
        "label": "stakeholderMap",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6451,
        "contract": "contracts/alloyx/AlloyxStakeInfo.sol:AlloyxStakeInfo",
        "label": "totalActiveStake",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(StakeInfo)6428_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(StakeInfo)6428_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AlloyxStakeInfo.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)6428_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(StakeInfo)6428_storage": {
        "encoding": "inplace",
        "label": "struct AlloyxStakeInfo.StakeInfo",
        "members": [
          {
            "astId": 6425,
            "contract": "contracts/alloyx/AlloyxStakeInfo.sol:AlloyxStakeInfo",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6427,
            "contract": "contracts/alloyx/AlloyxStakeInfo.sol:AlloyxStakeInfo",
            "label": "since",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}